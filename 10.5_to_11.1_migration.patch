diff --git a/lessonbuilder/10.5_to_11.1_migration.patch b/lessonbuilder/10.5_to_11.1_migration.patch
new file mode 100644
index 0000000..68c7153
--- /dev/null
+++ b/lessonbuilder/10.5_to_11.1_migration.patch
@@ -0,0 +1,1035 @@
+diff --git a/lessonbuilder/api/pom.xml b/lessonbuilder/api/pom.xml
+index a079bf4..95843d4 100644
+--- a/lessonbuilder/api/pom.xml
++++ b/lessonbuilder/api/pom.xml
+@@ -28,5 +28,23 @@
+             <version>2.4</version>
+             <scope>provided</scope>
+         </dependency>
++        <dependency>
++            <groupId>org.sakaiproject.msgcntr</groupId>
++            <artifactId>messageforums-api</artifactId>
++            <version>11.1</version>
++            <type>jar</type>
++        </dependency>
++        <dependency>
++            <groupId>org.sakaiproject.assignment</groupId>
++            <artifactId>sakai-assignment-api</artifactId>
++            <version>10.1</version>
++            <type>jar</type>
++        </dependency>
++        <dependency>
++            <groupId>org.sakaiproject.samigo</groupId>
++            <artifactId>samigo-api</artifactId>
++            <version>10.1</version>
++            <type>jar</type>
++        </dependency>
+     </dependencies>
+ </project>
+diff --git a/lessonbuilder/tool/pom.xml b/lessonbuilder/tool/pom.xml
+index d6b4d48..c287862 100644
+--- a/lessonbuilder/tool/pom.xml
++++ b/lessonbuilder/tool/pom.xml
+@@ -206,6 +206,92 @@
+              <artifactId>opencsv</artifactId>
+              <version>2.3</version>
+         </dependency>
++        <!-- OC added docx4j dependency -->
++        <dependency>
++            <groupId>org.docx4j</groupId>
++            <artifactId>docx4j</artifactId>
++            <version>3.2.1</version>
++        </dependency>
++        <dependency>
++            <groupId>org.docx4j</groupId>
++            <artifactId>docx4j-ImportXHTML</artifactId>
++            <version>3.2.2</version>
++        </dependency>
++        <dependency>
++            <groupId>xalan</groupId>
++            <artifactId>xalan</artifactId>
++            <version>2.7.1</version>
++            <scope>compile</scope>
++        </dependency>
++        <dependency>
++            <groupId>xalan</groupId>
++            <artifactId>serializer</artifactId>
++            <version>2.7.1</version>
++        </dependency>
++        <dependency>
++            <groupId>net.sourceforge.htmlcleaner</groupId>
++            <artifactId>htmlcleaner</artifactId>
++            <version>2.8</version>
++        </dependency>
++        <dependency>
++            <groupId>coza.opencollab</groupId>
++            <artifactId>epub-creator</artifactId>
++            <version>1.0.1-SNAPSHOT</version>
++        </dependency>
++        <dependency>
++            <groupId>org.jsoup</groupId>
++            <artifactId>jsoup</artifactId>
++            <version>1.7.3</version>
++            <type>jar</type>
++        </dependency>
++        <dependency>
++            <groupId>org.apache.xmlgraphics</groupId>
++            <artifactId>batik-transcoder</artifactId>
++            <version>1.8</version>
++        </dependency>
++        <dependency>
++            <groupId>org.apache.xmlgraphics</groupId>
++            <artifactId>batik-dom</artifactId>
++            <version>1.8</version>
++        </dependency>
++        <dependency>
++            <groupId>org.apache.xmlgraphics</groupId>
++            <artifactId>batik-util</artifactId>
++            <version>1.8</version>
++        </dependency>
++        <dependency>
++            <groupId>org.apache.xmlgraphics</groupId>
++            <artifactId>batik-svg-dom</artifactId>
++            <version>1.8</version>
++        </dependency>
++        <dependency>
++            <groupId>org.apache.xmlgraphics</groupId>
++            <artifactId>batik-codec</artifactId>
++            <version>1.8</version>
++        </dependency>
++        <dependency>
++            <groupId>commons-validator</groupId>
++            <artifactId>commons-validator</artifactId>
++            <version>1.4.0</version>
++            <type>jar</type>
++        </dependency>
++        <dependency>
++            <groupId>org.apache.xmlgraphics</groupId>
++            <artifactId>fop</artifactId>
++            <version>2.0</version>
++            <type>jar</type>
++        </dependency>
++        <dependency>
++            <groupId>org.apache.xmlgraphics</groupId>
++            <artifactId>xmlgraphics-commons</artifactId>
++            <version>2.0</version>
++        </dependency>
++
++        <dependency>
++            <groupId>xml-apis</groupId>
++            <artifactId>xml-apis-ext</artifactId>
++            <version>1.3.04</version>
++        </dependency>
+     </dependencies>
+ 
+ 
+diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/resolver/MultiCommonsMultipartResolver.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/resolver/MultiCommonsMultipartResolver.java
+index 5d17168..3913cf45 100644
+--- a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/resolver/MultiCommonsMultipartResolver.java
++++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/resolver/MultiCommonsMultipartResolver.java
+@@ -46,10 +46,11 @@ public class MultiCommonsMultipartResolver extends CommonsMultipartResolver {
+                         value = fileItem.getString(partEncoding);
+                     }
+                     catch (UnsupportedEncodingException ex) {
+-                        if (logger.isWarnEnabled()) {
+-                            logger.warn("Could not decode multipart item '" + fileItem.getFieldName() +
+-                                    "' with encoding '" + partEncoding + "': using platform default");
+-                        }
++//                        if (logger.isWarnEnabled()) {
++//                            logger.warn("Could not decode multipart item '" + fileItem.getFieldName() +
++//                                    "' with encoding '" + partEncoding + "': using platform default");
++//                        }
++                        System.out.println("Could not decode multipart item '" + fileItem.getFieldName() + "' with encoding '" + partEncoding + "': using platform default");
+                         value = fileItem.getString();
+                     }
+                 }
+@@ -72,11 +73,12 @@ public class MultiCommonsMultipartResolver extends CommonsMultipartResolver {
+                 // multipart file field
+                 CommonsMultipartFile file = new CommonsMultipartFile(fileItem);
+                 multipartFiles.add(fileItem.getName(), file);
+-                if (logger.isDebugEnabled()) {
+-                    logger.debug("Found multipart file [" + file.getName() + "] of size " + file.getSize() +
+-                            " bytes with original filename [" + file.getOriginalFilename() + "], stored " +
+-                            file.getStorageDescription());
+-                }
++//                if (logger.isDebugEnabled()) {
++//                    logger.debug("Found multipart file [" + file.getName() + "] of size " + file.getSize() +
++//                            " bytes with original filename [" + file.getOriginalFilename() + "], stored " +
++//                            file.getStorageDescription());
++//                }
++                System.out.println("Found multipart file [" + file.getName() + "] of size " + file.getSize() + " bytes with original filename [" + file.getOriginalFilename() + "], stored " + file.getStorageDescription());
+             }
+         }
+         return new MultipartParsingResult(multipartFiles, multipartParameters, multipartParameterContentTypes);
+diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/beans/ReportHandlerHook.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/beans/ReportHandlerHook.java
+index 682824f..246766e 100644
+--- a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/beans/ReportHandlerHook.java
++++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/beans/ReportHandlerHook.java
+@@ -14,15 +14,36 @@
+ 
+ package org.sakaiproject.lessonbuildertool.tool.beans;
+ 
++import java.io.BufferedReader;
++import java.io.IOException;
++import java.io.OutputStream;
++import java.io.PrintStream;
++import java.io.PrintWriter;
++import java.util.ArrayList;
++import java.util.List;
++
++import javax.servlet.http.Cookie;
++import javax.servlet.http.HttpServletRequest;
+ import javax.servlet.http.HttpServletResponse;
+ 
+ import org.apache.commons.logging.Log;
+ import org.apache.commons.logging.LogFactory;
+ import org.sakaiproject.lessonbuildertool.tool.view.ExportCCViewParameters;
++import org.sakaiproject.lessonbuildertool.tool.view.ImportDocxViewParameters;
++import org.sakaiproject.lessonbuildertool.tool.view.ExportDocxViewParameters;
++import org.sakaiproject.lessonbuildertool.tool.view.ExportEpubViewParameters;
+ import org.sakaiproject.lessonbuildertool.ccexport.CCExport;
++import org.sakaiproject.lessonbuildertool.docxexport.DocxExport;
++import org.sakaiproject.lessonbuildertool.epubexport.EpubExport;
++import org.sakaiproject.tool.api.ToolSession;
++import org.sakaiproject.tool.cover.SessionManager;
+ import org.sakaiproject.tool.cover.ToolManager;
+ import org.sakaiproject.authz.cover.SecurityService;
+ import org.sakaiproject.lessonbuildertool.SimplePage;
++import org.sakaiproject.lessonbuildertool.docximport.DocxImport;
++import org.sakaiproject.lessonbuildertool.pdfimport.PdfImport;
++import org.sakaiproject.lessonbuildertool.tool.view.ImportPdfViewParameters;
++import org.sakaiproject.lessonbuildertool.util.ApplicationContextProvider;
+ 
+ import uk.org.ponder.rsf.viewstate.ViewParameters;
+ 
+@@ -65,6 +86,54 @@ public class ReportHandlerHook {
+ 	  ccExport.doExport(siteId, response, (ExportCCViewParameters)viewparams);
+ 
+           return true;
++      }else if(viewparams instanceof ExportEpubViewParameters){
++    	  String siteId = ToolManager.getCurrentPlacement().getContext();
++     	  String ref = "/site/" + siteId;
++    	  boolean ok = SecurityService.unlock(SimplePage.PERMISSION_LESSONBUILDER_UPDATE, ref);
++    	  if (!ok)
++    	      return false;
++
++          log.debug("Handing viewparams and response off to the reportExporter");
++    	  EpubExport epubExport = (EpubExport) ApplicationContextProvider.getApplicationContext().getBean("org.sakaiproject.lessonbuildertool.epubexport.EpubExport");
++          //EpubExport epubExport = new EpubExport();
++    	  epubExport.doExport(siteId, response, (ExportEpubViewParameters)viewparams);
++          return true;
++      }else if(viewparams instanceof ExportDocxViewParameters){
++    	  String siteId = ToolManager.getCurrentPlacement().getContext();
++     	  String ref = "/site/" + siteId;
++    	  boolean ok = SecurityService.unlock(SimplePage.PERMISSION_LESSONBUILDER_UPDATE, ref);
++    	  if (!ok)
++    	      return false;
++
++          log.debug("Handing viewparams and response off to the reportExporter");
++          log.debug("Export Docx");
++          DocxExport docxExport = (DocxExport) ApplicationContextProvider.getApplicationContext().getBean("org.sakaiproject.lessonbuildertool.docxexport.DocxExport");
++          docxExport.doExport(siteId, response, (ExportDocxViewParameters)viewparams);
++          return true;
++      }else if(viewparams instanceof ImportDocxViewParameters){
++    	  String siteId = ToolManager.getCurrentPlacement().getContext();
++     	  String ref = "/site/" + siteId;
++    	  boolean ok = SecurityService.unlock(SimplePage.PERMISSION_LESSONBUILDER_UPDATE, ref);
++    	  if (!ok)
++    	      return false;
++
++          log.debug("Handing viewparams and response off to the reportImporter");
++          log.debug("Import Docx");
++//          DocxImport docxImport = (DocxImport) ApplicationContextProvider.getApplicationContext().getBean("org.sakaiproject.lessonbuildertool.docximport.DocxImport");
++//          docxImport.doImport(siteId, response, (ImportDocxViewParameters)viewparams);
++          return true;
++      } else if(viewparams instanceof ImportPdfViewParameters){
++    	  String siteId = ToolManager.getCurrentPlacement().getContext();
++     	  String ref = "/site/" + siteId;
++    	  boolean ok = SecurityService.unlock(SimplePage.PERMISSION_LESSONBUILDER_UPDATE, ref);
++    	  if (!ok)
++    	      return false;
++
++          log.debug("Handing viewparams and response off to the reportImporter");
++          log.debug("Import Pdf");
++          PdfImport pdfImport = (PdfImport) ApplicationContextProvider.getApplicationContext().getBean("org.sakaiproject.lessonbuildertool.pdfimport.PdfImport");
++          pdfImport.doImport(siteId, response, (ImportPdfViewParameters)viewparams);
++          return true;
+       }
+       return false;
+    }
+diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/beans/SimplePageBean.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/beans/SimplePageBean.java
+index 13cb33a..22ee8e9 100644
+--- a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/beans/SimplePageBean.java
++++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/beans/SimplePageBean.java
+@@ -94,6 +94,8 @@ import au.com.bytecode.opencsv.CSVParser;
+ import org.sakaiproject.portal.util.ToolUtils;
+ import org.sakaiproject.lti.api.LTIService;
+ import org.sakaiproject.basiclti.util.SakaiBLTIUtil;
++import org.sakaiproject.lessonbuildertool.docximport.DocxImport;
++import org.sakaiproject.lessonbuildertool.tool.view.ImportDocxViewParameters;
+ import org.tsugi.lti2.ContentItem;
+ 
+ /**
+@@ -7863,5 +7865,83 @@ public class SimplePageBean {
+ 	}
+ 	return result.toString();
+     }
++        
++    public void importDocx() {
++        if (!canEditPage()) {
++            return;
++        }
++        MultipartFile file = null;
++        if (multipartMap.size() > 0) {
++            // user specified a file, create it
++            file = multipartMap.values().iterator().next();
++        }
++        if (file != null) {
++            if (!uploadSizeOk(file)) {
++                return;
++            }
++            File docx = null;
++            File root = null;
++            try {
++                docx = File.createTempFile("docxloader", "file");
++                root = File.createTempFile("docxloader", "root");
++                if (root.exists()) {
++                    if (!root.delete()) {
++                        setErrMessage("unable to delete temp file for load");
++                        return;
++                    }
++                }
++                if (!root.mkdir()) {
++                    setErrMessage("unable to create temp directory for load");
++                    return;
++                }
++                BufferedInputStream bis = new BufferedInputStream(file.getInputStream());
++                BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(docx));
++                byte[] buffer = new byte[8096];
++                int n = 0;
++                while ((n = bis.read(buffer, 0, 8096)) >= 0) {
++                    if (n > 0) {
++                        bos.write(buffer, 0, n);
++                    }
++                }
++                bis.close();
++                bos.close();
++                DocxImport di = new DocxImport();
++                di.setContentHostingService(contentHostingService);
++                di.setMessageLocator(messageLocator);
++                ImportDocxViewParameters idvp = new ImportDocxViewParameters(ShowPageProducer.VIEW_ID);
++                idvp.setFileName(file.getName());
++                idvp.setOriginalFileName(file.getOriginalFilename());
++                di.doImport(docx, httpServletResponse, idvp, this, simplePageToolDao);
++            } catch (Exception e) {
++                setErrKey("simplepage.cc-error", "");
++            } finally {
++                if (docx != null) {
++                    try {
++                        deleteRecursive(docx);
++                    } catch (Exception e) {
++                        log.error("Delete DOCX: Unable to delete temp files created during this step" , e);
++                    }
++                }
++                try {
++                    deleteRecursive(root);
++                } catch (Exception e) {
++                    log.error("Delete Root: Unable to delete temp files created during this step" , e);
++                }
++            }
++        }
++        GeneralViewParameters view = new GeneralViewParameters(ShowPageProducer.VIEW_ID);
++    }
++    
++    public void exportEpub(){
++		GeneralViewParameters view = new GeneralViewParameters(ShowPageProducer.VIEW_ID);
++	}
++	
++    public void exportDocx(){
++            GeneralViewParameters view = new GeneralViewParameters(ShowPageProducer.VIEW_ID);
++    }
++
++    public void exportError(){
++            GeneralViewParameters view = new GeneralViewParameters(ShowPageProducer.VIEW_ID);
++    }
+ 
+ }
+diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/producers/ShowPageProducer.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/producers/ShowPageProducer.java
+index caf15df..d4e36ad 100644
+--- a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/producers/ShowPageProducer.java
++++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/producers/ShowPageProducer.java
+@@ -102,6 +102,8 @@ import org.sakaiproject.lessonbuildertool.tool.view.GeneralViewParameters;
+ import org.sakaiproject.lessonbuildertool.tool.view.QuestionGradingPaneViewParameters;
+ import org.sakaiproject.lessonbuildertool.tool.view.ExportCCViewParameters;
+ import org.sakaiproject.lessonbuildertool.service.LessonBuilderAccessService;
++import org.sakaiproject.lessonbuildertool.tool.view.ExportDocxViewParameters;
++import org.sakaiproject.lessonbuildertool.tool.view.ExportEpubViewParameters;
+ import org.sakaiproject.authz.api.AuthzGroup;
+ import org.sakaiproject.memory.api.Cache;
+ import org.sakaiproject.memory.api.MemoryService;
+@@ -155,6 +157,8 @@ import uk.org.ponder.rsf.viewstate.SimpleViewParameters;
+ import uk.org.ponder.rsf.viewstate.ViewParameters;
+ import uk.org.ponder.rsf.viewstate.ViewParamsReporter;
+ import org.apache.commons.lang.StringEscapeUtils;
++import org.sakaiproject.lessonbuildertool.tool.view.ImportDocxViewParameters;
++import org.sakaiproject.lessonbuildertool.tool.view.ImportPdfViewParameters;
+ 
+ /**
+  * This produces the primary view of the page. It also handles the editing of
+@@ -752,7 +756,12 @@ public class ShowPageProducer implements ViewComponentProducer, DefaultView, Nav
+ 				createToolBarLink(PermissionsHelperProducer.VIEW_ID, tofill, "permissions", "simplepage.permissions", currentPage, "simplepage.permissions.tooltip");
+ 				UIOutput.make(tofill, "import-cc").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.import_cc.tooltip")));
+ 				UIOutput.make(tofill, "export-cc").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.export_cc.tooltip")));
+-
++                                // OC Adding two additional export options
++                                UIOutput.make(tofill, "import-docx").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.import_docx.tooltip")));
++                                UIOutput.make(tofill, "import-pdf").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.import_pdf.tooltip")));
++                                UIOutput.make(tofill, "export-epub").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.export_epub.tooltip")));
++                                UIOutput.make(tofill, "export-docx").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.export_docx.tooltip")));
++                                UIOutput.make(tofill, "export-error").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.export_docx.tooltip")));
+ 				// Check to see if we have tools registered for external import
+ 				List<Map<String, Object>> toolsFileItem = simplePageBean.getToolsFileItem();
+ 				if ( toolsFileItem.size() > 0 ) {
+@@ -3033,6 +3042,11 @@ public class ShowPageProducer implements ViewComponentProducer, DefaultView, Nav
+ 		createRemovePageDialog(tofill, currentPage, pageItem);
+ 		createImportCcDialog(tofill);
+ 		createExportCcDialog(tofill);
++                // OC addition of additional Dialogs
++                createImportPdfDialog(tofill,currentPage);
++                createImportDocxDialog(tofill,currentPage);
++                createExportEpubDialog(tofill,currentPage);
++                createExportDocxDialog(tofill,currentPage);
+ 		createYoutubeDialog(tofill, currentPage);
+ 		createMovieDialog(tofill, currentPage);
+ 		createCommentsDialog(tofill);
+@@ -3967,6 +3981,78 @@ public class ShowPageProducer implements ViewComponentProducer, DefaultView, Nav
+ 
+ 	}
+ 
++        /**
++         * Create the RSF form for the Epub export dialog
++         * @param tofill
++         */
++        private void createExportEpubDialog(UIContainer tofill,SimplePage page) {
++            UIOutput.make(tofill, "export-epub-dialog").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.export-epub-title")));
++
++            UIForm form = UIForm.make(tofill, "export-epub-form");
++            UICommand.make(form, "export-epub-ok", messageLocator.getMessage("simplepage.export-epub-ok"), null);
++
++            ExportEpubViewParameters view = new ExportEpubViewParameters("exportEpub");
++            view.setPageId(page.getPageId());
++            view.setUrl(myUrl());
++            UIInternalLink.make(form, "export-epub-link", "export epub link", view);                
++        }  
++        
++        /**
++         * Create the RSF form for the PDF import dialog
++         *
++         * @param tofill
++         */
++        private void createImportPdfDialog(UIContainer tofill, SimplePage page) {
++            UIOutput.make(tofill, "import-pdf-dialog").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.import-pdf-title")));
++
++            UIForm form = UIForm.make(tofill, "import-pdf-form");
++            UICommand.make(form, "import-pdf-ok", messageLocator.getMessage("simplepage.import-pdf-ok"), null);
++
++            ImportPdfViewParameters view = new ImportPdfViewParameters("importPdf");
++            view.setPageId(page.getPageId());
++            view.setUrl(myUrl());
++            UIInternalLink.make(form, "import-pdf-link", "import pdf link", view);
++        }
++        
++        
++        
++        /**
++         * Create the RSF form for the Docx export dialog
++         *
++         * @param tofill
++         */
++        private void createImportDocxDialog(UIContainer tofill, SimplePage page) {
++            UIOutput.make(tofill, "import-docx-dialog").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.import_docx-title")));
++
++            UIForm form = UIForm.make(tofill, "import-docx-form");
++            // UICommand.make(form, "import-docx-ok", messageLocator.getMessage("simplepage.import-docx-ok"), null);
++
++            UICommand.make(form, "import-docx-submit", messageLocator.getMessage("simplepage.save_message"), "#{simplePageBean.importDocx}");
++            UICommand.make(form, "mm-cancel", messageLocator.getMessage("simplepage.cancel"), null);
++
++            ImportDocxViewParameters view = new ImportDocxViewParameters("importDocx");
++            view.setPageId(page.getPageId());
++            view.setUrl(myUrl());
++            UIInternalLink.make(form, "import-docx-link", "import docx link", view);
++        }
++
++        /**
++         * Create the RSF form for the DocX export dialog
++         * @param tofill
++         */
++        private void createExportDocxDialog(UIContainer tofill, SimplePage page) {
++            UIOutput.make(tofill, "export-docx-dialog").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.export-docx-title")));
++
++            UIForm form = UIForm.make(tofill, "export-docx-form");
++
++            ExportDocxViewParameters view = new ExportDocxViewParameters("exportDocx");
++            view.setExportDocx(true);
++            view.setToolId(httpServletRequest.getQueryString());
++            view.setPageId(page.getPageId());
++            view.setUrl(myUrl());
++            UIInternalLink.make(form, "export-docx-link", "export docx link", view);
++        }
++        
+ 	private void createEditMultimediaDialog(UIContainer tofill, SimplePage currentPage) {
+ 		UIOutput.make(tofill, "edit-multimedia-dialog").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.editMultimedia")));
+ 
+diff --git a/lessonbuilder/tool/src/resources/messages.properties b/lessonbuilder/tool/src/resources/messages.properties
+index 254ebe7..144e9d0 100644
+--- a/lessonbuilder/tool/src/resources/messages.properties
++++ b/lessonbuilder/tool/src/resources/messages.properties
+@@ -266,6 +266,83 @@ simplepage.cc_epub3=EPUB 3
+ simplepage.cc_ext_assignment=Assignment (extended definition)
+ simplepage.cc-has-badtypes=This cartridge contains resources of types with no specific support in this system. They will be treated as ordinary files: {}
+ 
++simplepage.import_pdf=Import PDF to create Lesson
++simplepage.import_pdf.tooltip=Import the PDF, create the Lesson
++simplepage.import-pdf-title=Import .pdf file
++simplepage.importpdf-descrip=Import .pdf to create the Lesson.
++simplepage.import-pdf-ok=OK
++
++simplepage.pdf.error.header=Errors have occurred while creating the file. Please corrected the errors listed below.
++simplepage.pdf.error.exporting=Error exporting the lesson to pdf format
++simplepage.pdf.error.creating.new.image=Error creating a new image 
++simplepage.pdf.error.url=Unable to properly URL encode the link address
++simplepage.pdf.error.hyperlink=Pdf error creating a hyperlink 
++simplepage.pdf.error.creating.assignment=Error creating Assignment export for pdf
++simplepage.pdf.error.creating.assessment=Error creating Assessment export for pdf
++simplepage.pdf.error.creating.forum=Error creating Forum export for pdf
++simplepage.pdf.error.creating.question=Error creating Question export for pdf
++simplepage.pdf.error.creating.url=Error retrieving URL for pdf export
++simplepage.pdf.error.creating.resource=Error creating Resource export for pdf
++simplepage.pdf.error.processing.text=Error processing Textual data for pdf
++
++
++
++simplepage.import_docx=Import MS Word to create Lesson
++simplepage.import_docx.tooltip=Import the docx, create the Lesson
++simplepage.import_docx-title=Import .docx file
++simplepage.importdocx-descrip=Import .docx to create the Lesson.
++simplepage.import_docx_file=Import .docx
++simplepage.import-docx-ok=OK
++simplepage.docx.error.importing=Error experienced while importing the DOCX file
++
++
++simplepage.export_epub=Export for offline reader
++simplepage.export_epub.tooltip=Export the Lessons content to an EPUB3 resource.
++simplepage.export-epub-title=Export EPUB3 file
++simplepage.export-epub-ok=OK
++simplepage.exportepub-descrip=Export contents of site in EPUB3 format.
++
++simplepage.export_docx=Export to MS Word
++simplepage.export_docx.tooltip=Export the Lessons content to an docx resource.
++simplepage.export-docx-title=Export .docx file
++simplepage.exportdocx-descrip=Export contents of site in docx format.
++simplepage.docx.error.header=Errors have occurred while creating the file. Please corrected the errors listed below.
++simplepage.docx.error.exporting=Error exporting the lesson to DOCX format
++simplepage.docx.error.creating.new.image=Error creating a new image 
++simplepage.docx.error.url=Unable to properly URL encode the link address
++simplepage.docx.error.hyperlink=Docx error creating a hyperlink 
++simplepage.docx.error.creating.assignment=Error creating Assignment export for Docx
++simplepage.docx.error.creating.assessment=Error creating Assessment export for Docx
++simplepage.docx.error.creating.forum=Error creating Forum export for Docx
++simplepage.docx.error.creating.question=Error creating Question export for Docx
++simplepage.docx.error.creating.url=Error retrieving URL for Docx export
++simplepage.docx.error.creating.resource=Error creating Resource export for Docx
++simplepage.docx.error.processing.text=Error processing Textual data for Docx
++
++
++
++simplepage.epub.error.header=The file has been created with some errors. Please see exported document for more information.
++simplepage.epub.error.creating.assignment=Error creating Assignment export for Epub
++simplepage.epub.error.creating.assessment=Error creating Assessment export for Epub
++simplepage.epub.error.creating.forum=Error creating Forum export for Epub
++simplepage.epub.error.creating.url=Error retrieving URL for Epub export
++simplepage.epub.error.creating.resource=Error creating Resource export for Epub
++simplepage.epub.error.attaching.css=Error attaching the sites CSS styling for Epub 
++
++export-epub-current=export-epub-current
++simplepage.exportepub-current=test
++simplepage.export-epub-submit=Export Epub File
++simplepage.export-epub-cancel=Cancel
++simplepage.export-docx-submit=Export This Lesson to DOCX
++simplepage.export-docx-cancel=Cancel
++export-docx-cancel=Cancel
++export-epub-form=export-epub-form
++
++simplepage.export_error=Export Error(s) 
++simplepage.export_error.tooltip=Error(s) have occurred during the export process.
++simplepage.export-error-title=Errors during export 
++simplepage.exporterror-descrip=Error(s) have occurred during the export process.
++
+ simplepage.export_cc=Export CC
+ simplepage.export_cc.tooltip=Create file in IMS Common Cartridge format. This may be used to save the contents of a course for later use. Most other Course Management Systems can read Common Cartridge files. The file will contain all content from Lessons, Assignments, Forum or Topics, Quizzes, and Question Pools. However not all details will be saved.
+ simplepage.export-cc-title=Export IMS Common Cartridge file
+diff --git a/lessonbuilder/tool/src/webapp/WEB-INF/applicationContext.xml b/lessonbuilder/tool/src/webapp/WEB-INF/applicationContext.xml
+index 9ffe417..675163e 100644
+--- a/lessonbuilder/tool/src/webapp/WEB-INF/applicationContext.xml
++++ b/lessonbuilder/tool/src/webapp/WEB-INF/applicationContext.xml
+@@ -3,6 +3,8 @@
+     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+     xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
+ 
++    <bean id="applicationContextProvder" class="org.sakaiproject.lessonbuildertool.util.ApplicationContextProvider"/>
++    
+    <!-- Use the Sakai session factory, pre-configured, instead of one local to TaskList
+         we are adding our HBM files to the Sakai session factory instead of creating
+         our own copy of it -->
+@@ -87,6 +89,10 @@ simplePageBean.hasReleaseDate,
+ simplePageBean.height,
+ simplePageBean.hidePage,
+ simplePageBean.importCc,
++simplePageBean.importDocx,
++simplePageBean.exportEpub,
++simplePageBean.exportDocx,
++simplePageBean.exportError,
+ simplePageBean.importtop,
+ simplePageBean.isCaption,
+ simplePageBean.isMultimedia,
+@@ -307,6 +313,14 @@ simplePageBean.peerEvalAllowSelfGrade
+     	</constructor-arg>
+     	</bean>
+ 
++        <bean id="org.sakaiproject.lessonbuildertool.service.DataExportService"
++	      class="org.sakaiproject.lessonbuildertool.service.DataExportServiceImpl">
++            <property name="contentHostingService"><ref bean="org.sakaiproject.content.api.ContentHostingService"/></property>
++            <property name="simplePageToolDao" ref="org.sakaiproject.lessonbuildertool.model.SimplePageToolDao" />
++            <property name="siteService" ref="org.sakaiproject.site.api.SiteService"/>
++            <property name="publishedAssessmentFacadeQueries"><ref bean="PublishedAssessmentFacadeQueries" /></property>
++	</bean>
++
+  	<bean id="org.sakaiproject.lessonbuildertool.ccexport.CCExport"
+ 	      class="org.sakaiproject.lessonbuildertool.ccexport.CCExport">
+ 	  <property name="contentHostingService"><ref bean="org.sakaiproject.content.api.ContentHostingService"/></property>
+@@ -317,7 +331,46 @@ simplePageBean.peerEvalAllowSelfGrade
+ 	  <property name="messageLocator" ref="messageLocator"/>
+ 	  <property name="simplePageToolDao" ref="org.sakaiproject.lessonbuildertool.model.SimplePageToolDao" />
+ 	</bean>
++        
++        <bean id="org.sakaiproject.lessonbuildertool.docximport.DocxImport"
++            class="org.sakaiproject.lessonbuildertool.docximport.DocxImport">
++	</bean>
++        
++ 	<bean id="org.sakaiproject.lessonbuildertool.epubexport.EpubExport"
++            class="org.sakaiproject.lessonbuildertool.epubexport.EpubExport">
++            <property name="contentHostingService"><ref bean="org.sakaiproject.content.api.ContentHostingService"/></property>
++            <property name="dataExportService" ref="org.sakaiproject.lessonbuildertool.service.DataExportService" />
++            <property name="htmlCleaner" ref="org.sakaiproject.lessonbuildertool.util.HtmlCleanerUtil"/>
++            <property name="exportHelper" ref="org.sakaiproject.lessonbuildertool.util.ExportHelper"/>
++	    <property name="messageLocator" ref="messageLocator"/>
++	</bean>
++	
++ 	<bean id="org.sakaiproject.lessonbuildertool.docxexport.DocxExport"
++            class="org.sakaiproject.lessonbuildertool.docxexport.DocxExport">
++            <property name="dataExportService" ref="org.sakaiproject.lessonbuildertool.service.DataExportService" />
++            <property name="messageLocator" ref="messageLocator"/>
++            <property name="htmlCleaner" ref="org.sakaiproject.lessonbuildertool.util.HtmlCleanerUtil"/>
++            <property name="exportHelper" ref="org.sakaiproject.lessonbuildertool.util.ExportHelper"/>
++            <property name="xHTMLImageHandler"><ref bean="org.docx4j.convert.in.xhtml.XHTMLImageHandler"/></property>
++	</bean>
+ 
++ 	<bean id="org.docx4j.convert.in.xhtml.XHTMLImageHandler"
++            class="org.sakaiproject.lessonbuildertool.util.XHTMLImageHandlerSakai">
++            <property name="serverConfigurationService" ref="org.sakaiproject.component.api.ServerConfigurationService"/>
++            <property name="dataExportService" ref="org.sakaiproject.lessonbuildertool.service.DataExportService" />
++	</bean>
++    
++ 	<bean id="org.sakaiproject.lessonbuildertool.util.HtmlCleanerUtil"
++            class="org.sakaiproject.lessonbuildertool.util.HtmlCleanerUtil">
++            <property name="dataExportService" ref="org.sakaiproject.lessonbuildertool.service.DataExportService" />
++            <property name="serverConfigurationService" ref="org.sakaiproject.component.api.ServerConfigurationService"/>
++	</bean>   
++	
++ 	<bean id="org.sakaiproject.lessonbuildertool.util.ExportHelper"
++	    class="org.sakaiproject.lessonbuildertool.util.ExportHelper">
++            <property name="messageLocator" ref="messageLocator"/>
++	</bean>   
++        
+  	<bean id="org.sakaiproject.lessonbuildertool.ccexport.SamigoExport"
+ 	      class="org.sakaiproject.lessonbuildertool.ccexport.SamigoExport"
+               init-method="init"
+@@ -362,10 +415,24 @@ simplePageBean.peerEvalAllowSelfGrade
+ 	  <property name="messageLocator" ref="messageLocator"/>
+ 	  <property name="simplePageToolDao" ref="org.sakaiproject.lessonbuildertool.model.SimplePageToolDao" />
+ 	</bean>
++        
++	<bean parent="viewParamsRegistrarParent" id="importDocx" >
++            <property name="viewID" value="importDocx" />
++            <property name="viewParamsClass" value="org.sakaiproject.lessonbuildertool.tool.view.ImportDocxViewParameters" />
++	</bean>
++        
++	<bean parent="viewParamsRegistrarParent" id="exportDocx" >
++            <property name="viewID" value="exportDocx" />
++            <property name="viewParamsClass" value="org.sakaiproject.lessonbuildertool.tool.view.ExportDocxViewParameters" />
++	</bean>
+ 
++	<bean parent="viewParamsRegistrarParent" id="exportEpub">
++            <property name="viewID" value="exportEpub" />
++            <property name="viewParamsClass" value="org.sakaiproject.lessonbuildertool.tool.view.ExportEpubViewParameters" />
++	</bean>
+ 	<bean parent="viewParamsRegistrarParent">
+-          <property name="viewID" value="exportCc" />
+-          <property name="viewParamsClass"
++            <property name="viewID" value="exportCc" />
++            <property name="viewParamsClass"
+ 		    value="org.sakaiproject.lessonbuildertool.tool.view.ExportCCViewParameters" />
+ 	</bean>
+ 	
+diff --git a/lessonbuilder/tool/src/webapp/js/show-page.js b/lessonbuilder/tool/src/webapp/js/show-page.js
+index e76dcfc..1926ce6 100644
+--- a/lessonbuilder/tool/src/webapp/js/show-page.js
++++ b/lessonbuilder/tool/src/webapp/js/show-page.js
+@@ -185,6 +185,38 @@ $(document).ready(function() {
+ 			draggable: false
+ 		});
+ 
++                $('#import-docx-dialog').dialog({
++                    autoOpen: false,
++                    width: 600,
++                    modal: false,
++                    resizable: false,
++                    draggable: false
++		});
++                
++                $('#import-pdf-dialog').dialog({
++                    autoOpen: false,
++                    width: 600,
++                    modal: false,
++                    resizable: false,
++                    draggable: false
++		});
++            
++                $('#export-epub-dialog').dialog({
++                    autoOpen: false,
++                    width: 600,
++                    modal: false,
++                    resizable: false,
++                    draggable: false
++		});
++                
++                $('#export-docx-dialog').dialog({
++                    autoOpen: false,
++                    width: 600,
++                    modal: false,
++                    resizable: false,
++                    draggable: false
++		});
++        
+ 		$('#comments-dialog').dialog({
+ 			autoOpen: false,
+ 			width: modalDialogWidth(),
+@@ -248,7 +280,8 @@ $(document).ready(function() {
+ 		$(window).resize(function() {
+ 			var modalDialogList = ['#subpage-dialog', '#edit-item-dialog', '#edit-multimedia-dialog',
+ 			'#add-multimedia-dialog', '#edit-title-dialog', '#new-page-dialog', '#remove-page-dialog',
+-			'#youtube-dialog', '#movie-dialog', '#import-cc-dialog', '#export-cc-dialog',
++			'#youtube-dialog', '#movie-dialog', '#import-cc-dialog', '#export-cc-dialog', '#import-docx-dialog', 
++                        '#export-epub-dialog', '#export-docx-dialog',
+ 		        '#comments-dialog', '#student-dialog', '#question-dialog', '#delete-confirm'];
+ 			for (var i = 0; i < modalDialogList.length; i++) {
+ 				$(modalDialogList[i]).dialog("option", "width", modalDialogWidth());
+@@ -376,6 +409,100 @@ $(document).ready(function() {
+ 			closeExportCcDialog();
+ 			return false;
+ 		    });
++                
++                $('#import-docx').click(function(){
++                    oldloc = $(".dropdown a");
++                    closeDropdowns();
++                    $('#import-docx-dialog').dialog('open');
++                    setupdialog($('#import-docx-dialog'));
++                    return false;
++                });
++        
++                $("#import-docx-submit").on("click",function() {
++                    importDocx();
++                });
++        
++                $('#import-pdf').click(function(){
++                    closeDropdowns();
++                    var position =  $(this).position();
++                    $("#import-pdf-dialog").dialog("option", "position", [position.left, position.top]);
++                    oldloc = $(".dropdown a");
++                    $('#import-pdf-dialog').dialog('open');
++                    $('#import-pdf-message').hide();
++                    $('#import-pdf-resource').hide();
++                    $('#import-pdf-ok').hide();      
++                    $('#importPdfProgressbar').show();
++                    checksize($('#import-pdf-dialog'));
++                    importPdf();
++                    var pdfLink = $("#import-pdf-link").attr("href");
++                    $.ajax({
++                        type: "GET", 
++                        url: pdfLink,
++                        success: function(data,textStatus,resp){
++                            var obj = $.parseJSON(resp.responseText);
++                            $('#import-pdf-message').show();
++                            $('#import-pdf-resource').show();
++                            $('#import-pdf-ok').show();
++                            if(obj.errorMessage){
++                                $('#import-pdf-message').text(obj.errorMessage);
++                                $('#import-pdf-message').parent().append("<div>"+obj.errorReason+"</div>");
++                            }else{
++                                $('#import-pdf-resource').text(data.docName);
++                                $('#import-pdf-resource').attr("href", data.docURL);
++                            }
++                            $('#importPdfProgressbar').hide();
++                        }
++                      });
++                    return false;
++                });
++                
++                $('#export-epub').click(function(){
++                    oldloc = $(".dropdown a");
++                    closeDropdowns();
++                    $('#export-epub-dialog').dialog('open');
++                    setupdialog($('#export-epub-dialog'));
++                    exportToEpub();
++                    var epubLink = $("#export-epub-link").attr("href");
++                    $.ajax({
++                        type: "GET", 
++                        url: epubLink,
++                        success: function(data,textStatus,resp){
++                            var obj = $.parseJSON(resp.responseText);
++                            $('#export-epub-message').show();
++                            $('#export-epub-resource').show();
++                            $('#export-epub-ok').show();
++                            if(obj.errorMessage){
++                                $('#export-epub-message').text(obj.errorMessage);
++                                $('#export-epub-message').parent().append("<div>"+obj.errorReason+"</div>");
++                            }else{
++                                $('#export-epub-resource').text(data.docName);
++                                $('#export-epub-resource').attr("href", data.docURL);
++                            }
++                            $('#epubProgressbar').hide();
++                        }
++                      });
++                    return false;
++		});
++                
++                $('#export-docx').click(function(){
++                    oldloc = $(".dropdown a");
++                    closeDropdowns();
++                    $('#export-docx-dialog').dialog('open');
++                    setupdialog($('#export-docx-dialog'));
++                    $.removeCookie('fileDownloadToken', { path: '/' });
++                    oldloc = $(".dropdown a");
++                    exportToDocx();
++                    $("#export-docx-link").get(0).click();
++                    fileDownloadCheckTimer = window.setInterval(function() {
++                        var cookieValue = $.cookie('fileDownloadToken');
++                        if (cookieValue === "closeDocXDialog") {
++                            window.clearInterval(fileDownloadCheckTimer);
++                            $.removeCookie('fileDownloadToken', { path: '/' });
++                            location.reload();
++                        }
++                    }, 1000);
++                    return false;
++		});  
+ 
+ 		$('#import-cc-submit').click(function() {
+ 			// prevent double clicks
+@@ -386,10 +513,10 @@ $(document).ready(function() {
+ 			return true;
+ 	    	});
+ 
+-	    // This code must be read together with the SimplePageItem.MULTIMEDIA
+-	    // display code in ShowPageProducer.java (To find it search for
+-	    // multimediaDisplayType) and with the code in SimplePageBean that
+-	    // handles the submit from this dialog, addMultimedia.
++                // This code must be read together with the SimplePageItem.MULTIMEDIA
++                // display code in ShowPageProducer.java (To find it search for
++                // multimediaDisplayType) and with the code in SimplePageBean that
++                // handles the submit from this dialog, addMultimedia.
+ 
+ 
+ 		$('#mm-add-item').click(function() {
+@@ -1903,7 +2030,9 @@ $(document).ready(function() {
+ 				$('#youtube-dialog').dialog('isOpen') ||
+ 				$('#movie-dialog').dialog('isOpen') ||
+ 				$('#import-cc-dialog').dialog('isOpen') ||
+-				$('#export-cc-dialog').dialog('isOpen') ||
++				$('#import-docx-dialog').dialog('isOpen') ||
++                                $('#export-epub-dialog').dialog('isOpen') ||
++                                $('#export-docx-dialog').dialog('isOpen') ||
+ 				$('#comments-dialog').dialog('isOpen') ||
+ 				$('#column-dialog').dialog('isOpen') ||
+ 			        $('#student-dialog').dialog('isOpen') ||
+@@ -2318,6 +2447,27 @@ function closeExportCcDialog() {
+ 	oldloc.focus();
+ }
+ 
++function closeExportEpubDialog() {
++	$('#export-epub-dialog').dialog('close');
++	oldloc.focus();
++}
++
++function closeImportDocxDialog() {
++	$('#import-docx-dialog').dialog('close');
++	oldloc.focus();
++}
++
++function closeImportPdfDialog() {
++	$('#import-pdf-dialog').dialog('close');
++	oldloc.focus();
++}
++
++function closeExportDocxDialog() {
++        $('#export-docx-dialog').dialog('close');
++	oldloc.focus();
++}
++
++
+ function closeRemovePageDialog() {
+ 	$('#remove-page-dialog').dialog('close');
+ 	oldloc.focus();
+@@ -3005,3 +3155,53 @@ function fixupHeights() {
+ 	});
+ };
+ 
++   
++/**
++ * Export to epub function. 
++ * Displays the progress bar and populates the value.
++ */
++function exportToEpub(){
++    $( "#epubProgressbar" ).progressbar({
++             value: false
++    });
++}
++
++/**
++ * Import to Docx function. 
++ * Displays the progress bar and populates the value.
++ */
++function importDocx(){
++    $( "#importDocxProgressbar" ).progressbar({
++        value: false
++    });
++    $('#importDocxProgressbar').show();
++    $('#docx-import-controls').hide();
++}
++
++/**
++ * Import to PDF function. 
++ * Displays the progress bar and populates the value.
++ */
++function importPdf(){
++    $( "#importPdfProgressbar" ).progressbar({
++        value: false
++    });
++}
++
++/**
++ * Export to DocX function. 
++ * Displays the progress bar and populates the value.
++ */
++function exportToDocx(){
++    $( "#docxProgressbar" ).progressbar({
++             value: false
++    });    
++}
++
++/**
++ * Close the ExportDocxDialog
++ */
++function closeExportDocxDialog() {
++    $('#export-docx-dialog').dialog('close');
++    oldloc.focus();
++}
+\ No newline at end of file
+diff --git a/lessonbuilder/tool/src/webapp/templates/ShowPage.html b/lessonbuilder/tool/src/webapp/templates/ShowPage.html
+index 049c667..468c7c3 100644
+--- a/lessonbuilder/tool/src/webapp/templates/ShowPage.html
++++ b/lessonbuilder/tool/src/webapp/templates/ShowPage.html
+@@ -59,6 +59,7 @@
+  <script type="text/javascript" src="$context/js/hoverIntent.js"></script>
+  <script type="text/javascript" src="$context/js/show-page.js"></script>
+  <script type="text/javascript" src="$context/js/gradingAjax.js"></script>
++ <script type="text/javascript" src="$context/js/jquery.cookie.js"></script>
+  <link rel="stylesheet" rsf:id="customCSS" type="text/css" />
+ 
+  <a href="#" rsf:id="redirect-link" id="redirect-link"></a>
+@@ -324,6 +325,21 @@
+                       <a href="#" role="menuitem" rsf:id="export-cc" id="export-cc"><span rsf:id="msg=simplepage.export_cc"></span></a>
+                       <!-- just a message, so will display when it should not-->
+                     </li>
++                    <li>
++                      <a href="#" role="menuitem" rsf:id="import-docx" id="import-docx"><span rsf:id="msg=simplepage.import_docx"></span></a>
++                      <!-- just a message, so will display when it should not-->
++                      <div rsf:id="msg=simplepage.importdocx-descrip"></div>
++                    </li> 
++                    <li>
++                      <a href="#" role="menuitem" rsf:id="export-epub" id="export-epub"><span rsf:id="msg=simplepage.export_epub"></span></a>
++                      <!-- just a message, so will display when it should not-->
++                      <div rsf:id="msg=simplepage.exportepub-descrip"></div>
++                    </li> 
++                    <li>
++                      <a href="#" role="menuitem" rsf:id="export-docx" id="export-docx"><span rsf:id="msg=simplepage.export_docx"></span></a>
++                      <!-- just a message, so will display when it should not-->
++                      <div rsf:id="msg=simplepage.exportdocx-descrip"></div>
++                    </li> 
+                     <li rsf:id="show-lti-import">
+                       <form action="#" rsf:id="lti-import-form" method="post" enctype="multipart/form-data">
+ 			<input type="hidden" rsf:id="csrf1" />
+@@ -1275,7 +1291,52 @@
+ 					</div>
+ 				</form>
+ 			</div>
+-
++                        <div id="import-docx-dialog" rsf:id="import-docx-dialog">
++                            <form action="#" rsf:id="import-docx-form" method="post"
++                              enctype="multipart/form-data" class="controlPanel">
++                                <div class="">
++                                    <p>DOCX import</p>
++                                    <label rsf:id="msg=simplepage.import_docx_file" for="docx_file" id="docx-dialog-label">File</label> <br />
++                                    <input type="file" name="docx-file" id="docx-file" style="width:95%" class="edit-multimedia-input" /><br />
++                                    <a href="#" style="display: none" rsf:id="import-docx-link"	id="import-docx-link"></a>
++                                    <label id="import-docx-message">DOCX imported and lesson has been created. </label>
++                                    <a id="import-docx-resource"></a>
++                                </div>
++                                <div id="docx-import-controls">
++                                    <input type="submit" id="import-docx-submit" rsf:id="import-docx-submit" />
++                                    <input type="submit" rsf:id="import-docx-cancel" onclick="closeImportDocxDialog(); return false" />
++                                </div>
++                                <br/>
++                                <div id="importDocxProgressbar"></div>
++                            </form>
++                        </div>
++                    
++			<div id="export-epub-dialog" rsf:id="export-epub-dialog">
++                            <form action="#" rsf:id="export-epub-form" method="post"
++					enctype="multipart/form-data" class="controlPanel">
++                                <div class="">
++                                    <p>EPUB export</p>
++                                    <a href="#" style="display: none" rsf:id="export-epub-link"	id="export-epub-link"></a>
++                                    <label id="export-epub-message">Epub exported and saved to resources as : </label>
++                                    <a id="export-epub-resource"></a>
++                                </div>
++                                <div>
++                                    <input type="submit" id="export-epub-ok" rsf:id="export-epub-ok" onclick="location.reload(); return false" />
++                                </div>
++                                <div id="epubProgressbar"></div>
++                            </form>
++			</div>
++			<div id="export-docx-dialog" rsf:id="export-docx-dialog">
++                            <form action="#" rsf:id="export-docx-form" method="post"
++                                enctype="multipart/form-data" class="controlPanel">
++                                <div class="">
++                                    <p>DocX export</p>
++                                    <a href="#" style="display: none" rsf:id="export-docx-link"	id="export-docx-link"></a>
++                                </div>
++				
++				<div id="docxProgressbar"></div>
++                            </form>
++			</div>
+ 			<div id="edit-title-dialog" rsf:id="edit-title-dialog" class="lessonsDialog">
+ 				<div class="ui-widget" id="edit-title-error-container">
+ 					<div class="message-error">
diff --git a/lessonbuilder/api/pom.xml b/lessonbuilder/api/pom.xml
index a079bf4..95843d4 100644
--- a/lessonbuilder/api/pom.xml
+++ b/lessonbuilder/api/pom.xml
@@ -28,5 +28,23 @@
             <version>2.4</version>
             <scope>provided</scope>
         </dependency>
+        <dependency>
+            <groupId>org.sakaiproject.msgcntr</groupId>
+            <artifactId>messageforums-api</artifactId>
+            <version>11.1</version>
+            <type>jar</type>
+        </dependency>
+        <dependency>
+            <groupId>org.sakaiproject.assignment</groupId>
+            <artifactId>sakai-assignment-api</artifactId>
+            <version>10.1</version>
+            <type>jar</type>
+        </dependency>
+        <dependency>
+            <groupId>org.sakaiproject.samigo</groupId>
+            <artifactId>samigo-api</artifactId>
+            <version>10.1</version>
+            <type>jar</type>
+        </dependency>
     </dependencies>
 </project>
diff --git a/lessonbuilder/api/src/java/org/sakaiproject/lessonbuildertool/ExportPageStructure.java b/lessonbuilder/api/src/java/org/sakaiproject/lessonbuildertool/ExportPageStructure.java
new file mode 100644
index 0000000..60cff8a
--- /dev/null
+++ b/lessonbuilder/api/src/java/org/sakaiproject/lessonbuildertool/ExportPageStructure.java
@@ -0,0 +1,48 @@
+package org.sakaiproject.lessonbuildertool;
+
+/**
+ * This class is used to keep track of the tree structure 
+ * when exporting the lesson content.
+ * 
+ * When the lesson content must be rendered out of line/sequence it must be aware of
+ * whether the page has already been rendered.
+ * @author OpenCollab
+ *
+ */
+public class ExportPageStructure {
+	private long id;
+	private SimplePageItem spi;
+	private long parentId;
+	private boolean hasBeenRendered;
+	
+	public long getId() {
+		return id;
+	}
+	public void setId(long id) {
+		this.id = id;
+	}
+	public SimplePageItem getSpi() {
+		return spi;
+	}
+	public void setSpi(SimplePageItem spi) {
+		this.spi = spi;
+	}
+	public long getParentId() {
+		return parentId;
+	}
+	public void setParentId(long parentId) {
+		this.parentId = parentId;
+	}
+	public boolean isHasBeenRendered() {
+		return hasBeenRendered;
+	}
+	public void setHasBeenRendered(boolean hasBeenRendered) {
+		this.hasBeenRendered = hasBeenRendered;
+	}
+	@Override
+	public String toString() {
+		return "NonSequentialExportStructure [id=" + id + ", spi=" + spi
+				+ ", parentId=" + parentId + ", hasBeenRendered="
+				+ hasBeenRendered + "]";
+	}
+}
diff --git a/lessonbuilder/api/src/java/org/sakaiproject/lessonbuildertool/service/DataExportService.java b/lessonbuilder/api/src/java/org/sakaiproject/lessonbuildertool/service/DataExportService.java
new file mode 100644
index 0000000..f8f8e5e
--- /dev/null
+++ b/lessonbuilder/api/src/java/org/sakaiproject/lessonbuildertool/service/DataExportService.java
@@ -0,0 +1,138 @@
+package org.sakaiproject.lessonbuildertool.service;
+
+import java.util.List;
+import org.sakaiproject.api.app.messageforums.Topic;
+import org.sakaiproject.assignment.api.Assignment;
+import org.sakaiproject.content.api.ContentResource;
+import org.sakaiproject.exception.IdUnusedException;
+import org.sakaiproject.exception.PermissionException;
+import org.sakaiproject.lessonbuildertool.SimplePage;
+import org.sakaiproject.lessonbuildertool.SimplePageItem;
+import org.sakaiproject.site.api.Site;
+import org.sakaiproject.tool.assessment.data.ifc.assessment.PublishedAssessmentIfc;
+
+/**
+ * ExportService will gather and parse data required by the DocxExporter and
+ * EpubExporter classes.
+ *
+ * @author OpenCollab
+ *
+ */
+public interface DataExportService {
+
+    /**
+     * Retrieve the Lesson structure for the Site and return a list of
+     * SimplePage data
+     *
+     * @param siteId
+     * @return
+     */
+    public List<SimplePage> getLessonStructure(String siteId);
+
+    /**
+     *
+     * @param pageId
+     * @return
+     */
+    public SimplePage getLessonData(Long pageId);
+
+    /**
+     * Retrieve a list of SimplePageItems when given a pageId.
+     *
+     * @param pageId
+     * @return
+     */
+    public List<SimplePageItem> getPageItems(long pageId);
+
+    /**
+     * Retrieve the byte Array of a resource when given the resourceId
+     *
+     * @param resourceId
+     * @return
+     */
+    public ContentResource getContentResourceData(String resourceId) throws Exception;
+
+    public Site getSite(String siteId) throws IdUnusedException;
+
+    /**
+     * Export the Assignment object for a specific SinglePageItem
+     *
+     * @param spi
+     * @return Assignment
+     * @throws IdUnusedException
+     * @throws PermissionException
+     */
+    public Assignment getAssignment(SimplePageItem spi) throws IdUnusedException, PermissionException;
+
+    /**
+     * Export the Assignment title for a specific SinglePageItem
+     *
+     * @param spi
+     * @return Assignment
+     * @throws IdUnusedException
+     * @throws PermissionException
+     */
+    public String getAssignmentTitle(SimplePageItem spi) throws IdUnusedException, PermissionException;
+
+    /**
+     * Export the Assignment URL for a specific SinglePageItem
+     *
+     * @param spi
+     * @param site
+     * @return Assignment
+     * @throws IdUnusedException
+     * @throws PermissionException
+     */
+    public String getAssignmentURL(SimplePageItem spi, Site site) throws IdUnusedException, PermissionException;
+
+    /**
+     * Export the Assessment object for a specific SinglePageItem
+     *
+     * @param spi
+     * @return Assignment
+     */
+    public PublishedAssessmentIfc getAssessment(SimplePageItem spi);
+
+    /**
+     * Export the Assessment title for a specific SinglePageItem
+     *
+     * @param spi
+     * @return Assignment
+     */
+    public String getAssessmentTitle(SimplePageItem spi);
+
+    /**
+     * Export the Assessment URL for a specific SinglePageItem
+     *
+     * @param spi
+     * @param site
+     * @return Assignment
+     */
+    public String getAssessmentURL(SimplePageItem spi, Site site);
+
+    /**
+     * Export the ForumTopic object for a specific SinglePageItem
+     *
+     * @param spi
+     * @return Assignment
+     */
+    public Topic getForumTopic(SimplePageItem spi);
+
+    /**
+     * Export the ForumTopic title for a specific SinglePageItem
+     *
+     * @param spi
+     * @return Assignment
+     */
+    public String getForumTopicTitle(SimplePageItem spi);
+
+    /**
+     * Export the ForumTopic URL for a specific SinglePageItem
+     *
+     * @param spi
+     * @param site
+     * @return Assignment
+     */
+    public String getForumTopicURL(SimplePageItem spi, Site site);
+
+}
diff --git a/lessonbuilder/tool/pom.xml b/lessonbuilder/tool/pom.xml
index d6b4d48..c287862 100644
--- a/lessonbuilder/tool/pom.xml
+++ b/lessonbuilder/tool/pom.xml
@@ -206,6 +206,92 @@
              <artifactId>opencsv</artifactId>
              <version>2.3</version>
         </dependency>
+        <!-- OC added docx4j dependency -->
+        <dependency>
+            <groupId>org.docx4j</groupId>
+            <artifactId>docx4j</artifactId>
+            <version>3.2.1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.docx4j</groupId>
+            <artifactId>docx4j-ImportXHTML</artifactId>
+            <version>3.2.2</version>
+        </dependency>
+        <dependency>
+            <groupId>xalan</groupId>
+            <artifactId>xalan</artifactId>
+            <version>2.7.1</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>xalan</groupId>
+            <artifactId>serializer</artifactId>
+            <version>2.7.1</version>
+        </dependency>
+        <dependency>
+            <groupId>net.sourceforge.htmlcleaner</groupId>
+            <artifactId>htmlcleaner</artifactId>
+            <version>2.8</version>
+        </dependency>
+        <dependency>
+            <groupId>coza.opencollab</groupId>
+            <artifactId>epub-creator</artifactId>
+            <version>1.0.1-SNAPSHOT</version>
+        </dependency>
+        <dependency>
+            <groupId>org.jsoup</groupId>
+            <artifactId>jsoup</artifactId>
+            <version>1.7.3</version>
+            <type>jar</type>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.xmlgraphics</groupId>
+            <artifactId>batik-transcoder</artifactId>
+            <version>1.8</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.xmlgraphics</groupId>
+            <artifactId>batik-dom</artifactId>
+            <version>1.8</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.xmlgraphics</groupId>
+            <artifactId>batik-util</artifactId>
+            <version>1.8</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.xmlgraphics</groupId>
+            <artifactId>batik-svg-dom</artifactId>
+            <version>1.8</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.xmlgraphics</groupId>
+            <artifactId>batik-codec</artifactId>
+            <version>1.8</version>
+        </dependency>
+        <dependency>
+            <groupId>commons-validator</groupId>
+            <artifactId>commons-validator</artifactId>
+            <version>1.4.0</version>
+            <type>jar</type>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.xmlgraphics</groupId>
+            <artifactId>fop</artifactId>
+            <version>2.0</version>
+            <type>jar</type>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.xmlgraphics</groupId>
+            <artifactId>xmlgraphics-commons</artifactId>
+            <version>2.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>xml-apis</groupId>
+            <artifactId>xml-apis-ext</artifactId>
+            <version>1.3.04</version>
+        </dependency>
     </dependencies>
 
 
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/docxexport/DocxExport.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/docxexport/DocxExport.java
new file mode 100644
index 0000000..05e8516
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/docxexport/DocxExport.java
@@ -0,0 +1,1034 @@
+package org.sakaiproject.lessonbuildertool.docxexport;
+
+import java.awt.image.BufferedImage;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.PrintStream;
+import java.io.UnsupportedEncodingException;
+import java.math.BigInteger;
+import java.net.URL;
+import java.text.MessageFormat;
+import java.util.Date;
+import java.util.List;
+
+import javax.imageio.ImageIO;
+import javax.servlet.http.Cookie;
+import javax.servlet.http.HttpServletResponse;
+import javax.xml.bind.JAXBElement;
+import javax.xml.bind.JAXBException;
+
+import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.io.FilenameUtils;
+import org.apache.commons.lang.StringUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.docx4j.XmlUtils;
+import org.docx4j.convert.in.xhtml.XHTMLImageHandler;
+import org.docx4j.convert.in.xhtml.XHTMLImporterImpl;
+import org.docx4j.dml.wordprocessingDrawing.Inline;
+import org.docx4j.jaxb.Context;
+import org.docx4j.openpackaging.contenttype.ContentType;
+import org.docx4j.openpackaging.exceptions.Docx4JException;
+import org.docx4j.openpackaging.exceptions.InvalidFormatException;
+import org.docx4j.openpackaging.exceptions.InvalidOperationException;
+import org.docx4j.openpackaging.io.SaveToZipFile;
+import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
+import org.docx4j.openpackaging.parts.PartName;
+import org.docx4j.openpackaging.parts.WordprocessingML.AlternativeFormatInputPart;
+import org.docx4j.openpackaging.parts.WordprocessingML.BinaryPartAbstractImage;
+import org.docx4j.openpackaging.parts.WordprocessingML.StyleDefinitionsPart;
+import org.docx4j.openpackaging.parts.relationships.Namespaces;
+import org.docx4j.relationships.Relationship;
+import org.docx4j.wml.BooleanDefaultTrue;
+import org.docx4j.wml.CTAltChunk;
+import org.docx4j.wml.CTBookmark;
+import org.docx4j.wml.CTMarkupRange;
+import org.docx4j.wml.Color;
+import org.docx4j.wml.HpsMeasure;
+import org.docx4j.wml.ObjectFactory;
+import org.docx4j.wml.P;
+import org.docx4j.wml.P.Hyperlink;
+import org.docx4j.wml.R;
+import org.docx4j.wml.RFonts;
+import org.docx4j.wml.RPr;
+import org.docx4j.wml.Style;
+import org.docx4j.wml.Style.BasedOn;
+import org.docx4j.wml.Styles;
+import org.docx4j.wml.U;
+import org.docx4j.wml.UnderlineEnumeration;
+import org.htmlcleaner.CleanerProperties;
+import org.htmlcleaner.CleanerTransformations;
+import org.htmlcleaner.HtmlCleaner;
+import org.htmlcleaner.TagTransformation;
+import org.sakaiproject.component.cover.ServerConfigurationService;
+import org.sakaiproject.content.api.ContentResource;
+import org.sakaiproject.exception.IdUnusedException;
+import org.sakaiproject.exception.PermissionException;
+import org.sakaiproject.exception.ServerOverloadException;
+import org.sakaiproject.lessonbuildertool.SimplePage;
+import org.sakaiproject.lessonbuildertool.SimplePageItem;
+import org.sakaiproject.lessonbuildertool.service.DataExportService;
+import org.sakaiproject.lessonbuildertool.tool.view.ExportDocxViewParameters;
+import org.sakaiproject.lessonbuildertool.util.ExportImportConstants;
+import org.sakaiproject.lessonbuildertool.util.ExportHelper;
+import org.sakaiproject.lessonbuildertool.util.HtmlCleanerUtil;
+import org.sakaiproject.site.api.Site;
+import org.sakaiproject.tool.api.ToolSession;
+import org.sakaiproject.tool.cover.SessionManager;
+import org.springframework.web.util.UriUtils;
+
+import uk.org.ponder.messageutil.MessageLocator;
+
+/**
+ * Export Lesson Content to docx format
+ *
+ * @author OpenCollab
+ */
+public class DocxExport {
+
+    private final Log log = LogFactory.getLog(DocxExport.class);
+
+    private String abortOnErrorStyledMessage = "<div style=\"font-size;1.1em;border-radius:4px;border: 1px solid #cd0a0a;color:#cd0a0a;padding:4px;\">{0}</div><br/>";
+
+    // Export service initialised, spring injected instance.
+    private DataExportService dataExportService;
+
+    // MessageLocator service required as per the Lessons tool exception
+    private MessageLocator messageLocator;
+
+    // Utility class to clean html text
+    private HtmlCleanerUtil htmlCleaner;
+
+    // XHTMLImageHandler instance for handling images in html to docx conversions
+    private XHTMLImageHandler xHTMLImageHandler;
+
+    private ExportHelper exportHelper;
+
+    /**
+     * performs the
+     *
+     * @param sid
+     * @param httpServletResponse
+     * @param params
+     */
+    public void doExport(String sid, HttpServletResponse httpServletResponse,
+            ExportDocxViewParameters params) {
+        StringBuilder lessonName = new StringBuilder();
+        setHTMLCleanerTransformations();
+        
+        try {
+            Site site = dataExportService.getSite(sid);
+            lessonName.append(site.getTitle());
+            WordprocessingMLPackage wordMLPackage = WordprocessingMLPackage.createPackage();
+            
+            //*************************
+            alterStyleSheet(wordMLPackage);
+            //*************************
+            SimplePage simplePage = dataExportService.getLessonData(params.getPageId());
+
+            if (null != simplePage) {
+                lessonName.append(simplePage.getTitle());
+                wordMLPackage.getMainDocumentPart().addStyledParagraphOfText("Title", simplePage.getTitle());
+
+                List<SimplePageItem> spItemList = dataExportService.getPageItems(simplePage.getPageId());
+                processPageItems(wordMLPackage, spItemList, params, site, 0);
+            }
+
+            String fileName = lessonName.toString() + "_" + String.valueOf(new Date().getTime()) + ".docx";
+            fileName = fileName.replace(" ", "_");
+            SaveToZipFile saver = new SaveToZipFile(wordMLPackage);
+            download(httpServletResponse, fileName, saver);
+        } catch (NumberFormatException nfEx) {
+            handleError(null, "Error exporting the lesson to DOCX format. Could not parse page id.", "simplepage.docx.error.exporting", nfEx);
+        } catch (Docx4JException docxEx) {
+            handleError(null, "Error exporting the lesson to DOCX format. Could not process page items.", "simplepage.docx.error.exporting", docxEx);
+        } catch (IdUnusedException idEx) {
+            handleError(null, "Error exporting the lesson to DOCX format. Could not find site ofr id : " + sid, "simplepage.docx.error.exporting", idEx);
+        }
+    }
+    
+    /**
+     * Add transformations to the HTML cleaner to convert the CKEditor header 
+     * tags (h1,h2,h3,h4) to span tags with in line styling. We need to do this 
+     * to preserve the style without using the Header word styles. The Header word
+     * styles is used to create sub pages when importing.
+     */
+    private void setHTMLCleanerTransformations() {
+        HtmlCleaner htmlSetup = htmlCleaner.getHtmlSetup();
+        CleanerProperties props = htmlSetup.getProperties();
+        CleanerTransformations transformations = new CleanerTransformations();
+        int counter = 1;
+        for (String headerStyle : ExportImportConstants.CK_HEADER_LIST) {
+            TagTransformation h1TT = new TagTransformation("h" + counter++, "span", false);
+            h1TT.addAttributeTransformation("style", headerStyle);
+            transformations.addTransformation(h1TT);       
+        }
+        
+        props.setCleanerTransformations(transformations);
+    }
+
+    /**
+     * Deliver the file to the user.
+     *
+     * @param fileName
+     * @param filePath
+     * @return
+     */
+    private void download(HttpServletResponse response, String fileName, SaveToZipFile saver) {
+        OutputStream out = null;
+        try {
+            if (ExportImportConstants.ABORT_ON_ERROR && hasErrors()) {
+                out = response.getOutputStream();
+                response.setContentType("text/html; charset=".concat(ExportImportConstants.CHARSET));
+                PrintStream printStream = new PrintStream(out);
+                printStream.print(MessageFormat.format(abortOnErrorStyledMessage, "File aborted as a result of errors"));
+                printStream.print("<script type=\"text/javascript\">setTimeout(parent.window.location.reload(true),10000);</script>");
+                printStream.close();
+                out.flush();
+            } else {
+                response.setHeader("Content-disposition", "inline; filename="
+                        + fileName);
+                // Add cookie so that we can check for that cookie and close the 
+                // UI dialog
+                Cookie cookie = new Cookie("fileDownloadToken", "closeDocXDialog");
+                cookie.setPath("/");
+                response.addCookie(cookie);
+                response.setContentType("application/vnd.openxmlformats-officedocument.wordprocessingml.document");
+                out = response.getOutputStream();
+                saver.save(out);
+                out.flush();
+            }
+        } catch (IOException ioe) {
+            setErrKey("simplepage.docx.error.exporting", ioe.getMessage(), false);
+        } catch (Docx4JException docxEx) {
+            setErrKey("simplepage.docx.error.exporting", docxEx.getMessage(), false);
+        } finally {
+            if (out != null) {
+                try {
+                    out.close();
+                } catch (IOException ex) {
+                    log.error("Could not close output stream in DocX file download.", ex);
+                }
+            }
+        }
+    }
+
+    /**
+     * Process the page items for a SimplePage. It routes items to the methods
+     * which can process this item and return a WordprocessingMLPackage object
+     * with content
+     *
+     * @param wordMLPackage
+     * @param spItemList
+     * @return
+     * @throws Docx4JException
+     */
+    private void processPageItems(WordprocessingMLPackage wordMLPackage, List<SimplePageItem> spItemList, ExportDocxViewParameters params, Site site, int currentDepth) throws Docx4JException {
+
+        for (SimplePageItem spi : spItemList) {
+            log.debug(spi.getType() + " - " + spi.getSakaiId() + " - " + spi.getName());
+            switch (spi.getType()) {
+                case SimplePageItem.PAGE:
+                    SimplePage simplePage = dataExportService.getLessonData(Long.parseLong(spi.getSakaiId()));
+                    int indent = getIndentationLevel(simplePage, currentDepth);
+                    wordMLPackage.getMainDocumentPart().addStyledParagraphOfText("Heading" + indent, spi.getName());                    
+                    List<SimplePageItem> simplePageItemList = dataExportService.getPageItems(simplePage.getPageId());
+                    processPageItems(wordMLPackage, simplePageItemList, params, site, indent);
+                    break;
+                case SimplePageItem.ASSIGNMENT:
+                    log.debug("ASSIGNMENT :" + spi.getSakaiId() + " - " + spi.getName());
+                    addAssignment(wordMLPackage, spi, site);
+                    break;
+                case SimplePageItem.ASSESSMENT:
+                    log.debug("ASSESSMENT :" + spi.getSakaiId() + " - " + spi.getName());
+                    addAssessment(wordMLPackage, spi, site);
+                    break;
+                case SimplePageItem.TEXT:
+                    log.debug("TEXT :" + spi.getSakaiId() + " - " + spi.getName());
+                    processText(wordMLPackage, spi);
+                    break;
+                case SimplePageItem.URL:
+                    log.debug("URL :" + spi.getSakaiId() + " - " + spi.getName());
+                    wordMLPackage.getMainDocumentPart().addParagraphOfText(spi.getName());
+                    break;
+                case SimplePageItem.RESOURCE:
+                    log.debug("RESOURCE :" + spi.getSakaiId() + " - " + spi.getName());
+                    addLink(wordMLPackage, spi, params);
+                    break;
+                case SimplePageItem.MULTIMEDIA:
+                    log.debug("MULTIMEDIA :" + spi.getSakaiId() + " - " + spi.getName());
+                    processMultiMedia(wordMLPackage, spi, params);
+                    break;
+                case SimplePageItem.FORUM:
+                    log.debug("FORUM :" + spi.getSakaiId() + " - " + spi.getName());
+                    addForumTopic(wordMLPackage, spi, site);
+                    break;
+                case SimplePageItem.COMMENTS:
+                    log.debug("COMMENTS :" + spi.getSakaiId() + " - " + spi.getName());
+                    wordMLPackage.getMainDocumentPart().addParagraphOfText(spi.getName());
+                    break;
+                case SimplePageItem.STUDENT_CONTENT:
+                    log.debug("STUDENT_CONTENT :" + spi.getSakaiId() + " - " + spi.getName());
+                    wordMLPackage.getMainDocumentPart().addParagraphOfText(spi.getName());
+                    break;
+                case SimplePageItem.QUESTION:
+                    log.debug("QUESTION :" + spi.getSakaiId() + " - " + spi.getName());
+                    addQuestion(wordMLPackage, spi);
+                    break;
+                case SimplePageItem.BLTI:
+                    log.debug("BLTI :" + spi.getSakaiId() + " - " + spi.getName());
+                    wordMLPackage.getMainDocumentPart().addParagraphOfText(spi.getName());
+                    break;
+                case SimplePageItem.PEEREVAL:
+                    log.debug("PEEREVAL :" + spi.getSakaiId() + " - " + spi.getName());
+                    wordMLPackage.getMainDocumentPart().addParagraphOfText(spi.getName());
+                    break;
+            }
+        }
+    }
+
+    /**
+     * Processes any SimplePageItem of type Text
+     *
+     * @param wordMLPackage
+     * @param spi
+     * @return
+     * @throws Docx4JException
+     */
+    private void processText(WordprocessingMLPackage wordMLPackage, SimplePageItem spi) {
+        XHTMLImporterImpl imp = new XHTMLImporterImpl(wordMLPackage);
+        imp.setXHTMLImageHandler(xHTMLImageHandler);
+        String cleanHTML = "<body>" + htmlCleaner.cleanHTMLString(spi.getHtml()) + "</body>";
+        try {
+            List<Object> convertedList = imp.convert(cleanHTML, "");
+            for (Object part : convertedList) {
+                wordMLPackage.getMainDocumentPart().addObject(part);
+            }
+        } catch (Docx4JException ex) {
+            handleError(wordMLPackage, "Error importing textual content HTML into Docx.", "simplepage.docx.error.processing.text", ex);
+        }
+    }
+
+    /**
+     * Create an HTML file in the docx zip structure and add a reference to that
+     *
+     * @param wordMLPackage
+     * @param spi
+     * @param htmlText
+     */
+    private void addHtmlToDoc(WordprocessingMLPackage wordMLPackage, SimplePageItem spi, String htmlText) {
+        try {
+            AlternativeFormatInputPart afiPart = new AlternativeFormatInputPart(new PartName("/textContent_" + spi.getId() + ".html"));
+            afiPart.setBinaryData(("<body>" + htmlText + "</body>").getBytes());
+            afiPart.setContentType(new ContentType("text/html"));
+
+            Relationship altChunkRel = wordMLPackage.getMainDocumentPart().addTargetPart(afiPart);
+            CTAltChunk ac = Context.getWmlObjectFactory().createCTAltChunk();
+            ac.setId(altChunkRel.getId());
+
+            wordMLPackage.getMainDocumentPart().getContent().add(ac);
+        } catch (InvalidFormatException ex) {
+            wordMLPackage.getMainDocumentPart().addParagraphOfText("ERROR in docx Exporter! This text contains content that can not be handled by the exporter!");
+            log.error(ex);
+        }
+    }
+
+    /**
+     * Add the link of the assignment to the doc
+     *
+     * @param wordMLPackage
+     * @param spi
+     * @param site
+     */
+    private void addAssignment(WordprocessingMLPackage wordMLPackage, SimplePageItem spi, Site site) {
+        try {
+            addLink(wordMLPackage, dataExportService.getAssignmentURL(spi, site),
+                    dataExportService.getAssignmentTitle(spi));
+        } catch (IdUnusedException e) {
+            handleError(wordMLPackage, "ERROR in docx Exporter! This Assignment id could not be located by the exporter! ID : " + spi.getSakaiId(), "simplepage.docx.error.creating.assignment", e);
+        } catch (PermissionException e) {
+            handleError(wordMLPackage, "ERROR in docx Exporter! The exporter does not have permission to access this Assignment! ID : " + spi.getSakaiId(), "simplepage.docx.error.creating.assignment", e);
+        }
+    }
+
+    /**
+     * Add the link of the Assessment to the doc
+     *
+     * @param wordMLPackage
+     * @param spi
+     * @param site
+     */
+    private void addAssessment(WordprocessingMLPackage wordMLPackage, SimplePageItem spi, Site site) {
+        addLink(wordMLPackage, dataExportService.getAssessmentURL(spi, site),
+                dataExportService.getAssessmentTitle(spi));
+    }
+
+    /**
+     * Add the link of the Forum topic to the doc
+     *
+     * @param wordMLPackage
+     * @param spi
+     * @param site
+     */
+    private void addForumTopic(WordprocessingMLPackage wordMLPackage, SimplePageItem spi, Site site) {
+        addLink(wordMLPackage, dataExportService.getForumTopicURL(spi, site),
+                dataExportService.getForumTopicTitle(spi));
+    }
+
+    /**
+     * Add an external link
+     *
+     * @param wordMLPackage
+     * @param spi
+     * @return
+     */
+    private void addExternalWebLink(WordprocessingMLPackage wordMLPackage, SimplePageItem spi) {
+        String linkUrl = spi.getName();
+        addLink(wordMLPackage, linkUrl, linkUrl);
+    }
+
+    /**
+     * Add a Question
+     *
+     * @param wordMLPackage
+     * @param spi
+     * @return
+     */
+    private void addQuestion(WordprocessingMLPackage wordMLPackage, SimplePageItem spi) {
+        wordMLPackage.getMainDocumentPart().addStyledParagraphOfText("Heading3", spi.getName());
+        wordMLPackage.getMainDocumentPart().addParagraphOfText("QuestionText : " + spi.getAttribute("questionText"));
+        wordMLPackage.getMainDocumentPart().addParagraphOfText("Answers : " + spi.getJsonAttribute("answers"));
+        wordMLPackage.getMainDocumentPart().addParagraphOfText("QuestionIncorrectText : " + spi.getAttribute("questionIncorrectText"));
+        wordMLPackage.getMainDocumentPart().addParagraphOfText("QuestionCorrectText : " + spi.getAttribute("questionCorrectText"));
+    }
+
+    /**
+     * Processes any SimplePageItem of type Multimedia
+     *
+     * @param wordMLPackage
+     * @param spi
+     * @return
+     */
+    private void processMultiMedia(WordprocessingMLPackage wordMLPackage, SimplePageItem spi, ExportDocxViewParameters params) {
+        String multimediaDisplayType = spi.getAttribute("multimediaDisplayType");
+        // 	multimediaDisplayType : 1 -- embed code, 2 -- av type, 3 -- oembed, 4 -- iframe
+        if ("3".equals(multimediaDisplayType)) {
+            String url = spi.getAttribute("multimediaUrl");
+            addLink(wordMLPackage, url, url);
+        } else if ("2".equals(multimediaDisplayType)) {
+            handleAVType(wordMLPackage, spi);
+        } else if ("1".equals(multimediaDisplayType)) {
+            String html = htmlCleaner.convertIframeToLink(spi.getAttribute("multimediaEmbedCode"));
+            addHtmlToDoc(wordMLPackage, spi, html);
+        } else {
+            handleOtherMultimediaDisplayTypes(wordMLPackage, spi, params);
+        }
+    }
+
+    /**
+     * Handle AV types that was embedded by URL
+     *
+     * @param wordMLPackage
+     * @param spi
+     * @throws Exception
+     */
+    private void handleAVType(WordprocessingMLPackage wordMLPackage, SimplePageItem spi) {
+        String url = spi.getName();
+        try {
+            String ext = FilenameUtils.getExtension(url);
+            if (ExportImportConstants.IMAGE_EXTENSIONS.contains(ext)) {
+                BufferedImage image = ImageIO.read(new URL(url));
+                // write image to outputstream
+                ByteArrayOutputStream baos = new ByteArrayOutputStream();
+                ImageIO.write(image, ext, baos);
+                baos.flush();
+                // get bytes
+                byte[] imageBytes = baos.toByteArray();
+                addImage(wordMLPackage, spi, imageBytes);
+                baos.close();
+                return;
+            }
+        } catch (Exception ex) {
+            handleError(wordMLPackage, "Error downloading image : " + url, "simplepage.docx.error.creating.assignment", ex);
+        }
+        addLink(wordMLPackage, url, url);
+    }
+
+    /**
+     * Handles the text and image types of multimedia
+     *
+     * @param wordMLPackage
+     * @param spi
+     * @param params
+     */
+    private void handleOtherMultimediaDisplayTypes(WordprocessingMLPackage wordMLPackage, SimplePageItem spi, ExportDocxViewParameters params) {
+        try {
+            ContentResource cr = dataExportService.getContentResourceData(spi.getSakaiId());
+            if ("text/url".equals(cr.getContentType())) {
+                addExternalWebLink(wordMLPackage, spi);
+                // Embed Images
+            } else if (ExportImportConstants.EMBED_RESOURCES && cr.getContentType().contains("image/")) {
+                addImage(wordMLPackage, spi, cr.getContent());
+                // Add link if not handled already    
+            } else {
+                addLink(wordMLPackage, spi, params);
+            }
+        } catch (Exception ex) {
+            handleError(wordMLPackage, "Error adding embedded resource to Docx file.", "simplepage.docx.error.creating.new.image", ex);
+        }
+    }
+
+    /**
+     * Embeds an image in the doc
+     *
+     * @param wordMLPackage
+     * @param spi
+     * @param content
+     * @throws ServerOverloadException
+     */
+    private void addImage(WordprocessingMLPackage wordMLPackage, SimplePageItem spi, byte[] content) throws ServerOverloadException {
+        org.docx4j.wml.P p = newImage(
+                wordMLPackage,
+                content,
+                spi.getDescription(), spi.getDescription(), 0, 1, 6000
+        );
+        wordMLPackage.getMainDocumentPart().addObject(p);
+    }
+
+    /**
+     * Processes any SimplePageItem of type link
+     *
+     * @param wordMLPackage
+     * @param spi
+     * @return
+     */
+    private void addLink(WordprocessingMLPackage wordMLPackage, SimplePageItem spi, ExportDocxViewParameters params) {
+        String linkUrl = params.getUrl() + "/access/content" + spi.getSakaiId();
+        try {
+            linkUrl = params.getUrl() + "/access/content" + UriUtils.encodeQuery(spi.getSakaiId(), ExportImportConstants.CHARSET);
+        } catch (UnsupportedEncodingException e) {
+            handleError(wordMLPackage, "Error adding an external link to the Docx file.", "simplepage.docx.error.url", e);
+        }
+        addLink(wordMLPackage, linkUrl, spi.getName());
+    }
+
+    /**
+     * Adds a link with a specific url and label
+     *
+     * @param wordMLPackage
+     * @param url
+     * @param label
+     */
+    private void addLink(WordprocessingMLPackage wordMLPackage, String url, String label) {
+        Hyperlink link = createHyperlink(wordMLPackage, url, label);
+
+        org.docx4j.wml.ObjectFactory wmlFactory = new org.docx4j.wml.ObjectFactory();
+        org.docx4j.wml.P paragraph = wmlFactory.createP();
+
+        paragraph.getParagraphContent().add(link);
+        wordMLPackage.getMainDocumentPart().addObject(paragraph);
+    }
+
+    /**
+     * Create an docx4j image object from an byte array
+     *
+     * @param wordMLPackage
+     * @param bytes
+     * @param filenameHint
+     * @param altText
+     * @param id1
+     * @param id2
+     * @param cx
+     * @return
+     */
+    private org.docx4j.wml.P newImage(
+            WordprocessingMLPackage wordMLPackage, byte[] bytes,
+            String filenameHint, String altText, int id1, int id2, long cx) {
+        try {
+            BinaryPartAbstractImage imagePart = BinaryPartAbstractImage
+                    .createImagePart(wordMLPackage, bytes);
+
+            Inline inline = imagePart.createImageInline(filenameHint, altText,
+                    id1, id2, cx, false);
+
+            // Now add the inline in w:p/w:r/w:drawing
+            org.docx4j.wml.ObjectFactory factory = new org.docx4j.wml.ObjectFactory();
+            org.docx4j.wml.P p = factory.createP();
+            org.docx4j.wml.R run = factory.createR();
+            p.getContent().add(run);
+            org.docx4j.wml.Drawing drawing = factory.createDrawing();
+            run.getContent().add(drawing);
+            drawing.getAnchorOrInline().add(inline);
+
+            return p;
+        } catch (Exception e) {
+            handleError(wordMLPackage, "Error creating a new image the Docx file.", "simplepage.docx.error.creating.new.image", e);
+        }
+        return null;
+    }
+
+    /**
+     * Creates an external hyperlink with a set url and label
+     *
+     * @param wordMLPackage
+     * @param url
+     * @return
+     */
+    private Hyperlink createHyperlink(WordprocessingMLPackage wordMLPackage,
+            String url, String label) {
+        try {
+            org.docx4j.relationships.ObjectFactory factory
+                    = new org.docx4j.relationships.ObjectFactory();
+
+            org.docx4j.relationships.Relationship rel = factory.createRelationship();
+            rel.setType(Namespaces.HYPERLINK);
+            rel.setTarget(url);
+            rel.setTargetMode("External");
+
+            wordMLPackage.getMainDocumentPart().getRelationshipsPart().addRelationship(rel);
+            String hpl = "<w:hyperlink r:id=\"" + rel.getId() + "\" xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" "
+                    + "xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" >"
+                    + "<w:r>"
+                    + "<w:rPr>"
+                    + "<w:rStyle w:val=\"Hyperlink\" />"
+                    + "</w:rPr>"
+                    + "<w:t>" + label + "</w:t>"
+                    + "</w:r>"
+                    + "</w:hyperlink>";
+
+            return (Hyperlink) XmlUtils.unmarshalString(hpl);
+        } catch (JAXBException e) {
+            handleError(wordMLPackage, "Error creating hyperlink.", "simplepage.docx.error.hyperlink", e);
+            return null;
+        } catch (InvalidOperationException e) {
+            handleError(wordMLPackage, "Error creating hyperlink.", "simplepage.docx.error.hyperlink", e);
+            return null;
+        }
+    }
+
+    /**
+     * Surround the specified r in the specified p
+     *
+     * with a bookmark (with specified name and id)
+     *
+     * @param p
+     * @param r
+     * @param name
+     * @param id
+     */
+    public void bookmarkRun(P p, R r, String name, int id) {
+
+        // Find the index
+        int index = p.getContent().indexOf(r);
+
+        if (index < 0) {
+            return;
+        }
+
+        ObjectFactory factory = Context.getWmlObjectFactory();
+        BigInteger ID = BigInteger.valueOf(id);
+
+        // Add bookmark end first
+        CTMarkupRange mr = factory.createCTMarkupRange();
+        mr.setId(ID);
+        JAXBElement<CTMarkupRange> bmEnd = factory.createBodyBookmarkEnd(mr);
+        p.getContent().add(index + 1, bmEnd);
+
+        // Next, bookmark start
+        CTBookmark bm = factory.createCTBookmark();
+        bm.setId(ID);
+        bm.setName(name);
+        JAXBElement<CTBookmark> bmStart = factory.createBodyBookmarkStart(bm);
+        p.getContent().add(index, bmStart);
+    }
+
+    /**
+     * Sets the error handling message.
+     *
+     * @param key - message key
+     * @param text - exception message
+     * @param showHeaderMessage - show header message if docx file created
+     * anyway
+     */
+    private void setErrKey(String key, String text, boolean showHeaderMessage) {
+        if (ExportImportConstants.ADD_ERROR_TO_SESSION) {
+            if (text == null) {
+                key = messageLocator.getMessage(key);
+            } else {
+                key = messageLocator.getMessage(key) + " : " + text;
+            }
+            exportHelper.setErrMessage(key, showHeaderMessage, "simplepage.docx.error.header");
+        }
+    }
+
+    /**
+     * Wraps the errors in a div and adds styling
+     *
+     * @param content
+     * @param errorMessage
+     */
+    private void styledError(WordprocessingMLPackage wordMLPackage, String errorMessage) {
+        XHTMLImporterImpl imp = new XHTMLImporterImpl(wordMLPackage);
+        imp.setXHTMLImageHandler(xHTMLImageHandler);
+        String cleanHTML = "<body>"
+                + htmlCleaner.cleanHTMLString("<br/><div style='font-size;1.1em;border-radius:4px;border: 1px solid #cd0a0a;color:#cd0a0a;padding:4px;'>" + errorMessage + "</div><br/>") + "</body>";
+        try {
+            List<Object> convertedList = imp.convert(cleanHTML, "");
+            for (Object part : convertedList) {
+                wordMLPackage.getMainDocumentPart().addObject(part);
+            }
+        } catch (Docx4JException ex) {
+            log.error("Error importing Text content HTML into Docx.", ex);
+        }
+    }
+
+    /**
+     * Standard method of handling exceptions within the Epub tool
+     *
+     * @param wordMLPackage - the document which is used to create the epub file
+     * @param errorMessage - the message which will be displayed to the user
+     * @param e - The exception object which will be logged and used for the
+     * session errors
+     */
+    private void handleError(WordprocessingMLPackage wordMLPackage, String errorMessage, String errorKey, Exception e) {
+        log.error(errorMessage, e);
+        setErrKey(errorKey, errorMessage, true);
+        if (null != wordMLPackage) {
+            if (ExportImportConstants.ADD_ERROR_TO_DOC) {
+                styledError(wordMLPackage, errorMessage);
+            }
+        }
+    }
+
+    /**
+     * Checks the toolSession to determine whether there are errors
+     *
+     * @return
+     */
+    private Boolean hasErrors() {
+        ToolSession toolSession = SessionManager.getCurrentToolSession();
+        if (toolSession == null) {
+            return false;
+        }
+        List<String> errors = (List<String>) toolSession.getAttribute("lessonbuilder.errors");
+        return !CollectionUtils.isEmpty(errors);
+    }
+
+    /**
+     * Setter to inject DataExportService
+     *
+     * @param dataExportService
+     */
+    public void setDataExportService(DataExportService dataExportService) {
+        this.dataExportService = dataExportService;
+    }
+
+    /**
+     * Setter to inject MessageLocator
+     *
+     * @param messageLocator
+     */
+    public void setMessageLocator(MessageLocator messageLocator) {
+        this.messageLocator = messageLocator;
+    }
+
+    /**
+     * @param xHTMLImageHandler the xHTMLImageHandler to set
+     */
+    public void setxHTMLImageHandler(XHTMLImageHandler xHTMLImageHandler) {
+        this.xHTMLImageHandler = xHTMLImageHandler;
+    }
+
+    /**
+     * @param htmlCleaner the htmlCleaner to set
+     */
+    public void setHtmlCleaner(HtmlCleanerUtil htmlCleaner) {
+        this.htmlCleaner = htmlCleaner;
+    }
+
+    /**
+     * Setter to inject the styled string
+     *
+     * @param abortOnErrorStyledMessage
+     */
+    public void setAbortOnErrorStyledMessage(String abortOnErrorStyledMessage) {
+        this.abortOnErrorStyledMessage = abortOnErrorStyledMessage;
+    }
+
+    /**
+     * @param exportHelper the exportHelper to set
+     */
+    public void setExportHelper(ExportHelper exportHelper) {
+        this.exportHelper = exportHelper;
+    }
+
+    //****************************************
+    /**
+     * This method alters the default style sheet that is part of each document.
+     *
+     * To do this, we first retrieve the style sheet from the package and then
+     * get the Styles object from it. From this object, we get the list of
+     * actual styles and iterate over them. We check against all styles we want
+     * to alter and apply the alterations if applicable.
+     *
+     * @param wordMLPackage
+     */
+    public void alterStyleSheet(WordprocessingMLPackage wordMLPackage) {
+        StyleDefinitionsPart styleDefinitionsPart
+                = wordMLPackage.getMainDocumentPart().getStyleDefinitionsPart();
+        Styles styles = styleDefinitionsPart.getJaxbElement();
+
+        List<Style> stylesList = styles.getStyle();
+        for (String styleName : ExportImportConstants.STYLE_LIST) {
+            Style style = getStyleFromList(stylesList, styleName);
+            if (style != null) {
+                setStyle(style);
+            } else {
+                style = createNewStyle(styleName);                
+                setStyle(style);  
+                stylesList.add(style);
+            }
+        }
+    }
+    
+    /**
+     * Get a style from the Style list with a specific name or return null if
+     * not present
+     * 
+     * @param stylesList
+     * @param styleName
+     * @return the Style if present or null
+     */
+    private Style getStyleFromList(List<Style> stylesList, String styleName) {
+        for (Style style : stylesList) {
+            if (style.getStyleId().equals(styleName)) {
+                return style;
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Create a new Style object and initialize it
+     * 
+     * @param styleName
+     * @return new Style object
+     */
+    private Style createNewStyle(String styleName) {
+        Style newStyle = Context.getWmlObjectFactory().createStyle();
+        newStyle.setType("paragraph");
+        newStyle.setStyleId("myNewStyle");
+
+        org.docx4j.wml.Style.Name n = Context.getWmlObjectFactory().createStyleName();
+        n.setVal(styleName);
+        newStyle.setStyleId(styleName);         
+        
+        BasedOn based = Context.getWmlObjectFactory().createStyleBasedOn();
+        based.setVal("Normal");      
+        newStyle.setBasedOn(based);  
+        newStyle.setRPr(new RPr());
+        
+        return newStyle;
+    }
+
+    /**
+     * For this style, we get the existing run properties from the style and
+     * remove the theme font information from them. Then we also remove the bold
+     * styling, change the font size (half-points) and add an underline.
+     */
+    private void setStyle(Style style) {
+        String font = ServerConfigurationService.getString("lessonbuilder.docx.style."+style.getStyleId()+".font", "");
+        int size = Integer.valueOf(ServerConfigurationService.getString("lessonbuilder.docx.style."+style.getStyleId()+".size", "0"));
+        String colour = ServerConfigurationService.getString("lessonbuilder.docx.style."+style.getStyleId()+".color", "");
+        boolean underline = Boolean.valueOf(ServerConfigurationService.getString("lessonbuilder.docx.style."+style.getStyleId()+".underline", "null"));
+        boolean bold = Boolean.valueOf(ServerConfigurationService.getString("lessonbuilder.docx.style."+style.getStyleId()+".bold", "null"));
+        boolean italic = Boolean.valueOf(ServerConfigurationService.getString("lessonbuilder.docx.style."+style.getStyleId()+".italics", "null"));
+        
+        RPr rpr = getRunPropertiesAndRemoveThemeInfo(style);
+        if (StringUtils.isNotEmpty(font)) {
+            changeFont(rpr, font);
+        }
+        if (size> 0 ) {
+            changeFontSize(rpr, size);
+        }
+        if (StringUtils.isNotEmpty(colour)) {
+            changeTextColor(rpr, colour);
+        }
+        if (bold) {
+            addBoldStyle(rpr);
+        } else {
+            removeBoldStyle(rpr);
+        }
+        if (underline) {
+            addUnderline(rpr);
+        } else {
+            removeUnderline(rpr);
+        }
+        if(italic){
+            addItalicStyle(rpr);
+        }else{
+            removeItalicStyle(rpr);
+        }
+    }
+
+    private RPr getRunPropertiesAndRemoveThemeInfo(Style style) {
+        // We only want to change some settings, so we get the existing run
+        // properties from the style.
+        RPr rpr = style.getRPr();
+        removeThemeFontInformation(rpr);
+        return rpr;
+    }
+
+    /**
+     * Change the font of the given run properties to Arial.
+     *
+     * A run font specifies the fonts which shall be used to display the
+     * contents of the run. Of the four possible types of content, we change the
+     * styling of two of them: ASCII and High ANSI. Finally we add the run font
+     * to the run properties.
+     *
+     * @param runProperties
+     */
+    private void changeFont(RPr runProperties, String font) {
+        RFonts runFont = new RFonts();
+        runFont.setAscii(font);
+        runFont.setHAnsi(font);
+        runProperties.setRFonts(runFont);
+    }
+
+    /**
+     * Change the font size of the given run properties to the given value.
+     *
+     * @param runProperties
+     * @param fontSize Twice the size needed, as it is specified as half-point
+     * value
+     */
+    private void changeFontSize(RPr runProperties, int fontSize) {
+        HpsMeasure size = new HpsMeasure();
+        size.setVal(BigInteger.valueOf(fontSize * 2));
+        runProperties.setSz(size);
+    }
+
+    /**
+     * Change the font size of the given run properties to the given value.
+     *
+     * @param runProperties
+     * @param fontSize Twice the size needed, as it is specified as half-point
+     * value
+     */
+    private void changeTextColor(RPr runProperties, String colour) {
+        Color c = new Color();
+        c.setVal(colour);
+        runProperties.setColor(c);
+    }
+
+    /**
+     * Removes the theme font information from the run properties. If this is
+     * not removed then the styles based on the normal style won't inherit the
+     * font from the normal style.
+     *
+     * @param runProperties
+     */
+    private void removeThemeFontInformation(RPr runProperties) {
+        if (runProperties.getRFonts() != null) {
+            runProperties.getRFonts().setAsciiTheme(null);
+            runProperties.getRFonts().setHAnsiTheme(null);
+        }
+    }
+
+    /**
+     * Removes the Bold styling from the run properties.
+     *
+     * @param runProperties
+     */
+    private void removeBoldStyle(RPr runProperties) {
+        if(runProperties.getB() != null){
+            try{
+                runProperties.getB().setVal(false);
+            }catch(Exception e){
+                log.error("Unable to UnBold", e);
+            }
+        }
+    }
+
+    /**
+     * Adds the Bold styling from the run properties.
+     *
+     * @param runProperties
+     */
+    private void addBoldStyle(RPr runProperties) {
+        try{
+            runProperties.setB(new BooleanDefaultTrue());
+            runProperties.getB().setVal(true);
+        }catch(Exception e){            
+            log.error("Unable to Bold", e);
+        }
+    }
+
+        /**
+     * Removes the Bold styling from the run properties.
+     *
+     * @param runProperties
+     */
+    private void removeItalicStyle(RPr runProperties) {
+        if(runProperties.getI()!= null){
+            try{
+                runProperties.getI().setVal(false);
+            }catch(Exception e){
+                log.error("Unable to UnItalic", e);
+            }
+        }
+    }
+
+    /**
+     * Adds the Bold styling from the run properties.
+     *
+     * @param runProperties
+     */
+    private void addItalicStyle(RPr runProperties) {
+        try{
+            runProperties.setI(new BooleanDefaultTrue() );
+        }catch(Exception e){
+            log.error("Unable to Italisize", e);
+        }
+    }
+    
+    
+    /**
+     * Adds a single underline to the run properties.
+     *
+     * @param runProperties
+     */
+    private void addUnderline(RPr runProperties) {
+        U underline = new U();
+        underline.setVal(UnderlineEnumeration.SINGLE);
+        runProperties.setU(underline);
+    }
+
+    /**
+     * Removes a single underline to the run properties.
+     *
+     * @param runProperties
+     */
+    private void removeUnderline(RPr runProperties) {
+        U underline = new U();
+        underline.setVal(UnderlineEnumeration.NONE);
+        runProperties.setU(underline);
+    }
+
+    //****************************************
+    /**
+     * determine the level of indentation for the TOC
+     *
+     * @param simplePage
+     * @param level
+     * @return
+     */
+    private int getIndentationLevel(SimplePage simplePage, int level) {
+        if (simplePage != null && simplePage.getParent() != null) {
+            level = getIndentationLevel(dataExportService.getLessonData(simplePage.getParent()), level + 1);
+        }
+        return level;
+    }
+}
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/docximport/DocxImport.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/docximport/DocxImport.java
new file mode 100644
index 0000000..ca28f87
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/docximport/DocxImport.java
@@ -0,0 +1,469 @@
+package org.sakaiproject.lessonbuildertool.docximport;
+
+import java.io.*;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.text.MessageFormat;
+
+import org.apache.batik.transcoder.TranscoderInput;
+import org.apache.batik.transcoder.TranscoderOutput;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import javax.servlet.http.HttpServletResponse;
+import org.apache.batik.transcoder.TranscoderException;
+import org.apache.batik.transcoder.image.PNGTranscoder;
+import org.apache.batik.transcoder.wmf.tosvg.WMFTranscoder;
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.io.FilenameUtils;
+import org.apache.commons.lang.StringUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.docx4j.convert.out.HTMLSettings;
+import org.docx4j.openpackaging.exceptions.Docx4JException;
+import org.jsoup.nodes.Element;
+import org.jsoup.Jsoup;
+import org.jsoup.nodes.Document;
+import org.jsoup.select.Elements;
+import org.sakaiproject.content.api.ContentCollection;
+import org.sakaiproject.content.api.ContentCollectionEdit;
+import org.sakaiproject.content.api.ContentHostingService;
+import org.sakaiproject.content.api.ContentResource;
+import org.sakaiproject.content.api.ContentResourceEdit;
+import org.sakaiproject.entity.api.ResourceProperties;
+import org.sakaiproject.exception.IdUnusedException;
+import org.sakaiproject.lessonbuildertool.SimplePage;
+import org.sakaiproject.lessonbuildertool.SimplePageItem;
+import org.sakaiproject.lessonbuildertool.model.SimplePageToolDao;
+import org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean;
+import static org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.MAXIMUM_ATTEMPTS_FOR_UNIQUENESS;
+import org.sakaiproject.lessonbuildertool.tool.view.ImportDocxViewParameters;
+import org.sakaiproject.lessonbuildertool.util.ImportHelper;
+import org.sakaiproject.lessonbuildertool.util.ImportTreeItem;
+import org.sakaiproject.tool.api.ToolSession;
+import org.sakaiproject.tool.cover.SessionManager;
+import org.sakaiproject.tool.cover.ToolManager;
+import org.sakaiproject.util.Validator;
+import uk.org.ponder.messageutil.MessageLocator;
+
+/**
+ * Creates a lesson with its content when given a DOCX file
+ *
+ * @author OpenCollab
+ */
+public class DocxImport {
+
+    private final Log log = LogFactory.getLog(DocxImport.class);
+    private final List<SimplePage> pages = new ArrayList<SimplePage>();
+    private MessageLocator messageLocator;
+//    private final String headingCss = ".sub-page-heading{font-size:large; font-weight: bold;}";
+    private final String errorMessage = "<div style=\"font-size;1.1em;border-radius:4px;border: 1px solid #cd0a0a;color:#cd0a0a;padding:4px;\">{0}<br/>{1}</div><br/>";
+
+    /**
+     * ContentHostingService set by Spring configuration used for Resources work
+     */
+    private ContentHostingService contentHostingService;
+
+    /**
+     * performs the import of the document for conversion into a new lesson
+     * create Resource Collection create CSS for document
+     *
+     * @param importFile
+     * @param httpServletResponse
+     * @param params
+     * @param spb
+     * @param simplePageToolDao
+     * @throws org.docx4j.openpackaging.exceptions.Docx4JException
+     * @throws java.io.FileNotFoundException
+     */
+    public void doImport(File importFile, HttpServletResponse httpServletResponse,
+            ImportDocxViewParameters params, SimplePageBean spb, SimplePageToolDao simplePageToolDao) throws Docx4JException, FileNotFoundException {
+        String siteId = ToolManager.getCurrentPlacement().getContext();
+        ImportHelper ih = new ImportHelper();
+        File html = ih.docxToHtml(siteId, importFile);
+        String fullFilePath = html.getPath();
+        try {
+            String collectionId = createResourceCollection(siteId, params.getOriginalFileName());
+            Document doc = Jsoup.parse(new File(fullFilePath), "UTF-8", "");
+            String cssId = createCssResource(siteId, params, doc);
+            Map<Long, ImportTreeItem> structure = ih.buildStructure(doc, params);
+            parseStructure(structure, params, spb, ih, simplePageToolDao, siteId, importFile, collectionId, cssId);
+        } catch (Exception ex) {
+            handleError("Error importing the lesson from DOCX format. Could not Import the document.", "simplepage.docx.error.importing", ex);
+        } finally {
+            try {
+                File f = new File(fullFilePath);
+                f.delete();
+                f = new File(fullFilePath.replace(".html", "").replace(" ", "") + "_files");
+                FileUtils.deleteDirectory(f);
+            } catch (Exception e) {
+                log.error("Error deleting the tempory files.", e);
+            }
+        }
+    }
+
+    /**
+     * Determines what content types are embedded within the HTML and performs
+     * the required actions.
+     *
+     * @param it
+     * @param siteId
+     * @param importFile
+     */
+    private void getContentType(ImportTreeItem it, File importFile, String collectionId) {
+        ImportHelper ih = new ImportHelper();
+        HTMLSettings hs = ih.getDocxHtmlSettings(importFile.getPath());
+        Document doc = Jsoup.parse(it.getHtmlContent());
+        Elements images = doc.select("img[src]");
+        for (Element img : images) {
+            addImages(img, hs, collectionId, it);
+        }
+        Elements links = doc.select("a[href]");
+        for (Element link : links) {
+            if (!link.attr("href").startsWith("#")) {
+                addLinks(link, collectionId, it);
+            } else {
+                it.setHtmlContent(it.getHtmlContent().replace(link.toString(), ""));
+            }
+        }
+    }
+
+    /**
+     * Create the resource collection for the lesson, all resources other than
+     * the CSS will be stored in this collection
+     *
+     * @param siteId
+     * @param originalFileName
+     * @return
+     * @throws Exception generic exception - we are only interested if it
+     * succeeded
+     */
+    private String createResourceCollection(String siteId, String originalFileName)
+            throws Exception {
+        String collectionId = contentHostingService.getSiteCollection(siteId)
+                + FilenameUtils.getBaseName(originalFileName) + "/";
+        return checkCreateResourceCollection(collectionId, FilenameUtils.getBaseName(originalFileName));
+    }
+
+    /**
+     * Checks and create resource collection if it does not exist
+     *
+     * @param siteId
+     * @param originalFileName
+     * @return
+     * @throws Exception generic exception - we are only interested if it
+     * succeeded
+     */
+    private String checkCreateResourceCollection(String collectionId, String displayName)
+            throws Exception {
+        try {
+            contentHostingService.checkCollection(collectionId);
+            return contentHostingService.getCollection(collectionId).getId();
+        } catch (IdUnusedException ex) {
+            // Resource does not exist, lets create it
+            return createNewResourceCollection(collectionId, displayName);
+        }
+    }
+
+    /**
+     * Creates a new resource folder for the new lesson using the file name
+     *
+     * @param collectionId
+     * @param originalFileName
+     * @return
+     * @throws Exception generic exception - we are only interested if it
+     * succeeded
+     */
+    private String createNewResourceCollection(String collectionId, String displayName)
+            throws Exception {
+        ContentCollectionEdit edit = contentHostingService.addCollection(collectionId);
+        edit.getPropertiesEdit().addProperty(ResourceProperties.PROP_DISPLAY_NAME, displayName);
+        contentHostingService.commitCollection(edit);
+        return contentHostingService.getCollection(collectionId).getId();
+    }
+
+    /**
+     * Create the CSS Resource collection and store the style sheets retrieved
+     * from the imported document.
+     *
+     * @param siteId
+     * @param params
+     * @param doc
+     * @param simplePageToolDao
+     * @return
+     */
+    private String createCssResource(String siteId, ImportDocxViewParameters params, Document doc) throws Exception {
+        Element css = doc.select("style").first();
+        String collectionId = contentHostingService.getSiteCollection(siteId) + "LB-CSS/";
+        checkCreateResourceCollection(collectionId, "LB-CSS");
+
+        ContentResourceEdit cre;
+        try {
+            cre = contentHostingService.addResource(collectionId, FilenameUtils.getBaseName(params.getOriginalFileName()), "css", 5);
+            String cssString = css.html();
+            cre.setContent(cssString.getBytes("UTF-8"));
+            cre.setContentLength(cssString.length());
+            contentHostingService.commitResource(cre);
+            return cre.getId();
+        } catch (Exception ex) {
+            handleError("Error on Page: [" + FilenameUtils.getBaseName(params.getOriginalFileName()) + "]. Error creating the CSS resource for this Lesson.", "simplepage.docx.error.importing", ex);
+        }
+        return null;
+    }
+
+    /**
+     * Add image to the Resource tool and update the html content url.
+     *
+     * @param img
+     * @param hs
+     * @param collectionId
+     * @param it
+     */
+    private void addImages(Element img, HTMLSettings hs, String collectionId, ImportTreeItem it) {
+        Path p = Paths.get(img.attr("src"));
+        String imagePath = hs.getImageDirPath() + "/" + p.getFileName().toString();
+        try {
+            if (FilenameUtils.getExtension(imagePath).contains("wmf")) {
+                //convert wmf to jpg
+                imagePath = convertWMFToPNG(imagePath);
+            }
+            ContentCollection contentCollection = contentHostingService.getCollection(collectionId);
+            ContentResourceEdit cre = contentHostingService.addResource(contentCollection.getId(), FilenameUtils.getBaseName(imagePath), FilenameUtils.getExtension(imagePath), 5);
+            p = Paths.get(imagePath);
+            cre.setContent(Files.readAllBytes(p));
+            cre.setContentLength(Files.size(p));
+            contentHostingService.commitResource(cre);
+            it.setHtmlContent(it.getHtmlContent().replace(img.attr("src"), cre.getUrl()));
+        } catch (Exception ex) {
+            //"Error on Page: ["+it.getParentTitle()+"]. Error adding the image " + p.getFileName().toString() + " to this Lesson."
+            try {
+                ContentCollection contentCollection = contentHostingService.getCollection(collectionId);
+                ContentResource cr = contentHostingService.getResource(contentCollection.getId() + FilenameUtils.getBaseName(imagePath) + "." + FilenameUtils.getExtension(imagePath));
+                it.setHtmlContent(it.getHtmlContent().replace(img.attr("src"), cr.getUrl()));
+            } catch (Exception exc) {
+                handleError("Error on Page: [" + it.getParentTitle() + "]. Error adding the image " + p.getFileName().toString() + " to this Lesson.", "simplepage.docx.error.importing", ex);
+                it.setHtmlContent(it.getHtmlContent().replace(img.toString(), img.toString().concat(MessageFormat.format(errorMessage, messageLocator.getMessage("simplepage.docx.error.importing"), "Error adding the image " + p.getFileName().toString() + " to this Lesson."))));
+            }
+        }
+    }
+
+    /**
+     * Add Hyperlinks to the Lessons resources directory. Any A tag with an HREF
+     * will have the HREF content stored as a resources in the resources tool
+     *
+     * @param link
+     * @param collectionId
+     */
+    private void addLinks(Element link, String collectionId, ImportTreeItem it) {
+        String name = link.attr("href");
+        String base = link.attr("href");
+        String extension = "";
+        int i = link.attr("href").lastIndexOf("/");
+        if (i < 0) {
+            i = 0;
+        }
+        i = link.attr("href").lastIndexOf(".", i);
+        if (i > 0) {
+            extension = link.attr("href").substring(i);
+            base = link.attr("href").substring(0, i);
+        }
+        try {
+            ContentResourceEdit edit;
+            edit = contentHostingService.addResource(collectionId,
+                    Validator.escapeResourceName(base),
+                    Validator.escapeResourceName(extension),
+                    MAXIMUM_ATTEMPTS_FOR_UNIQUENESS);
+            edit.setContentType("text/url");
+            edit.setResourceType("org.sakaiproject.content.types.urlResource");
+            edit.setContent(link.attr("href").getBytes("UTF-8"));
+            edit.getPropertiesEdit().addProperty(ResourceProperties.PROP_DISPLAY_NAME,
+                    Validator.escapeResourceName(link.attr("href")));
+            contentHostingService.commitResource(edit);
+        } catch (Exception ex) {
+            handleError("Error adding the Hyperlink " + name + " to this Lesson.", "simplepage.docx.error.importing", ex);
+            it.setHtmlContent(it.getHtmlContent().replace(link.toString(), link.toString().concat(MessageFormat.format(errorMessage, messageLocator.getMessage("simplepage.docx.error.importing"), "Error adding the image " + name + " to this Lesson's resources."))));
+        }
+    }
+
+    /**
+     * Parses over the streamlined structure and add content to the lesson
+     *
+     * @param structure
+     * @param params
+     * @param spb
+     * @param ih
+     * @param simplePageToolDao
+     * @param siteId
+     * @param importFile
+     */
+    private void parseStructure(Map<Long, ImportTreeItem> structure, ImportDocxViewParameters params,
+            SimplePageBean spb, ImportHelper ih, SimplePageToolDao simplePageToolDao,
+            String siteId, File importFile, String collectionId, String cssId) {
+        SimplePage page;
+        SimplePage rootPage = null;
+        HashMap<Long, Long> id_map = new HashMap<Long, Long>();
+        for (Map.Entry<Long, ImportTreeItem> entry : structure.entrySet()) {
+            ImportTreeItem it = entry.getValue();
+            String title = (it.getTitle().isEmpty()) ? FilenameUtils.getBaseName(params.getOriginalFileName()) : it.getTitle();
+            if (pages.isEmpty()) {
+                page = spb.addPage(FilenameUtils.getBaseName(params.getOriginalFileName()), false);  // add new top level page
+                page.setCssSheet(cssId);
+                rootPage = page;
+                ih.updateIds(structure, page, it, id_map);
+                SimplePageItem item = simplePageToolDao.makeItem(page.getPageId(), 1, SimplePageItem.TEXT, "", "");
+                getContentType(it, importFile, collectionId);
+                item.setHtml(it.getHtmlContent());
+                spb.saveItem(item);
+            } else {
+                SimplePage parent = rootPage;
+                if (it.getParentId() == 0) {
+                    page = simplePageToolDao.makePage(String.valueOf(rootPage.getPageId()), siteId, title, rootPage.getPageId(), rootPage.getPageId());
+                } else {
+                    page = simplePageToolDao.makePage(String.valueOf(spb.getItemsOnPage(parent.getPageId()).size() + 1), siteId, title, rootPage.getPageId(), rootPage.getPageId());
+                }
+                page.setCssSheet(cssId);
+                spb.saveItem(page);
+
+                ih.updateIds(structure, page, it, id_map);
+                if (it.getParentId() != 0) {
+                    parent = spb.getPage(id_map.get(it.getParentId()));
+                }
+                // check for content of differing types e.g. Images, video
+                getContentType(it, importFile, collectionId);
+                int seq = spb.getItemsOnPage(page.getPageId()).size() + 1;
+                SimplePageItem contentItem = simplePageToolDao.makeItem(page.getPageId(), seq, SimplePageItem.TEXT, "", "");
+                contentItem.setHtml(it.getHtmlContent());
+                spb.saveItem(contentItem);
+
+                seq = spb.getItemsOnPage(parent.getPageId()).size() + 1;
+                SimplePageItem item = simplePageToolDao.makeItem(parent.getPageId(), seq, SimplePageItem.PAGE,
+                        Long.toString(page.getPageId()), it.getTitle());
+                item.setHtml(Validator.escapeHtml(it.getContent()));
+                spb.saveItem(item);
+
+                ih.updateIds(structure, page, it, id_map);
+            }
+            pages.add(page);
+        }
+    }
+
+    /**
+     * Set the contentHostingService for this class.
+     *
+     * @param contentHostingService
+     */
+    public void setContentHostingService(ContentHostingService contentHostingService) {
+        this.contentHostingService = contentHostingService;
+    }
+
+    /**
+     * Convert Word clip art file of type WMF to PNG WMF to SVG then SVG to PNG
+     *
+     * @param imagePath
+     * @return
+     * @throws FileNotFoundException
+     * @throws IOException
+     * @throws TranscoderException
+     */
+    private String convertWMFToPNG(String imagePath) throws FileNotFoundException, IOException, TranscoderException {
+        File wmf = new File(imagePath);
+        WMFTranscoder transcoder = new WMFTranscoder();
+        String svgFile = StringUtils.replace(imagePath, "wmf", "svg");
+        FileInputStream is = new FileInputStream(wmf);
+        TranscoderInput wmfti = new TranscoderInput(is);
+        FileOutputStream fos = new FileOutputStream(svgFile);
+        TranscoderOutput svg = new TranscoderOutput(new OutputStreamWriter(fos, "UTF-8"));
+        transcoder.transcode(wmfti, svg);
+        return trancodeSVGToPNG(svgFile);
+    }
+
+    /**
+     * Convert an SVG to PNG file.
+     *
+     * @param svgFile
+     * @return
+     * @throws FileNotFoundException
+     * @throws TranscoderException
+     * @throws IOException
+     */
+    private String trancodeSVGToPNG(String svgFile) {
+        String pngFile = StringUtils.replace(svgFile, "svg", "png");
+        try {
+            PNGTranscoder t = new PNGTranscoder();
+            TranscoderInput inputSVG = new TranscoderInput(new FileInputStream(svgFile));
+            OutputStream pngOutStream = new FileOutputStream(pngFile);
+            TranscoderOutput outputPNG = new TranscoderOutput(pngOutStream);
+            t.transcode(inputSVG, outputPNG);
+            pngOutStream.flush();
+            pngOutStream.close();
+        } catch (Exception e) {
+            handleError("Error transcode the Word Clipart file to this Lesson.", "simplepage.docx.error.importing", e);
+        }
+        return pngFile;
+    }
+
+    /**
+     * Standard method of handling exceptions within the DocX import
+     *
+     * @param errorMessage - the message which will be displayed to the user
+     * @param e - The exception object which will be logged and used for the
+     * session errors
+     */
+    private void handleError(String errorMessage, String errorKey, Exception e) {
+        log.error(errorMessage, e);
+        setErrKey(errorKey, errorMessage, true);
+    }
+
+    /**
+     * Sets the error handling message.
+     *
+     * @param key - message key
+     * @param text - exception message
+     * @param showHeaderMessage - show header message if docx file created
+     * anyway
+     */
+    private void setErrKey(String key, String text, boolean showHeaderMessage) {
+        if (text == null) {
+            key = messageLocator.getMessage(key);
+        } else {
+            key = messageLocator.getMessage(key) + " : " + text;
+        }
+        setErrMessage(key, showHeaderMessage, "simplepage.docx.error.header");
+    }
+
+    /**
+     * Add errors to the tool session so that we display it to user when
+     * refreshing the lesson page.
+     *
+     * @param errorMessage
+     * @param showHeaderMessage
+     * @param headerErrorMsg
+     */
+    public void setErrMessage(String errorMessage, boolean showHeaderMessage, String headerErrorMsg) {
+        ToolSession toolSession = SessionManager.getCurrentToolSession();
+        if (toolSession == null) {
+            log.error("Lesson Builder error not in tool: " + errorMessage);
+            return;
+        }
+        List<String> errors = (List<String>) toolSession.getAttribute("lessonbuilder.errors");
+        if (errors == null) {
+            errors = new ArrayList<String>();
+            if (showHeaderMessage) {
+                errors.add(messageLocator.getMessage(headerErrorMsg));
+            }
+            toolSession.setAttribute("lessonbuilder.errors", errors);
+        }
+        errors.add(errorMessage);
+    }
+
+    /**
+     * Setter to inject MessageLocator
+     *
+     * @param messageLocator
+     */
+    public void setMessageLocator(MessageLocator messageLocator) {
+        this.messageLocator = messageLocator;
+    }
+}
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/epubexport/EpubExport.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/epubexport/EpubExport.java
new file mode 100644
index 0000000..73b94ef
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/epubexport/EpubExport.java
@@ -0,0 +1,1754 @@
+package org.sakaiproject.lessonbuildertool.epubexport;
+
+import coza.opencollab.epub.creator.model.Content;
+import coza.opencollab.epub.creator.model.EpubBook;
+import coza.opencollab.epub.creator.model.TocLink;
+import java.io.ByteArrayInputStream;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.UnsupportedEncodingException;
+import java.net.MalformedURLException;
+import java.net.URISyntaxException;
+import java.net.URL;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
+import java.text.MessageFormat;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Date;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+import javax.servlet.http.HttpServletResponse;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.io.FilenameUtils;
+import org.apache.commons.lang.StringUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.commons.validator.UrlValidator;
+import org.jsoup.Jsoup;
+import org.jsoup.select.Elements;
+import org.sakaiproject.component.cover.ServerConfigurationService;
+import org.sakaiproject.content.api.ContentCollection;
+import org.sakaiproject.content.api.ContentEntity;
+import org.sakaiproject.content.api.ContentHostingService;
+import org.sakaiproject.content.api.ContentResource;
+import org.sakaiproject.content.api.ContentResourceEdit;
+import org.sakaiproject.exception.IdUnusedException;
+import org.sakaiproject.exception.PermissionException;
+import org.sakaiproject.exception.ServerOverloadException;
+import org.sakaiproject.exception.TypeException;
+import org.sakaiproject.lessonbuildertool.ExportPageStructure;
+import org.sakaiproject.lessonbuildertool.SimplePage;
+import org.sakaiproject.lessonbuildertool.SimplePageItem;
+import org.sakaiproject.lessonbuildertool.service.DataExportService;
+import org.sakaiproject.lessonbuildertool.tool.view.ExportEpubViewParameters;
+import org.sakaiproject.lessonbuildertool.util.ExportHelper;
+import org.sakaiproject.lessonbuildertool.util.HtmlCleanerUtil;
+import org.sakaiproject.portal.util.CSSUtils;
+import org.sakaiproject.site.api.Site;
+import org.sakaiproject.site.api.ToolConfiguration;
+import org.sakaiproject.tool.api.ToolSession;
+import org.sakaiproject.tool.cover.SessionManager;
+import org.springframework.util.FileCopyUtils;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NodeList;
+
+import uk.org.ponder.messageutil.MessageLocator;
+
+/**
+ * Export Lesson Content to EPUB format
+ *
+ * @author OpenCollab
+ */
+public class EpubExport {
+
+    private final Log log = LogFactory.getLog(EpubExport.class);
+    /**
+     * property can be set via sakai.properties file.
+     */
+    private final boolean subPagesInline = Boolean.valueOf(ServerConfigurationService.getString("lessonbuilder.epub.inline.content", "false"));
+    private final boolean addErrorToDoc = Boolean.valueOf(ServerConfigurationService.getString("lessonbuilder.epub.error.add.to.doc", "false"));
+    private final boolean abortOnError = Boolean.valueOf(ServerConfigurationService.getString("lessonbuilder.epub.error.abort.doc.creation", "false"));
+    private final boolean addErrorToSession = (abortOnError) ? true : Boolean.valueOf(ServerConfigurationService.getString("lessonbuilder.epub.error.add.to.session", "false"));
+    private final String languageEncoding = ServerConfigurationService.getString("lessonbuilder.epub.languageEncoding", "en");
+    private final int fileSizeInclusionLimit = Integer.parseInt(ServerConfigurationService.getString("lessonbuilder.epub.filesize.inclusion.limit", "300")) * 1024 * 1024;
+    private final boolean showSubPageTitle = Boolean.valueOf(ServerConfigurationService.getString("lessonbuilder.export.show.subpage.title", "true"));
+    private final boolean addExternalLinkToPDF = Boolean.valueOf(ServerConfigurationService.getString("lessonbuilder.epub.embed.pdf.include.external.link", "true"));
+    private final boolean includeContentPage = Boolean.valueOf(ServerConfigurationService.getString("lessonbuilder.epub.include.content.page", "false"));
+    private final String contentPlaceholder = ServerConfigurationService.getString("lessonbuilder.epub.content.heading.text", "Content");
+    private final UrlValidator urlValidator = new UrlValidator();
+
+    /**
+     * ContentHostingService set by Spring configuration used for Resources work
+     */
+    private ContentHostingService contentHostingService;
+
+    /**
+     * DataExportService set by Spring configuration used for to export Lesson
+     * data
+     */
+    private DataExportService dataExportService;
+
+    // Utility class to clean html text
+    private HtmlCleanerUtil htmlCleaner;
+
+    // MessageLocator service required as per the Lessons tool exception
+    private MessageLocator messageLocator;
+
+    // Name of cover image, will look for .jpg, .png and .gif extensions
+    private String coverImage = "epub_cover";
+
+    // List of file extensions checked when searching for a cover image
+    private List<String> imageExtensions = Arrays.asList("jpg", "jpeg", "png", "gif");
+
+    // List of file extensions checked when searching for video files
+    private final List<String> videoExtensions = Arrays.asList("mp4", "flv", "avi", "mpeg", "webm", "3pg", "mkv");
+
+    // HTML used to add links to EPUB
+    private String linkHTML = "<p><a href=\"{0}\">{1}</a></p>";
+
+    // Simple html link
+    private final String plainLinkHTML = "<a href=\"{0}\">{1}</a>";
+
+    // Simple html link
+    private final String embeddedPlainLinkHTML = "<p><a href=\"{0}\" data-pre-embedded=\"true\">{1}</a></p>";
+
+    private final String hiddenInput = "<input type=\"hidden\" id=\"{0}\" value=\"{1}\">";
+
+    // HTML used to sized image tags to EPUB
+    private String sizedImageHTML = "<p><img src=\"{0}\" {1} alt=\"\"/></p>";
+
+    // HTML used to sized image tags to EPUB
+    private String unsizedImageHTML = "<p><img src=\"{0}\" {1} alt=\"\" data-pre-embedded=\"true\"/></p>";
+
+    /**
+     * HTML template for displaying video
+     */
+    private String html5VideoTag = "<video width=\"320\" height=\"180\" controls=\"controls\">\n"
+            + "<source src=\"{0}\" type=\"{1}\" />\n"
+            + "<p>If your reading system does not support HTML5 video, \n"
+            + "this video is available in\n"
+            + "<a href=\"{2}\">{2}</a>.</p>\n"
+            + "</video>";
+
+    /**
+     * HTML template for displaying audio
+     */
+    private String html5AudioTag = "<audio width=\"320\" height=\"180\" controls=\"controls\">\n"
+            + "<source src=\"{0}\" type=\"{1}\"/>\n"
+            + "<p>If your reading system does not support HTML5 audio, \n"
+            + "this audio is available in\n"
+            + "<a href=\"{2}\">{2}</a>.</p>\n"
+            + "</audio>";
+
+    /**
+     * Add JavaScript to allow input for INPUT tags in EPUB reader, otherwise
+     * reader Shortcut keys will take effect
+     */
+    private final String addContentToAllowInput
+            = "function onkeydownFunc(e) {\n "
+            + "  	var doStopPropagation;\n "
+            + "		var targ;\n"
+            + "     if (!e){ \n"
+            + "			var e = window.event;\n"
+            + "		}\n"
+            + "	    if (e.target) { \n"
+            + "       	targ = e.target;\n"
+            + "     }else if (e.srcElement) { \n"
+            + "			targ = e.srcElement;\n"
+            + "		}\n"
+            + "		if (targ.tagName.toUpperCase() == 'INPUT') {\n"
+            + "			doStopPropagation = true;\n"
+            + "		}else {\n"
+            + "			doStopPropagation = false;\n"
+            + "		}\n"
+            + "		if (doStopPropagation) {\n"
+            + "			e.stopPropagation();\n"
+            + "		}\n"
+            + "	}\n\n";
+
+    private final String deleteResourceMessage = "<span style=\"color: #930;font-style: italic;padding-left: 1em;\">{0}</span>";
+
+    // HTML used to display error messages for content that failed to be exported to EPUB
+    private final String styledError = "<br/><div style=\"font-size;1.1em;border-radius:4px;border: 1px solid #cd0a0a;color:#cd0a0a;padding:4px;\">{0}</div><br/>";
+
+    // This wrapper should not be settable
+    private final String htmlWrapper = "<html xmlns=\"http://www.w3.org/1999/xhtml\"><head ><title>{0}</title>{1}</head><body>{2}</body></html>";
+
+    // JSON object wrapper
+    private final String returnJSON = "\"docName\": \"{0}\", \"docURL\": \"{1}\"";
+
+    // JSON error object wrapper
+    private final String returnErrorJSON = "\"errorMessage\": \"{0}\", \"errorReason\": \"{1}\"";
+
+    // Lessons Resource name
+    private final String lessonResourceName = "/group/{0}/{1}/" + coverImage + ".";
+
+    // Site Resource name
+    private final String siteResourceName = "/group/{0}/" + coverImage + ".";
+
+    // HTML used to add Sakai tool links to EPUB
+    private final String sakaiToollinkHTML = "<a href=\"{0}\" target=\"_blank\">{1}</a></p>";
+
+    private final String thisToolLink = "{0}/portal/site/{1}/page/{2}";
+
+    private ExportHelper exportHelper;
+
+    // We have to use UTF-8 for encoding
+    private final Charset fixedCharSet = Charset.forName("UTF-8");
+
+    private static final String EDGE_CHECK = "edge_includes";
+    private static final String ADOBE_EDGE = "Edge";
+    private static final String ARTICULATE = "Articulate";
+    private static final String ARTICULATE_META_CHECK = "meta.xml";
+    private static final String ARTICULATE_TAG_CHECK = "application";
+    private static final String ARTICULATE_CHECK = "Articulate Storyline";
+
+    private final String epubIframe = "<iframe\n"
+            + "        src=\"{0}\"\n"
+            + "        title=\"{1}\"\n"
+            + "        class=\"{2}\">\n"
+            + "   Your reading system does not support inline \n"
+            + "   frames or support has been disabled. Please \n"
+            + "   follow <a href=\"{3}\">this link</a> \n"
+            + "   to open the associated content document.\n"
+            + "</iframe>";
+
+    /**
+     * Creates an EPUB file for a specific Lesson
+     *
+     * The file is saved to the Site's Resources and the name of the file is
+     * returned as a JSON object on the HttpServletResponse. This method should
+     * only be called through the RSF :( framework
+     *
+     * @param sid
+     * @param httpServletResponse
+     * @param params
+     */
+    public void doExport(String sid, HttpServletResponse httpServletResponse,
+            ExportEpubViewParameters params) {
+        try {
+            ContentResourceEdit contentResource = createEPUBBook(sid, params);
+            httpServletResponse.setContentType("application/json");
+            PrintWriter out = httpServletResponse.getWriter();
+            out.println(createReturnJSON(contentResource));
+            out.close();
+        } catch (IdUnusedException iue) {
+            handleRequiredResourceTool(httpServletResponse);
+        } catch (Exception e) {
+            handleError("ERROR in Epub Exporter! An exception occured while this Lesson was being exported.",
+                    "simplepage.epub.error.creating.epub", e);
+        }
+    }
+
+    /**
+     * Creates the JSON object returned on the HttpServletResponse. We can add
+     * error flags or messages here - will have to handle that in show-page.js
+     *
+     * @param fileName
+     * @return
+     */
+    private String createReturnJSON(ContentResourceEdit contentResource) {
+        String jsonValues = MessageFormat.format(returnJSON, getCleanResourceName(contentResource.getId()),
+                contentResource.getUrl());
+        return "{".concat(jsonValues).concat("}");
+    }
+
+    /**
+     * Creates the JSON object returned on the HTTPServletResponse. The object
+     * contains the error message and reason.
+     *
+     * @param errorMessage
+     * @param errorCause
+     * @return
+     */
+    private String createErrorJSON(String errorMessage, String errorCause) {
+        String jsonValues = MessageFormat.format(returnErrorJSON, errorMessage, errorCause);
+        return "{".concat(jsonValues).concat("}");
+    }
+
+    /**
+     * Creates a JSON object containing the error message and reason. Returns
+     * this data to the browser via httpServletResponse On exception logs the
+     * error.
+     *
+     * @param httpServletResponse
+     */
+    private void handleRequiredResourceTool(HttpServletResponse httpServletResponse) {
+        try {
+            PrintWriter out = httpServletResponse.getWriter();
+            out.println(createErrorJSON("Unable to create the EPUB file.", "Please request "
+                    .concat("that the administrator add the ")
+                    .concat("<strong>Resource</strong> tool to this site.<br/>")));
+            out.close();
+        } catch (Exception ex) {
+            log.error("Error informing the user, that the resource tool is required for the EPUB export.", ex);
+        }
+    }
+
+    /**
+     * Gets the name of the ContentResource file
+     *
+     */
+    private String getCleanResourceName(String id) {
+        if (id.contains("/")) {
+            return id.substring(id.lastIndexOf("/") + 1);
+        } else {
+            return id;
+        }
+    }
+
+    /**
+     * Creates the EPUB book, adds the lesson data and saves to resources
+     *
+     * @param siteId
+     * @param params
+     * @return name of the Resources object
+     * @throws Exception
+     */
+    private ContentResourceEdit createEPUBBook(String siteId, ExportEpubViewParameters params) throws Exception {
+        List<ExportPageStructure> pageIndex = new ArrayList<ExportPageStructure>();
+        Site site = dataExportService.getSite(siteId);
+        SimplePage simplePage = dataExportService.getLessonData(params.getPageId());
+        params.setUrl(MessageFormat.format(thisToolLink, params.getUrl(), simplePage.getSiteId(), simplePage.getToolId()));
+        StringBuilder content = new StringBuilder();
+        StringBuilder jsContent = new StringBuilder();
+        StringBuilder contentsPage = new StringBuilder();
+        List<String> cssList = new ArrayList<String>();
+        EpubBook book = new EpubBook(languageEncoding, simplePage.getTitle(),
+                simplePage.getTitle(), site.getTitle());
+        EpubBook shadowBook = new EpubBook(languageEncoding, simplePage.getTitle(),
+                simplePage.getTitle(), site.getTitle());
+        if (includeContentPage) { //There must be a better way, think on this
+            try {
+                shadowBook = createShadowBook(shadowBook, simplePage, content, site, pageIndex, params, cssList, jsContent);
+            } catch (Exception e) {
+                log.error(e);
+            }
+            content = jsContent = new StringBuilder();
+            cssList = new ArrayList<String>();
+            pageIndex = new ArrayList<ExportPageStructure>();
+            populateContentsPage(contentsPage, shadowBook);
+        }
+        book.setAutoToc(false);     // Will only be one record if true. We manually build it.
+        TocLink tocLink = new TocLink(getValidFilename(simplePage.getTitle()).concat(".xhtml"),
+                simplePage.getTitle(), null);
+        book.getTocLinks().add(tocLink);
+        content.append(addTitleHeader(simplePage).concat("<br/>"));
+        content.append(contentsPage.toString());
+        buildTocStructure(site, simplePage, null, pageIndex);
+        addLessonContent(book, site, params, null, content, jsContent, pageIndex, cssList, simplePage.getTitle());
+        populateCssList(simplePage, cssList);
+        outputSection(book, simplePage.getTitle(), content.toString(), site, jsContent.toString(), cssList);
+        if (subPagesInline) {
+            processInlineToc(book, pageIndex, simplePage);
+        } else {
+            processSubPages(book, site, params, pageIndex, content, cssList, simplePage.getTitle());
+        }
+        if (abortOnError && hasErrors()) {
+            return null;
+        } else {
+            return saveEPUBFileInResources(book, siteId, getValidFilename(simplePage.getTitle()));
+        }
+    }
+
+    /**
+     * Creates a complete copy of the ebook, required when a content page is
+     * required. Very heavy in terms of processing.
+     *
+     * @param book
+     * @param simplePage
+     * @param content
+     * @param site
+     * @param pageIndex
+     * @param params
+     * @param cssList
+     * @param jsContent
+     * @return
+     * @throws Exception
+     */
+    private EpubBook createShadowBook(
+            EpubBook book,
+            SimplePage simplePage,
+            StringBuilder content,
+            Site site,
+            List<ExportPageStructure> pageIndex,
+            ExportEpubViewParameters params,
+            List<String> cssList,
+            StringBuilder jsContent
+    ) throws Exception {
+        book.setAutoToc(false);     // Will only be one record if true. We manually build it.
+        TocLink tocLink = new TocLink(getValidFilename(simplePage.getTitle()).concat(".xhtml"),
+                simplePage.getTitle(), null);
+        book.getTocLinks().add(tocLink);
+        content.append(addTitleHeader(simplePage));
+        buildTocStructure(site, simplePage, null, pageIndex);
+        addLessonContent(book, site, params, null, content, jsContent, pageIndex, cssList, simplePage.getTitle());
+        populateCssList(simplePage, cssList);
+        outputSection(book, simplePage.getTitle(), content.toString(), site, jsContent.toString(), cssList);
+        if (subPagesInline) {
+            processInlineToc(book, pageIndex, simplePage);
+        } else {
+            processSubPages(book, site, params, pageIndex, content, cssList, simplePage.getTitle());
+        }
+        return book;
+    }
+
+    /**
+     * Creates a content page for insertion into the epub, prior to any other
+     * content.
+     *
+     * @param contentsPage
+     * @param book
+     */
+    private void populateContentsPage(StringBuilder contentsPage, EpubBook book) {
+        contentsPage.append("<h2>");
+        contentsPage.append(contentPlaceholder);
+        contentsPage.append("</h2><br/>");
+        if (!book.getTocLinks().isEmpty()) {
+            contentsPage.append("<ul>");
+            for (TocLink tl : book.getTocLinks()) {
+                contentsPage.append("<li>");
+                contentsPage.append(
+                        MessageFormat.format(
+                                plainLinkHTML, tl.getHref(), tl.getTitle().replaceAll("-", "&nbsp;")
+                        )
+                );
+                contentsPage.append("</li>");
+            }
+            contentsPage.append("</ul>");
+        }
+        contentsPage.append("<br/>");
+    }
+
+    /**
+     * Creates a structure of lesson pages to be used when creating the Table Of
+     * Contents this avoids the Concurrent modification conditions and removes
+     * complexity from the addLessonContent method
+     *
+     * @param site
+     * @param simplePage
+     * @param simplePageItemList
+     * @param pageIndex
+     */
+    private void buildTocStructure(Site site, SimplePage simplePage, List<SimplePageItem> simplePageItemList, List<ExportPageStructure> pageIndex) {
+        if (null == simplePageItemList) {
+            simplePageItemList = dataExportService.getPageItems(simplePage.getPageId());
+        }
+        for (SimplePageItem spi : simplePageItemList) {
+            if (spi.getType() == SimplePageItem.PAGE) {
+                SimplePage subSimplePage = dataExportService.getLessonData(Long.parseLong(spi.getSakaiId()));
+                List<SimplePageItem> subSimplePageItemList = dataExportService.getPageItems(subSimplePage.getPageId());
+                ExportPageStructure eps = new ExportPageStructure();
+                eps.setId(spi.getId());
+                eps.setSpi(spi);
+                eps.setParentId(subSimplePage.getPageId());
+                eps.setHasBeenRendered(false);
+                pageIndex.add(eps);
+                buildTocStructure(site, subSimplePage, subSimplePageItemList, pageIndex);
+            }
+        }
+    }
+
+    /**
+     * Adds the reference to the element in the Table of Contents for in-line
+     * content.
+     *
+     * @param book
+     * @param pageIndex
+     * @param simplePage
+     */
+    private void processInlineToc(EpubBook book, List<ExportPageStructure> pageIndex, SimplePage simplePage) {
+        for (ExportPageStructure item : pageIndex) {
+            SimplePage subSimplePage = dataExportService.getLessonData(Long.parseLong(item.getSpi().getSakaiId()));
+            int indent = getIndentationLevel(subSimplePage, 0);
+            String pageTitle = StringUtils.repeat(" - ", indent).concat(subSimplePage.getTitle());
+            TocLink tocLink = new TocLink(getValidFilename(simplePage.getTitle()).concat(".xhtml#section_").concat(String.valueOf(item.getSpi().getId())),
+                    pageTitle, null);
+            book.getTocLinks().add(tocLink);
+        }
+    }
+
+    /**
+     * determine the level of indentation for the TOC
+     *
+     * @param simplePage
+     * @param level
+     * @return
+     */
+    private int getIndentationLevel(SimplePage simplePage, int level) {
+        if (simplePage != null && simplePage.getParent() != null) {
+            level = getIndentationLevel(dataExportService.getLessonData(simplePage.getParent()), level + 1);
+        }
+        return level;
+    }
+
+    /**
+     * Adding the Title Header
+     *
+     * @param simplePage
+     */
+    private String addTitleHeader(SimplePage simplePage) {
+        return "<h1>".concat(simplePage.getTitle()).concat("</h1>");
+    }
+
+    /**
+     * Add a cover image to the EPUB book. First check for an image in the
+     * lesson's resources folder then in the site folder
+     *
+     * @param book
+     * @param simplePage
+     */
+    private void addCover(EpubBook book, SimplePage simplePage) {
+        // First check in lesson resources then check site resources
+        if (!searchAndAddCoverImages(MessageFormat.format(lessonResourceName, simplePage.getSiteId(), simplePage.getTitle()), book)) {
+            // No cover found on Lesson level, now look for cover on site level
+            searchAndAddCoverImages(MessageFormat.format(siteResourceName, simplePage.getSiteId()), book);
+        }
+    }
+
+    /**
+     * Search for image resources by iterating through all the known image types
+     * and add to cover if found
+     *
+     * @param baseResourceId
+     * @param book
+     * @return
+     */
+    private boolean searchAndAddCoverImages(String baseResourceId, EpubBook book) {
+        for (String ext : imageExtensions) {
+            try {
+                book.addCoverImage(dataExportService.getContentResourceData(baseResourceId + ext).getContent(), null, baseResourceId + ext);
+                return true;
+            } catch (Exception ex) {
+                // This resourceId does not exist, just try the next one. NO need
+                // to handle this exception - this is expected
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Handles the logic to add all the types of SimplePageItems to the EPUB
+     * document
+     *
+     * @param book
+     * @param site
+     * @param params
+     * @param simplePageItemList
+     * @param content
+     * @param jsContent
+     * @param pageIndex
+     * @throws Exception
+     */
+    private void addLessonContent(EpubBook book, Site site, ExportEpubViewParameters params, List<SimplePageItem> simplePageItemList, StringBuilder content, StringBuilder jsContent, List<ExportPageStructure> pageIndex, List<String> cssList, String lessonName) throws Exception {
+        SimplePage simplePage = dataExportService.getLessonData(params.getPageId());
+        addCover(book, simplePage);
+        if (null == simplePageItemList) {
+            simplePageItemList = dataExportService.getPageItems(simplePage.getPageId());
+        }
+        boolean addQuestionJavascript = false;
+        for (SimplePageItem spi : simplePageItemList) {
+            switch (spi.getType()) {
+                case SimplePageItem.PAGE:
+                    SimplePage subSimplePage = dataExportService.getLessonData(Long.parseLong(spi.getSakaiId()));
+                    populateCssList(subSimplePage, cssList);
+                    if (subPagesInline) {
+                        if (showSubPageTitle) {
+                            content.append(addSimplePageNameHeader(spi));
+                        }
+                        List<SimplePageItem> subSimplePageItemList = dataExportService.getPageItems(subSimplePage.getPageId());
+                        content.append("<div id=\"section_").append(spi.getId()).append("\">");
+                        addLessonContent(book, site, params, subSimplePageItemList, content, jsContent, pageIndex, cssList, lessonName);
+                        updateRenderedPages(pageIndex, spi.getId(), subSimplePage.getPageId());
+                        content.append("</div><br/>");
+                    } else {
+                        content.append(addSimplePageReferrer(spi));
+                    }
+                    break;
+                case SimplePageItem.ASSIGNMENT:
+                    content.append(createAssignment(spi, site));
+                    break;
+                case SimplePageItem.ASSESSMENT:
+                    content.append(createAssessment(spi, site));
+                    break;
+                case SimplePageItem.TEXT:
+                    content.append(createText(book, spi, site, lessonName));
+                    break;
+                case SimplePageItem.RESOURCE:
+                    content.append(createResource(book, spi, site, lessonName));
+                    break;
+                case SimplePageItem.MULTIMEDIA:
+                    content.append(createMultimedia(book, spi, site, lessonName));
+                    break;
+                case SimplePageItem.FORUM:
+                    content.append(createForumTopic(spi, site));
+                    break;
+                case SimplePageItem.QUESTION:
+                    content.append(createQuestion(spi, params, site, jsContent));
+                    addQuestionJavascript = true;
+                    break;
+                default:
+                    break;
+            }
+        }
+        if (addQuestionJavascript) {
+            jsContent.append(addContentToAllowInput);
+        }
+    }
+
+    /**
+     * Adds a Name Header for Simple page
+     *
+     * @param content
+     * @param spi
+     */
+    private String addSimplePageNameHeader(SimplePageItem spi) {
+        return "<h2>".concat(spi.getName()).concat("</h2>");
+    }
+
+    /**
+     * Update the pageIndex when a page has been rendered to prevent it from
+     * being duplicated.
+     *
+     * @param pageIndex
+     * @param SimplePageItemId
+     * @param SimplePageId
+     */
+    private void updateRenderedPages(List<ExportPageStructure> pageIndex, Long SimplePageItemId, Long SimplePageId) {
+        for (ExportPageStructure nses : pageIndex) {
+            if (nses.getId() == SimplePageItemId && nses.getParentId() == SimplePageId) {
+                nses.setHasBeenRendered(true);
+                break;
+            }
+        }
+    }
+
+    /**
+     * Adds a Name SubHeader for Simple page
+     *
+     * @param spi
+     */
+    private String addSimplePageReferrer(SimplePageItem spi) {
+        return MessageFormat.format(linkHTML, "./" + getValidFilename(spi.getName().replace(" ", "_")) + ".xhtml", "<h4>".concat(spi.getName()).concat("</h4>"));
+    }
+
+    /**
+     * Adds a section to the EPUB lib Book object, also adds the sites CSS file
+     * to the EPUB file.
+     *
+     * @param book
+     * @param sectionName
+     * @param content
+     * @throws IOException
+     */
+    private void outputSection(EpubBook book, String sectionName, String contentStr, Site site, String jsContent, List<String> cssList) throws IOException {
+        Logger.getLogger(EpubExport.class.getName()).log(Level.INFO, "get the css" + site.getSkin());
+        String skinFolder = CSSUtils.getSkinFromSite(site);
+        Logger.getLogger(EpubExport.class.getName()).log(Level.INFO, "CSS Skin: " + CSSUtils.getSkinFromSite(site));
+        Logger.getLogger(EpubExport.class.getName()).log(Level.INFO, "CSS Tool base Skin: " + CSSUtils.getCssToolBase());
+        Logger.getLogger(EpubExport.class.getName()).log(Level.INFO, "CSS Portal Skin: " + CSSUtils.getCssPortalSkin(skinFolder));
+        Logger.getLogger(EpubExport.class.getName()).log(Level.INFO, "CSS Tool base CDN: " + CSSUtils.getCssToolBaseCDN());
+        String cssHref = CSSUtils.getCssToolBase().replaceFirst("/", "");
+        String wrappedHTML = "";
+        String siteCss = "<link href=\"".concat(cssHref).concat("\" type=\"text/css\" rel=\"stylesheet\" media=\"all\" />");
+        URL siteUrl = new URL(site.getUrl());
+        URL cssURL = new URL(siteUrl.getProtocol() + "://" + siteUrl.getHost() 
+                + ( (siteUrl.getPort() != -1)? (":" + siteUrl.getPort()) : "")
+                + CSSUtils.getCssToolBase());
+        book.addContent(cssURL.openConnection().getInputStream(), "text/css", cssHref, false, false);
+        if (!cssList.isEmpty()) {
+            for (String css : cssList) {
+                if (!"null".equals(css)) {
+                    try {
+                        ContentResource rs = contentHostingService.getResource(css);
+                        book.addContent(rs.getContent(), "text/css", css, false, false);
+                        siteCss = siteCss + "<link href=\"".concat(css.replaceFirst("/", "")).concat("\" type=\"text/css\" rel=\"stylesheet\" media=\"all\" />");
+                    } catch (Exception e) {
+                        contentStr = contentStr.concat(handleError(
+                                "ERROR in Epub Exporter! An exception occured while appending the sites styling file (" + css + ") to the Epub on page:".concat(sectionName),
+                                "simplepage.epub.error.attaching.css", e));
+                        siteCss = "";
+                    }
+                }
+            }
+        }
+        if (StringUtils.isNotEmpty(jsContent)) {
+            String jsFilename = "library/js/".concat(getValidFilename(sectionName)).concat(".js");
+            book.addContent(jsContent.getBytes(fixedCharSet), "text/javascript", jsFilename, false, false);
+            siteCss = siteCss.concat("<script type=\"text/javascript\" src=\"".concat(jsFilename).concat("\"></script>"));
+        }
+        contentStr = "\n<br/>".concat(contentStr);
+        wrappedHTML = wrappedHTML + MessageFormat.format(htmlWrapper, sectionName, siteCss, htmlCleaner.cleanHTMLString(contentStr));
+
+        Content bookContent = book.addContent(wrappedHTML.getBytes(fixedCharSet), "application/xhtml+xml",
+                getValidFilename(sectionName).concat(".xhtml"), true, true);
+        if (StringUtils.isNotEmpty(jsContent)) {
+            bookContent.setProperties("scripted");
+        }
+    }
+
+    /**
+     * Creates the Assignment Resource file with a link
+     *
+     * @param book
+     * @param spi
+     * @param site
+     * @param params
+     */
+    private String createAssignment(SimplePageItem spi, Site site) {
+        try {
+            return addSakaiToollinkToContent(dataExportService.getAssignmentURL(spi, site), dataExportService.getAssignmentTitle(spi));
+        } catch (Exception e) {
+            return handleError("ERROR in Epub Exporter! An exception occured while the Assignment for this Lesson was exported. ID : ".concat(spi.getSakaiId()),
+                    "simplepage.epub.error.creating.assignment", e);
+        }
+    }
+
+    /**
+     * Adds a Sakai Tool link
+     *
+     * @param spi
+     * @param site
+     * @param url
+     * @param title
+     */
+    private String addSakaiToollinkToContent(String url, String title) {
+        return MessageFormat.format(sakaiToollinkHTML, url, title).concat("<br>");
+    }
+
+    /**
+     * Creates the Assessment Resource file with a link
+     *
+     * @param book
+     * @param spi
+     * @param site
+     * @param params
+     */
+    private String createAssessment(SimplePageItem spi, Site site) {
+        try {
+            return addSakaiToollinkToContent(dataExportService.getAssessmentURL(spi, site), dataExportService.getAssessmentTitle(spi));
+        } catch (Exception e) {
+            return handleError(
+                    "ERROR in Epub Exporter! An exception occured while the Assessment for this Lesson was exported. ID : ".concat(spi.getSakaiId()),
+                    "simplepage.epub.error.creating.assessment",
+                    e);
+        }
+    }
+
+    /**
+     * Adds SimplePageItem content of text type to the EPUB document Handle the
+     * image and object tags
+     *
+     * @param book
+     * @param spi
+     * @throws Exception
+     */
+    private String createText(EpubBook book, SimplePageItem spi, Site site, String lessonName) {
+        spi = hasImagePdfOrVideo(book, spi, site, lessonName);
+        return htmlCleaner.handleEPUBHtml(spi.getHtml(), book);
+    }
+
+    /**
+     * Add the HTML links of linked content
+     *
+     * @param spi
+     */
+    private String createResource(EpubBook book, SimplePageItem spi, Site site, String lessonName) {
+        if (spi.getName().contains(".pdf")
+                || (imageExtensions.contains(FilenameUtils.getExtension(spi.getName())))
+                || isAuthoringTool(spi, "'")) {
+            return createMultimedia(book, spi, site, lessonName);
+        }
+        return MessageFormat.format(linkHTML, ServerConfigurationService.getAccessUrl().concat("/content").concat(spi.getSakaiId()), spi.getName());
+    }
+
+    /**
+     * Add multimedia content to the EPUB HTML content
+     *
+     * determine whether this links to a articulate/Adobe Edge include all
+     * E-learning tool data
+     *
+     * @param book
+     * @param spi
+     * @param site
+     */
+    private String createMultimedia(EpubBook book, SimplePageItem spi, Site site, String lessonName) {
+        String type = "";
+        if (isAuthoringTool(spi, type)) {
+            return addElearningContent(spi, book, type);
+        }
+        String multimediaDisplayType = spi.getAttribute("multimediaDisplayType");
+        if ("3".equals(multimediaDisplayType)) {
+            String url = spi.getAttribute("multimediaUrl");
+            return MessageFormat.format(linkHTML, url, url);
+        } else if ("2".equals(multimediaDisplayType)) {
+            String url = spi.getName();
+            return MessageFormat.format(linkHTML, url, url);
+        } else if ("1".equals(multimediaDisplayType)) {
+            return htmlCleaner.convertIframeToLink(spi.getAttribute("multimediaEmbedCode"));
+        } else {
+            if (spi.getName().contains(".pdf")) {
+                try {
+                    String fullLink = "";
+                    String linkHref;
+                    boolean isLocal = false;
+                    if (spi.getType() == 1 && !spi.getHtml().equals("text/html")) {
+                        linkHref = spi.getSakaiId();
+                        fullLink = ServerConfigurationService.getAccessUrl().concat("/content").concat(spi.getSakaiId());
+                        isLocal = true;
+                    } else {
+                        fullLink = new String(contentHostingService.getResource(spi.getSakaiId()).getContent(), StandardCharsets.UTF_8);
+                        linkHref = java.net.URLDecoder.decode(fullLink.substring(fullLink.lastIndexOf("/group"), fullLink.length()), "UTF-8");
+                        isLocal = new URL(site.getUrl()).getHost().equals(new URL(fullLink).getHost());
+                    }
+                    if (isLocal) {
+                        return embedContentResourceGivenURL(linkHref, book, spi, "pdf", fullLink);
+                    }
+                } catch (Exception ex) {
+                    Logger.getLogger(EpubExport.class.getName()).log(Level.SEVERE, null, ex);
+                }
+            }
+            if (imageExtensions.contains(FilenameUtils.getExtension(spi.getName())) && spi.getType() != 7) {
+                try {
+                    String fullLink;
+                    String linkHref;
+                    boolean isLocal = false;
+                    if (spi.getType() == 1 && spi.getHtml().contains("image/")) {
+                        linkHref = spi.getSakaiId();
+                        fullLink = ServerConfigurationService.getAccessUrl().concat("/content").concat(spi.getSakaiId());
+                        isLocal = true;
+                    } else {
+                        fullLink = new String(contentHostingService.getResource(spi.getSakaiId()).getContent(), StandardCharsets.UTF_8);
+                        linkHref = java.net.URLDecoder.decode(fullLink.substring(fullLink.lastIndexOf("/group"), fullLink.length()), "UTF-8");
+                        isLocal = new URL(site.getUrl()).getHost().equals(new URL(fullLink).getHost());
+                    }
+                    if (isLocal) {
+                        return embedContentResourceGivenURL(linkHref, book, spi, "image", fullLink);
+                    }
+                } catch (Exception e) {
+                    return handleError(
+                            "ERROR in Epub Exporter! Error adding embedded resource to EPUB file. ID : ".concat(spi.getSakaiId()),
+                            "simplepage.epub.error.creating.resource",
+                            e);
+                }
+            }
+            return handleEmbeddedResources(book, spi, site);
+        }
+    }
+
+    /**
+     * When given a Content Link, to a resource which contains the URL to the
+     * desired Resource. Get the Resource URL and embed the actual resource into
+     * the Ebook and modify the URL.
+     *
+     * @param linkHref
+     * @param book
+     * @param spi
+     * @return
+     * @throws UnsupportedEncodingException
+     * @throws PermissionException
+     * @throws IdUnusedException
+     * @throws TypeException
+     * @throws ServerOverloadException
+     */
+    private String embedContentResourceGivenURL(String linkHref, EpubBook book, SimplePageItem spi, String resourceType, String fullLink) throws UnsupportedEncodingException, PermissionException, IdUnusedException, TypeException, ServerOverloadException {
+        ContentResource cr = getContentResourceFromURL(linkHref, false);
+        String linkText = spi.getName();
+        SimplePageItem spItem = spi;
+        spItem.setSakaiId(cr.getReference());
+        String embedRes = embedResourceFile(book, cr, spItem, linkText);
+        if (resourceType.equals("pdf")) {
+            if (addExternalLinkToPDF) {
+                embedRes = embedRes.replace("</p>", "") + MessageFormat.format(plainLinkHTML, fullLink, "&nbsp;(View Online)</p>");
+            }
+        }
+        spi.setHtml(spi.getHtml().replace(spi.getName(), embedRes));
+        return embedRes;
+    }
+
+    /**
+     * Handles the text,image and video types of multimedia
+     *
+     * @param book
+     * @param spi
+     * @param site
+     */
+    private String handleEmbeddedResources(EpubBook book, SimplePageItem spi, Site site) {
+        try {
+            ContentResource cr = dataExportService.getContentResourceData(spi.getSakaiId());
+            if (cr == null) {
+                return "<br/>" + spi.getName() + ": [*Deleted*] ";
+            }
+            String resourceLink = ServerConfigurationService.getAccessUrl().concat("/content").concat(spi.getSakaiId());
+            if (fileSizeInclusionLimit <= cr.getContentLength()) {
+                return MessageFormat.format(linkHTML, site.getUrl(), "View :" + spi.getName()
+                        + MessageFormat.format(linkHTML, resourceLink, " Download :" + spi.getName() + " ( " + FileUtils.byteCountToDisplaySize(cr.getContentLength()) + " )"));
+            }
+            if ("text/url".equals(cr.getContentType())) {
+                return MessageFormat.format(linkHTML, spi.getName(), spi.getName());
+                // Embed Images
+            } else if (cr.getContentType().contains("image/")) {
+                return createContentResourceImageHTML(book, cr, spi);
+                // Embed video    
+            } else if (cr.getContentType().contains("video/")) {
+                return embedMultiMediaContentResource(book, cr, spi, "video");
+                // Embedded audio
+            } else if (cr.getContentType().contains("audio/")) {
+                return embedMultiMediaContentResource(book, cr, spi, "audio");
+                // Only embed .PDF for now, behaviour in E-Readers unknown for .DOCX etc.
+            } else if (cr.getContentType().contains("pdf")) {
+                //Fallback method + regular link to external pdf
+                String pdfLink = embedPDFResourceFile(book, cr, spi);
+                if (addExternalLinkToPDF) {
+                    pdfLink = pdfLink.replace("</p>", "") + MessageFormat.format(plainLinkHTML, resourceLink, "&nbsp;(View Online)</p>");
+                }
+                return pdfLink;
+
+                // Any other embedded file will just be a link to the Sakai hosted resource    
+            } else {
+                return MessageFormat.format(linkHTML, ServerConfigurationService.getAccessUrl().concat("/content").concat(spi.getSakaiId()),
+                        getCleanResourceName(spi.getSakaiId()));
+            }
+        } catch (IdUnusedException iue) {
+            handleError(
+                    "ERROR in Epub Exporter! The resource ID : ".concat(spi.getSakaiId()).concat(", was deleted from the Resources section. It has not been deleted from the Lesson. Please update the Lesson."),
+                    "simplepage.epub.error.creating.resource",
+                    iue);
+            return MessageFormat.format(deleteResourceMessage, spi.getName() + ": [*Deleted*] ");
+
+        } catch (Exception ex) {
+            return handleError(
+                    "ERROR in Epub Exporter! Error adding embedded resource to EPUB file. ID : ".concat(spi.getSakaiId()),
+                    "simplepage.epub.error.creating.resource",
+                    ex);
+        }
+    }
+
+    /**
+     * Embeds a resource file and adds a fall-back link to the Sakai resource.
+     *
+     * @param book
+     * @param cr
+     * @param spi
+     * @return String HTML tag with a link to resource
+     * @throws ServerOverloadException
+     */
+    private String embedPDFResourceFile(EpubBook book, ContentResource cr, SimplePageItem spi) throws ServerOverloadException {
+        String cleanId = spi.getSakaiId().replaceFirst("/", "").replace(" ", "_");
+        Content content = book.addContent(cr.getContent(), null, cleanId, false, true);
+        content.setLinear(false);
+        Content fallback = book.addTextContent(cleanId, "fallback/" + cleanId + ".xhtml",
+                MessageFormat.format(linkHTML, ServerConfigurationService.getAccessUrl().concat("/content").concat(getValidFilename(cleanId)),
+                        getValidFilename(cleanId)));
+        fallback.setToc(false);
+        content.setFallBack(fallback);
+        return MessageFormat.format(linkHTML, cleanId, getCleanResourceName(cleanId));
+    }
+
+    /**
+     * Embeds a resource file and adds a fall-back link to the Sakai resource.
+     *
+     * @param book
+     * @param cr
+     * @param spi
+     * @return String HTML tag with a link to resource
+     * @throws ServerOverloadException
+     */
+    private String embedResourceFile(EpubBook book, ContentResource cr, SimplePageItem spi, String linkText) throws ServerOverloadException {
+        String cleanId = spi.getSakaiId().replaceFirst("/", "").replace(" ", "_");
+        Content content = book.addContent(cr.getContent(), null, cleanId, false, true);
+        content.setLinear(false);
+        Content fallback = book.addTextContent(cleanId, "fallback/" + cleanId + ".xhtml",
+                MessageFormat.format(linkHTML, getValidFilename(cleanId), linkText));
+        fallback.setToc(false);
+        content.setFallBack(fallback);
+        return MessageFormat.format(embeddedPlainLinkHTML, cleanId, linkText);
+    }
+
+    /**
+     * Embeds a PDF OutputStream and adds a fall-back link to the Sakai
+     * resource.
+     *
+     * @param book
+     * @param ByteArrayOutputStream
+     * @param spi
+     * @return String HTML tag with a link to resource
+     * @throws ServerOverloadException
+     */
+    private String embedPDFOutputStreamContent(EpubBook book, ByteArrayOutputStream os, SimplePageItem spi) throws ServerOverloadException {
+        String cleanId = spi.getSakaiId().replaceFirst("/", "").replace(" ", "_");
+        try {
+            Content content = book.addContent(os.toByteArray(), null, cleanId, false, true);
+            content.setLinear(false);
+            Content fallback = book.addTextContent(cleanId, "fallback/" + cleanId + ".xhtml",
+                    MessageFormat.format(linkHTML, ServerConfigurationService.getAccessUrl().concat("/content").concat(getValidFilename(cleanId)),
+                            getValidFilename(cleanId)));
+            fallback.setToc(false);
+            content.setFallBack(fallback);
+        } catch (Exception e) {
+            handleError(
+                    "ERROR in Epub Exporter! The PDF could not be embedded ".concat(spi.getSakaiId()).concat("."),
+                    "simplepage.epub.error.creating.resource",
+                    e);
+        }
+        return MessageFormat.format(linkHTML, cleanId, getCleanResourceName(cleanId));
+    }
+
+    /**
+     * Adds an ContentResource image to the EPUB book
+     *
+     * @param book
+     * @param cr
+     * @param spi
+     * @throws ServerOverloadException
+     */
+    private String createContentResourceImageHTML(EpubBook book, ContentResource cr, SimplePageItem spi) throws ServerOverloadException {
+        String href = getValidFilename(spi.getSakaiId().replaceFirst("/", ""));
+        book.addContent(cr.getContent(), null, href, false, false);
+        return MessageFormat.format(sizedImageHTML, href, getDimensionAttribute(spi));
+    }
+
+    /**
+     * Adds an ContentResource image to the EPUB book
+     *
+     * @param book
+     * @param cr
+     * @param spi
+     * @throws ServerOverloadException
+     */
+    private String createContentResourceHTML(EpubBook book, ContentResource cr, String filename, String linkText) throws ServerOverloadException {
+        String href = getValidFilename(filename.replaceFirst("/", ""));
+        book.addContent(cr.getContent(), null, href, false, false);
+        return MessageFormat.format(plainLinkHTML, href, linkText);
+    }
+
+    /**
+     * Builds the HTML attribute for height and width from the SimplePageItem
+     * height and width properties
+     *
+     * @param spi
+     * @return
+     */
+    private String getDimensionAttribute(SimplePageItem spi) {
+        String attr = "";
+        if (!StringUtils.isEmpty(spi.getHeight())) {
+            attr = attr.concat("height='" + spi.getHeight() + "'");
+        } else if (!StringUtils.isEmpty(spi.getWidth())) {
+            attr = attr.concat("width='" + spi.getWidth() + "'");
+        }
+        return attr;
+    }
+
+    /**
+     * Adds an ContentResource video/audio to the EPUB book
+     *
+     * @param book
+     * @param cr
+     * @param spi
+     * @param string
+     * @throws ServerOverloadException
+     */
+    private String embedMultiMediaContentResource(EpubBook book, ContentResource cr, SimplePageItem spi, String type) throws ServerOverloadException {
+        String resourceLink = ServerConfigurationService.getAccessUrl().concat("/content").concat(spi.getSakaiId());
+        book.addContent(cr.getContent(), null, spi.getSakaiId().replaceFirst("/", ""), false, false);
+        String contentType = cr.getContentType();
+        return MessageFormat.format(((type.equals("video")) ? html5VideoTag : html5AudioTag), spi.getSakaiId().replaceFirst("/", ""),
+                contentType, resourceLink, resourceLink);
+    }
+
+    /**
+     * Adds an ContentResource video/audio to the EPUB book
+     *
+     * @param book
+     * @param cr
+     * @param filename
+     * @param string
+     * @throws ServerOverloadException
+     */
+    private String embedMultiMediaContentResource(EpubBook book, ContentResource cr, String filename, String type) throws ServerOverloadException {
+        String resourceLink = ServerConfigurationService.getAccessUrl().concat("/content").concat(filename);
+        book.addContent(cr.getContent(), null, filename, false, false);
+        String contentType = cr.getContentType();
+        return MessageFormat.format(((type.equals("video")) ? html5VideoTag : html5AudioTag), filename,
+                contentType, resourceLink, resourceLink);
+    }
+
+    /**
+     * Creates the Forum topic Resource file with a link
+     *
+     * @param spi
+     * @param site
+     */
+    private String createForumTopic(SimplePageItem spi, Site site) {
+        return addSakaiToollinkToContent(dataExportService.getForumTopicURL(spi, site), dataExportService.getForumTopicTitle(spi));
+    }
+
+    /**
+     * Adds SimplePageItem content of Question type to the EPUB document
+     *
+     * @param book
+     * @param spi
+     * @param params
+     * @param site
+     */
+    private String createQuestion(SimplePageItem spi, ExportEpubViewParameters params, Site site, StringBuilder jsContent) {
+        if (null != spi.getGradebookId()) {
+            Collection<ToolConfiguration> tools = site.getTools("sakai.lessonbuildertool");
+            String toolId = "";
+            SimplePage simplePage = dataExportService.getLessonData(params.getPageId());
+            for (ToolConfiguration tool : tools) {
+                if (simplePage.getTitle().equals(tool.getTitle())) {
+                    toolId = tool.getId();
+                    break;
+                }
+            }
+            if (StringUtils.isEmpty(toolId)) {
+                return "";
+            }
+            String url = ServerConfigurationService.getToolUrl() + "/" + toolId
+                    + "/ShowPage?returnView=#itemContainer::itemTable::item:" + (spi.getSequence() - 1) + ":";
+            return MessageFormat.format(linkHTML, url, "Question : " + spi.getAttribute("questionText"));
+        } else {
+            return getQuestionHTML(spi, jsContent);
+        }
+    }
+
+    /**
+     * Creates a byte[] of the Question type
+     *
+     * @param spi
+     * @return
+     */
+    private String getQuestionHTML(SimplePageItem spi, StringBuilder jsContent) {
+        // Question Text
+        String questionHtml = "<h3 style=\"color:grey\">" + spi.getAttribute("questionText") + "</h3><br>";
+        String questionType = spi.getAttribute("questionType");
+        if (StringUtils.equals(questionType, "shortanswer")) {
+            questionHtml = questionHtml.concat(buildShortAnswerQuestion(spi, jsContent));
+        } else if (StringUtils.equals(questionType, "multipleChoice")) {
+            questionHtml = questionHtml.concat(buildMultipleChoiceQuestion(spi, jsContent));
+        }
+        return questionHtml;
+    }
+
+    /**
+     * Appends HTML for Short Answer Questions
+     *
+     * @param spi
+     */
+    private String buildShortAnswerQuestion(SimplePageItem spi, StringBuilder jsContent) {
+        StringBuilder questionHtml = new StringBuilder();
+
+        String shortAnswerInputId = "itemContainer::itemTable::item:" + spi.getId() + ":shortanswerInput";
+        String answerOutputId = "itemContainer::itemTable::item:" + spi.getId() + ":answerOutput";
+        addShortQuestionHiddenContent(spi, questionHtml, shortAnswerInputId, answerOutputId, jsContent);
+
+        questionHtml.append("Answer : ");
+        //Construct answer input tag 
+        questionHtml.append("<input type=\"text\" value=\"\" id=\"").append(shortAnswerInputId).append("\" onkeydown=\"onkeydownFunc(event)\">\n");
+        //Add Answer Text Label
+        questionHtml.append("<p><label id=\"").append(answerOutputId).append("\"></label></p>\n");
+        //Construct Submit input tag 
+        questionHtml.append("<input type=\"button\" value=\"Check Answer\" onclick=\"checkShortAnswer").append(spi.getId()).append("()\"><br><br>");
+        //addGradingPaneLink(spi, html);
+        return questionHtml.toString();
+    }
+
+    /**
+     * Adds the hidden fields for short questions
+     *
+     * @param spi
+     * @param html
+     * @param questionAnswerId
+     * @param questionCorrectTextId
+     * @param questionIncorrectTextId
+     * @param shortAnswerInputId
+     * @param answerOutputId
+     */
+    private void addShortQuestionHiddenContent(SimplePageItem spi, StringBuilder html, String shortAnswerInputId, String answerOutputId, StringBuilder jsContent) {
+        String questionAnswerId = "itemContainer::itemTable::item:" + spi.getId() + ":questionAnswer";
+        String questionCorrectTextId = "itemContainer::itemTable::item:" + spi.getId() + ":questionCorrectText";
+        String questionIncorrectTextId = "itemContainer::itemTable::item:" + spi.getId() + ":questionIncorrectText";
+        addJavascriptShortAnswerFunction(spi.getId(), questionAnswerId, questionCorrectTextId, questionIncorrectTextId, shortAnswerInputId, answerOutputId, jsContent);
+        String answersArrayStr = getAnswersArrayStr(spi);
+        //Add questionAnswer hidden input
+        html.append(MessageFormat.format(hiddenInput, questionAnswerId, answersArrayStr)).append("\n");
+        //Add questionCorrectText hidden input
+        html.append(MessageFormat.format(hiddenInput, questionCorrectTextId, spi.getAttribute("questionCorrectText"))).append("\n");
+        //Add questionIncorrectText hidden input
+        html.append(MessageFormat.format(hiddenInput, questionIncorrectTextId, spi.getAttribute("questionIncorrectText"))).append("\n");
+    }
+
+    /**
+     * Adds short question JavaScript to the jsContent
+     *
+     * @param html
+     * @param id
+     * @param questionAnswerId
+     * @param questionCorrectTextId
+     * @param questionIncorrectTextId
+     * @param shortAnswerInputId
+     * @param answerOutputId
+     */
+    private void addJavascriptShortAnswerFunction(long id, String questionAnswerId,
+            String questionCorrectTextId, String questionIncorrectTextId, String shortAnswerInputId, String answerOutputId, StringBuilder jsContent) {
+        jsContent.append("	function checkShortAnswer").append(id).append("() {\n");
+        jsContent.append("		document.getElementById(\"").append(answerOutputId).append("\").innerHTML = \"\";\n");
+        jsContent.append("		var inputAnswer = document.getElementById(\"").append(shortAnswerInputId).append("\").value;\n");
+        jsContent.append("		if(inputAnswer == \"\" || inputAnswer == null) {\n");
+        jsContent.append("			return;\n");
+        jsContent.append("		}\n");
+        jsContent.append("		var answers = document.getElementById(\"").append(questionAnswerId).append("\").value;\n");
+        jsContent.append("		var answersArr = answers.split(',');\n");
+        jsContent.append("		var answersArray = JSON.parse(JSON.stringify(answersArr));\n");
+        jsContent.append("		var count = 0;\n");
+        jsContent.append("		while (count != answersArray.length) {\n");
+        jsContent.append("			if(answersArray[count] == (inputAnswer)) {\n");
+        jsContent.append("				if( document.getElementById(\"").append(questionCorrectTextId).append("\").value == \"\" ) {\n");
+        jsContent.append("					document.getElementById(\"").append(answerOutputId).append("\").innerHTML = \"Correct\";\n");
+        jsContent.append("					return;\n");
+        jsContent.append("				}else{ \n");
+        jsContent.append("					document.getElementById(\"").append(answerOutputId).append("\").innerHTML = document.getElementById(\"").append(questionCorrectTextId).append("\").value;\n");
+        jsContent.append("					return;\n");
+        jsContent.append("				}\n");
+        jsContent.append("			}\n");
+        jsContent.append("			count = count + 1;\n");
+        jsContent.append("		}\n");
+        jsContent.append("		if(document.getElementById(\"").append(questionIncorrectTextId).append("\").value == \"\"){\n");
+        jsContent.append("			document.getElementById(\"").append(answerOutputId).append("\").innerHTML = \"Incorrect\";\n");
+        jsContent.append("		}else{\n");
+        jsContent.append("			document.getElementById(\"").append(answerOutputId).append("\").innerHTML = document.getElementById(\"").append(questionIncorrectTextId).append("\").value;\n");
+        jsContent.append("		}\n");
+        jsContent.append("	}\n");
+        jsContent.append("\n");
+    }
+
+    /**
+     * Return an Array in String format
+     *
+     * @param spi
+     * @return
+     */
+    private String getAnswersArrayStr(SimplePageItem spi) {
+        StringBuilder answersArrayStr = new StringBuilder();
+        String questionAnswer = spi.getAttribute("questionAnswer");
+        String[] answers = questionAnswer.split("\\n");
+        for (String answer : answers) {
+            answersArrayStr.append(answer);
+            answersArrayStr.append(",");
+        }
+        return answersArrayStr.toString().substring(0, answersArrayStr.toString().length() - 1);
+    }
+
+    /**
+     * Appends HTML for Multiple Choice Questions
+     *
+     * @param spi
+     */
+    private String buildMultipleChoiceQuestion(SimplePageItem spi, StringBuilder jsContent) {
+        StringBuilder questionHtml = new StringBuilder();
+        String answerOutputId = "itemContainer::itemTable::item:" + spi.getId() + ":answerOutput";
+        addMultiQuestionHiddenContent(spi, questionHtml, answerOutputId, jsContent);
+        List<Map> answers = (List<Map>) spi.getJsonAttribute("answers");
+        int count = 0;
+        for (Map answerMap : answers) {
+            Long id = (Long) answerMap.get("id");
+            String text = (String) answerMap.get("text");
+            //Construct answer input tag 
+            String inputId = "itemContainer::itemTable::item:" + spi.getId() + ":multipleChoiceAnswer:" + count + ":multipleChoiceAnswerRadio";
+            questionHtml.append("<input id=\"").append(inputId).append("\"  type=\"radio\" value=\"").append(id).append("\" name=\"");
+            //Construct name value
+            questionHtml.append("itemContainer::itemTable::item:").append(spi.getId()).append(":multipleChoiceSelect:-selection").append("\">\n");
+            //Construct answer input label tag
+            questionHtml.append("<label for=\"").append(inputId).append("\">").append(text).append("</label>\n");
+            count += 1;
+            if (count != answers.size()) {
+                questionHtml.append("<br>");
+            }
+        }
+
+        //Add Answer Text Label
+        questionHtml.append("<p><label id=\"").append(answerOutputId).append("\"></label></p>");
+        //Construct Submit input tag 
+        questionHtml.append("<br><input type=\"button\" value=\"Check Answer\" onclick=\"checkMultipleAnswer").append(spi.getId()).append("()\"><br><br>");
+        //addGradingPaneLink(spi, html);		
+        return questionHtml.toString();
+    }
+
+    /**
+     * Adds the hodden content for multi choice questions
+     *
+     * @param spi
+     * @param html
+     */
+    private void addMultiQuestionHiddenContent(SimplePageItem spi, StringBuilder html, String answerOutputId, StringBuilder jsContent) {
+        String questionAnswerId = "itemContainer::itemTable::item:" + spi.getId() + ":questionAnswer";
+        String questionCorrectTextId = "itemContainer::itemTable::item:" + spi.getId() + ":questionCorrectText";
+        String shortAnswerInputId = "itemContainer::itemTable::item:" + spi.getId() + ":shortanswerInput";
+        String questionIncorrectTextId = "itemContainer::itemTable::item:" + spi.getId() + ":questionIncorrectText";
+        addJavascriptMultiAnswerFunction(jsContent, spi.getId(), questionAnswerId, questionCorrectTextId, questionIncorrectTextId, shortAnswerInputId, answerOutputId);
+        String correctAnswerIds = getMultiAnswersCorrectAnswerIds(spi);
+        //Add questionAnswer hidden input
+        html.append(MessageFormat.format(hiddenInput, questionAnswerId, correctAnswerIds)).append("\n");
+        //Add questionCorrectText hidden input
+        html.append(MessageFormat.format(hiddenInput, questionCorrectTextId, spi.getAttribute("questionCorrectText"))).append("\n");
+        //Add questionIncorrectText hidden input
+        html.append(MessageFormat.format(hiddenInput, questionIncorrectTextId, spi.getAttribute("questionIncorrectText"))).append("\n");
+    }
+
+    /**
+     * Appends the JavaScript for multi choice questions
+     *
+     * @param html
+     * @param id
+     * @param questionAnswerId
+     * @param questionCorrectTextId
+     * @param questionIncorrectTextId
+     * @param shortAnswerInputId
+     * @param answerOutputId
+     */
+    private void addJavascriptMultiAnswerFunction(StringBuilder html, long id, String questionAnswerId,
+            String questionCorrectTextId, String questionIncorrectTextId, String shortAnswerInputId, String answerOutputId) {
+        html.append("	function checkMultipleAnswer").append(id).append("() {\n");
+        html.append("		document.getElementById(\"").append(answerOutputId).append("\").innerHTML = \"\"; \n");
+        html.append("		var radioAnswer = document.getElementById(\"").append(questionAnswerId).append("\").value;\n");
+        html.append("		var radioAnswerIds = radioAnswer.split(\",\");\n");
+        html.append("		var count = 0;\n");
+        html.append("		while (count != radioAnswerIds.length) { \n");
+        html.append("			if (document.getElementById(radioAnswerIds[count]).checked) {\n");
+        html.append("			   if(document.getElementById(\"").append(questionCorrectTextId).append("\").value == \"\"){ \n");
+        html.append("			   		document.getElementById(\"").append(answerOutputId).append("\").innerHTML = \"Correct. \"; \n");
+        html.append("			   }else{ \n");
+        html.append("			  document.getElementById(\"").append(answerOutputId).append("\").innerHTML = \"Correct. \" + document.getElementById(\"").append(questionCorrectTextId).append("\").value;\n");
+        html.append("			  break;\n");
+        html.append("			  }\n");
+        html.append("			} else {\n");
+        html.append("				document.getElementById(\"").append(answerOutputId).append("\").innerHTML = \"Incorrect. \" + document.getElementById(\"").append(questionIncorrectTextId).append("\").value;\n");
+        html.append("			}\n");
+        html.append("			count = count + 1;\n");
+        html.append("		}\n");
+        html.append("	}\n");
+        html.append("\n");
+    }
+
+    /**
+     * Return all the correct Multi Answers
+     *
+     * @param spi
+     * @return
+     */
+    private String getMultiAnswersCorrectAnswerIds(SimplePageItem spi) {
+        StringBuilder answerIds = new StringBuilder();
+        List<Map> answers = (List<Map>) spi.getJsonAttribute("answers");
+        boolean oneCorrect = false;
+        for (Map answersMap : answers) {
+            Long id = (Long) answersMap.get("id");
+            Boolean isCorrect = (Boolean) answersMap.get("correct");
+            if (isCorrect && oneCorrect) {
+                answerIds.append(",itemContainer::itemTable::item:").append(spi.getId()).append(":multipleChoiceAnswer:").append((id - 1)).append(":multipleChoiceAnswerRadio");
+            } else if (isCorrect && !oneCorrect) {
+                answerIds.append("itemContainer::itemTable::item:").append(spi.getId()).append(":multipleChoiceAnswer:").append((id - 1)).append(":multipleChoiceAnswerRadio");
+                oneCorrect = true;
+            }
+        }
+        return answerIds.toString();
+    }
+
+    /**
+     * Save the EPUB document to Resources
+     *
+     * @param book
+     * @param siteId
+     * @return the name of the saved resource
+     * @throws Exception
+     */
+    private ContentResourceEdit saveEPUBFileInResources(EpubBook book, String siteId, String lessonName) throws Exception {
+        // We do not want to save to file first so we use a ByteArrayOutputStream
+        ByteArrayOutputStream bookByteOutStream = new ByteArrayOutputStream();
+        book.writeToStream(bookByteOutStream);
+        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmssSSS");
+        String fileName = lessonName.concat("_").concat(sdf.format(new Date()));
+        byte[] fileData = bookByteOutStream.toByteArray();
+        String collectionId = contentHostingService.getSiteCollection(siteId);
+        ContentCollection contentCollection = contentHostingService.getCollection(collectionId);
+        ContentResourceEdit cre = contentHostingService.addResource(contentCollection.getId(), fileName, ".epub", 5);
+        cre.setContent(fileData);
+        cre.setContentLength(fileData.length);
+        contentHostingService.commitResource(cre);
+        return cre;
+    }
+
+    /**
+     * Checks the toolSession to determine whether there are errors
+     *
+     * @return
+     */
+    private boolean hasErrors() {
+        ToolSession toolSession = SessionManager.getCurrentToolSession();
+        if (toolSession == null) {
+            return false;
+        }
+        List<String> errors = (List<String>) toolSession.getAttribute("lessonbuilder.errors");
+        if (null == errors) {
+            return false;
+        }
+        return !errors.isEmpty();
+    }
+
+    /**
+     * Standard method of handling exceptions within the EPUB tool
+     *
+     * @param errorMessage - the message which will be displayed to the user
+     * @param e - The exception object which will be logged and used for the
+     * session errors
+     */
+    private String handleError(String errorMessage, String errorKey, Exception e) {
+        String errorString = "";
+        log.error(errorMessage, e);
+        if (addErrorToDoc) {
+            errorString = MessageFormat.format(styledError, errorMessage);
+        }
+        if (addErrorToSession) {
+            if (errorMessage == null) {
+                errorKey = messageLocator.getMessage(errorKey);
+            } else {
+                errorKey = messageLocator.getMessage(errorKey).concat(" : ").concat(errorMessage);
+            }
+            exportHelper.setErrMessage(errorKey, true, "simplepage.epub.error.header");
+        }
+        return errorString;
+    }
+
+    /**
+     * Process the sub pages linked on a lesson
+     *
+     * @param book
+     * @param site
+     * @param params
+     * @param pageIndex
+     * @param content
+     * @param cssList
+     * @throws Exception
+     */
+    public void processSubPages(EpubBook book, Site site, ExportEpubViewParameters params, List<ExportPageStructure> pageIndex, StringBuilder content, List<String> cssList, String lessonName) throws Exception {
+        StringBuilder jsContent = new StringBuilder();
+        for (ExportPageStructure nses : pageIndex) {
+            content = new StringBuilder();
+            SimplePageItem spi = nses.getSpi();
+            SimplePage subPageData = dataExportService.getLessonData(Long.parseLong(spi.getSakaiId()));
+            List<SimplePageItem> simplePageItemList = dataExportService.getPageItems(subPageData.getPageId());
+            if (!nses.isHasBeenRendered()) {
+                //content.append(addSimplePageNameHeader(spi));
+                addLessonContent(book, site, params, simplePageItemList, content, jsContent, pageIndex, cssList, lessonName);
+                TocLink tocLink = new TocLink(getValidFilename(subPageData.getTitle()).concat(".xhtml"),
+                        StringUtils.repeat(" - ", getIndentationLevel(subPageData, 0)).concat(subPageData.getTitle()), null);
+                book.getTocLinks().add(tocLink);
+                populateCssList(subPageData, cssList);
+                outputSection(book, subPageData.getTitle(), content.toString(), site, jsContent.toString(), cssList);
+                updateRenderedPages(pageIndex, spi.getId(), subPageData.getPageId());
+            }
+        }
+    }
+
+    private void populateCssList(SimplePage sp, List<String> cssList) {
+        if (sp != null) {
+            if (null != sp.getCssSheet() && !"null".equals(sp.getCssSheet())) {
+                cssList.add(sp.getCssSheet());
+            }
+        }
+    }
+
+    /**
+     * When given a SimplePageItem determine whether this resource is a
+     * e-learning tool or a content authoring tool
+     *
+     * @param SimplePageItem
+     */
+    private boolean isAuthoringTool(SimplePageItem spi, String type) {
+        try {
+            ContentResource rs = contentHostingService.getResource(spi.getSakaiId());
+            type = rs.getContentType();
+            ContentCollection cc = rs.getContainingCollection();
+            for (ContentEntity ce : cc.getMemberResources()) {
+                if (ce.getId().contains(EDGE_CHECK)) {
+                    type = ADOBE_EDGE;
+                    return true;
+                }
+                if (ce.getId().contains(ARTICULATE_META_CHECK)) {
+                    ContentResource cr = contentHostingService.getResource(ce.getId());
+                    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
+                    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
+                    Document doc = dBuilder.parse(new ByteArrayInputStream(cr.getContent()));
+                    NodeList nodes = doc.getElementsByTagName(ARTICULATE_TAG_CHECK);
+                    Element element = (Element) nodes.item(0);
+                    if (element.hasAttribute("name")) {
+                        String val = element.getAttribute("name");
+                        if (ARTICULATE_CHECK.equals(val)) {
+                            type = ARTICULATE;
+                            return true;
+                        }
+                    }
+                }
+            }
+        } catch (Exception e) {
+            log.error(e);
+        }
+        return false;
+    }
+
+    /**
+     * Add E-Learning content to the EPUB file This method simple sets the
+     * correct folder depth. When an E-Learning package is imported into Sakai.
+     * It is a zip file which is uploaded into the resources tool. In the lesson
+     * tool a user must now choose the embed content on page option > Click the
+     * "Or select an existing resource" link > Go into the Instructor_s Info
+     * folder > Go two folders down (Edge) one folder (Articulate) then select
+     * the the html file > Click Continue Adobe_Edge has a data structure of zip
+     * file name for folder name, then repeats this in the child level. This
+     * child folder then contains all the resources Articulate has a data
+     * structure of zip file name for folder name This child folder then
+     * contains all the resources
+     *
+     * @param spi
+     * @param book
+     * @param type
+     * @return
+     */
+    private String addElearningContent(SimplePageItem spi, EpubBook book, String type) {
+        try {
+            ContentResource rs = contentHostingService.getResource(spi.getSakaiId());
+            type = rs.getContentType();
+            ContentCollection cc = rs.getContainingCollection();
+            if (ADOBE_EDGE.equals(type)) {
+                cc = cc.getContainingCollection();
+            }
+            addAllContentOfCollection(book, cc, cc.isCollection());
+        } catch (Exception ex) {
+            log.error(ex);
+        }
+        String fileLocation = spi.getSakaiId().replaceFirst("/", "");
+        return MessageFormat.format(epubIframe, fileLocation, spi.getName(), "", spi.getName());
+    }
+
+    /**
+     *
+     * @param book
+     * @param resource
+     * @param isColletion
+     */
+    private void addAllContentOfCollection(EpubBook book, Object resource, Boolean isColletion) {
+        if (isColletion) {
+            ContentCollection cc = (ContentCollection) resource;
+            for (ContentEntity ce : cc.getMemberResources()) {
+                addAllContentOfCollection(book, ce, ce.isCollection());
+            }
+        } else {
+            ContentResource rs = (ContentResource) resource;
+            try {
+                book.addContent(rs.getContent(), rs.getContentType(), rs.getId(), false, false);
+            } catch (Exception e) {
+                log.error(e);
+            }
+        }
+    }
+
+    /**
+     * Given a filename, replaces illegal XML and File system characters with an
+     * underscore
+     *
+     * @param currentName
+     * @return
+     */
+    private String getValidFilename(String currentName) {
+        return currentName.replaceAll("[^a-zA-Z0-9\\.\\-]", "_");
+    }
+
+    /**
+     * Sets the DataExportService instance
+     *
+     * @param dataExportService
+     */
+    public void setDataExportService(DataExportService dataExportService) {
+        this.dataExportService = dataExportService;
+    }
+
+    /**
+     * @param contentHostingService the contentHostingService to set
+     */
+    public void setContentHostingService(ContentHostingService contentHostingService) {
+        this.contentHostingService = contentHostingService;
+    }
+
+    /**
+     * @param htmlCleaner the htmlCleaner to set
+     */
+    public void setHtmlCleaner(HtmlCleanerUtil htmlCleaner) {
+        this.htmlCleaner = htmlCleaner;
+    }
+
+    /**
+     * Setter to inject MessageLocator
+     *
+     * @param messageLocator
+     */
+    public void setMessageLocator(MessageLocator messageLocator) {
+        this.messageLocator = messageLocator;
+    }
+
+    /**
+     * @param coverImage the coverImage to set
+     */
+    public void setCoverImage(String coverImage) {
+        this.coverImage = coverImage;
+    }
+
+    /**
+     * @param imageExtensions the imageExtensions to set
+     */
+    public void setImageExtensions(List<String> imageExtensions) {
+        this.imageExtensions = imageExtensions;
+    }
+
+    /**
+     * @param linkHTML the linkHTML to set
+     */
+    public void setLinkHTML(String linkHTML) {
+        this.linkHTML = linkHTML;
+    }
+
+    /**
+     * @param html5VideoTag the html5VideoTag to set
+     */
+    public void setHtml5VideoTag(String html5VideoTag) {
+        this.html5VideoTag = html5VideoTag;
+    }
+
+    /**
+     * @param sizedImageHTML the sizedImageHTML to set
+     */
+    public void setSizedImageHTML(String sizedImageHTML) {
+        this.sizedImageHTML = sizedImageHTML;
+    }
+
+    /**
+     * @param html5AudioTag the HTML5AudioTag to set
+     */
+    public void setHtml5AudioTag(String html5AudioTag) {
+        this.html5AudioTag = html5AudioTag;
+    }
+
+    /**
+     * @param exportHelper the exportHelper to set
+     */
+    public void setExportHelper(ExportHelper exportHelper) {
+        this.exportHelper = exportHelper;
+    }
+
+    /**
+     * Checks whether a simple page item of type text, has links to pdf or
+     * videos inside of it. E.G a video link pointing to a video in the
+     * resources tool of the site, within a html text editor It will add the
+     * resource to the epub and update the link to point to the correct source
+     * in the epub
+     *
+     * @param book
+     * @param spi
+     * @param site
+     * @param lessonName
+     * @return
+     */
+    private SimplePageItem hasImagePdfOrVideo(EpubBook book, SimplePageItem spi, Site site, String lessonName) {
+        org.jsoup.nodes.Document doc = Jsoup.parse(spi.getHtml(), "UTF-8");
+        Elements links = doc.select("a[href]");
+        for (org.jsoup.nodes.Element link : links) {
+            if (link.attr("href").contains(".pdf")) {
+                String linkHref = link.attr("href");
+                try {
+                    if (isLinkToLocalResource(site, link)) {
+                        ContentResource cr = getContentResourceFromURL(linkHref, false);
+                        String linkText = link.text();
+                        String fullLink = linkHref;
+                        linkHref = java.net.URLDecoder.decode(linkHref.substring(linkHref.lastIndexOf("/group"), linkHref.length()), "UTF-8");
+                        linkHref = linkHref.replaceFirst("/", "");
+                        SimplePageItem spItem = spi;
+                        spItem.setSakaiId(cr.getReference());
+                        String embedRes = embedResourceFile(book, cr, spItem, linkText);
+                        if (addExternalLinkToPDF) {
+                            embedRes = embedRes.replace("</p>", "") + MessageFormat.format(plainLinkHTML, fullLink, "&nbsp;(View Online)</p>");
+                        }
+                        spi.setHtml(spi.getHtml().replace(link.toString(), embedRes));
+                    }
+                } catch (Exception e) {
+                    log.error("unable to embed PDF", e);
+                }
+            }
+            if (imageExtensions.contains(FilenameUtils.getExtension(link.attr("href"))) && link.attr("data-pre-embedded").isEmpty()) {
+                String linkHref = link.attr("href");
+                try {
+                    if (isLinkToLocalResource(site, link) && link.attr("data-pre-embedded").isEmpty()) {
+                        ContentResource cr = getContentResourceFromURL(linkHref, false);
+                        String linkText = link.text();
+                        linkHref = java.net.URLDecoder.decode(linkHref.substring(linkHref.lastIndexOf("/group"), linkHref.length()), "UTF-8");
+                        linkHref = linkHref.replaceFirst("/", "");
+                        SimplePageItem spItem = spi;
+                        spItem.setSakaiId(cr.getReference());
+                        String embedRes = embedResourceFile(book, cr, spItem, linkText);
+                        spi.setHtml(spi.getHtml().replace(link.toString(), embedRes));
+                    }
+                } catch (Exception e) {
+                    log.error("unable to embed Image", e);
+                }
+            }
+        }
+        return spi;
+    }
+
+    /**
+     * Determine if a url link is pointing to a local Resource
+     *
+     * @param site
+     * @param link
+     * @return boolean
+     * @throws MalformedURLException
+     */
+    private boolean isLinkToLocalResource(Site site, org.jsoup.nodes.Element link) throws MalformedURLException {
+        if (!link.attr("data-pre-embedded").isEmpty()) {
+            return true;
+        }
+        return new URL(site.getUrl()).getHost().equals(new URL(link.attr("href")).getHost());
+    }
+
+    /**
+     * Given a URL to a local resource. Determine the proper SakaiId and
+     * retrieve the ContentResource passing it by reference returning the
+     * changed URL, which now points to the file location inside the epub
+     *
+     * @param linkHref
+     * @param cr
+     * @return
+     * @throws UnsupportedEncodingException
+     * @throws PermissionException
+     * @throws IdUnusedException
+     * @throws TypeException
+     */
+    private ContentResource getContentResourceFromURL(String linkHref, boolean isVideo) throws UnsupportedEncodingException, PermissionException, IdUnusedException, TypeException {
+        linkHref = java.net.URLDecoder.decode(linkHref.substring(linkHref.lastIndexOf("/group"), linkHref.length()), "UTF-8");
+        if (isVideo) {
+            linkHref = linkHref.replaceFirst("/", "");
+        }
+        ContentResource cr = contentHostingService.getResource(linkHref);
+        return cr;
+    }
+}
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/pdfimport/PdfImport.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/pdfimport/PdfImport.java
new file mode 100644
index 0000000..d9d4e53
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/pdfimport/PdfImport.java
@@ -0,0 +1,26 @@
+package org.sakaiproject.lessonbuildertool.pdfimport;
+
+import java.util.logging.Logger;
+import javax.servlet.http.HttpServletResponse;
+import org.sakaiproject.lessonbuildertool.tool.view.ImportPdfViewParameters;
+
+/**
+ *
+ * @author OpenCollab
+ */
+public class PdfImport {
+
+    private static final Logger LOG = Logger.getLogger(PdfImport.class.getName());
+    /**
+     * performs the
+     *
+     * @param sid
+     * @param httpServletResponse
+     * @param params
+     */
+    public void doImport(String sid, HttpServletResponse httpServletResponse,
+            ImportPdfViewParameters params) {
+        StringBuilder lessonName = new StringBuilder();
+        LOG.info("here");
+    }
+}
\ No newline at end of file
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/resolver/MultiCommonsMultipartResolver.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/resolver/MultiCommonsMultipartResolver.java
index 5d17168..1100670 100644
--- a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/resolver/MultiCommonsMultipartResolver.java
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/resolver/MultiCommonsMultipartResolver.java
@@ -17,6 +17,8 @@ import java.nio.charset.Charset;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 /**
  * Created by neelam on 8/3/2015.
@@ -24,6 +26,7 @@ import java.util.Map;
  * Used this link to fix the problem : Reference : http://dhruba.name/2008/12/27/implementing-single-and-multiple-file-multipart-uploads-using-spring-25/
  */
 public class MultiCommonsMultipartResolver extends CommonsMultipartResolver {
+    private final Log log = LogFactory.getLog(MultiCommonsMultipartResolver.class);
     public MultiCommonsMultipartResolver(){
     }
     public MultiCommonsMultipartResolver(ServletContext servletContext) {
@@ -46,10 +49,8 @@ public class MultiCommonsMultipartResolver extends CommonsMultipartResolver {
                         value = fileItem.getString(partEncoding);
                     }
                     catch (UnsupportedEncodingException ex) {
-                        if (logger.isWarnEnabled()) {
-                            logger.warn("Could not decode multipart item '" + fileItem.getFieldName() +
-                                    "' with encoding '" + partEncoding + "': using platform default");
-                        }
+                        log.warn("Could not decode multipart item '" + fileItem.getFieldName() +
+                            "' with encoding '" + partEncoding + "': using platform default");
                         value = fileItem.getString();
                     }
                 }
@@ -72,11 +73,9 @@ public class MultiCommonsMultipartResolver extends CommonsMultipartResolver {
                 // multipart file field
                 CommonsMultipartFile file = new CommonsMultipartFile(fileItem);
                 multipartFiles.add(fileItem.getName(), file);
-                if (logger.isDebugEnabled()) {
-                    logger.debug("Found multipart file [" + file.getName() + "] of size " + file.getSize() +
-                            " bytes with original filename [" + file.getOriginalFilename() + "], stored " +
-                            file.getStorageDescription());
-                }
+                log.debug("Found multipart file [" + file.getName() + "] of size " + file.getSize() +
+                    " bytes with original filename [" + file.getOriginalFilename() + "], stored " +
+                    file.getStorageDescription());
             }
         }
         return new MultipartParsingResult(multipartFiles, multipartParameters, multipartParameterContentTypes);
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/service/DataExportServiceImpl.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/service/DataExportServiceImpl.java
new file mode 100644
index 0000000..b93f306
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/service/DataExportServiceImpl.java
@@ -0,0 +1,186 @@
+package org.sakaiproject.lessonbuildertool.service;
+
+import java.util.List;
+import org.sakaiproject.api.app.messageforums.MessageForumsForumManager;
+import org.sakaiproject.api.app.messageforums.Topic;
+import org.sakaiproject.assignment.api.Assignment;
+import org.sakaiproject.assignment.cover.AssignmentService;
+import org.sakaiproject.component.cover.ComponentManager;
+import org.sakaiproject.component.cover.ServerConfigurationService;
+import org.sakaiproject.content.api.ContentHostingService;
+import org.sakaiproject.content.api.ContentResource;
+import org.sakaiproject.exception.IdUnusedException;
+import org.sakaiproject.exception.PermissionException;
+import org.sakaiproject.lessonbuildertool.SimplePage;
+import org.sakaiproject.lessonbuildertool.SimplePageItem;
+import org.sakaiproject.lessonbuildertool.model.SimplePageToolDao;
+import org.sakaiproject.site.api.Site;
+import org.sakaiproject.site.api.SiteService;
+import org.sakaiproject.site.api.ToolConfiguration;
+import org.sakaiproject.tool.assessment.data.dao.assessment.PublishedAssessmentData;
+import org.sakaiproject.tool.assessment.facade.PublishedAssessmentFacadeQueriesAPI;
+
+/**
+ * Process data for Lesson tool and provide the various exporters a common
+ * location for retrieving and parsing the same data
+ *
+ * @author OpenCollab
+ *
+ */
+public class DataExportServiceImpl implements DataExportService {
+
+    private SimplePageToolDao simplePageToolDao;
+    private ContentHostingService contentHostingService;
+    private SiteService siteService;
+    private PublishedAssessmentFacadeQueriesAPI publishedAssessmentFacadeQueries;
+    private final MessageForumsForumManager forumManager = (MessageForumsForumManager) ComponentManager.get("org.sakaiproject.api.app.messageforums.MessageForumsForumManager");
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public List<SimplePage> getLessonStructure(String siteId) {
+        return simplePageToolDao.getSitePages(siteId);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public SimplePage getLessonData(Long pageId) {
+        return simplePageToolDao.getPage(pageId);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public List<SimplePageItem> getPageItems(long pageId) {
+        return simplePageToolDao.findItemsOnPage(pageId);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public ContentResource getContentResourceData(String resourceId) throws Exception {
+        return contentHostingService.getResource(resourceId);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public Site getSite(String siteId) throws IdUnusedException {
+        if (null == siteService) {
+            return null;
+        }
+        return siteService.getSite(siteId);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public Assignment getAssignment(SimplePageItem spi) throws IdUnusedException, PermissionException {
+        return AssignmentService.getAssignment(spi.getSakaiId());
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public String getAssignmentTitle(SimplePageItem spi) throws IdUnusedException, PermissionException {
+        return getAssignment(spi).getTitle();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public String getAssignmentURL(SimplePageItem spi, Site site) throws IdUnusedException, PermissionException {
+        ToolConfiguration tool = site.getToolForCommonId("sakai.assignment.grades");
+        return ServerConfigurationService.getToolUrl() + "/" + tool.getId() + "?assignmentReference=/assignment/a/"
+                + site.getId() + "/" + spi.getSakaiId() + "&panel=Main&sakai_action=doView_submission";
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public PublishedAssessmentData getAssessment(SimplePageItem spi) {
+        String sakaiId = spi.getSakaiId();
+        String assessmentIdString
+                = sakaiId.lastIndexOf("/") == -1 ? sakaiId : sakaiId.substring(sakaiId.lastIndexOf("/") + 1);
+        Long assessmentId = Long.parseLong(assessmentIdString);
+        return publishedAssessmentFacadeQueries.loadPublishedAssessment(assessmentId);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public String getAssessmentTitle(SimplePageItem spi) {
+        return getAssessment(spi).getTitle();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public String getAssessmentURL(SimplePageItem spi, Site site) {
+        ToolConfiguration tool = site.getToolForCommonId("sakai.lessonbuildertool");
+        return ServerConfigurationService.getToolUrl() + "/" + tool.getId()
+                + "/ShowItem?itemId=" + spi.getId() + "&source="
+                + "%2Fsamigo-app%2Fservlet%2FLogin%3Fid%3D"
+                + getAssessment(spi).getAssessmentMetaDataByLabel("ALIAS");
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public Topic getForumTopic(SimplePageItem spi) {
+        String sakaiId = spi.getSakaiId();
+        String assessmentIdString
+                = sakaiId.lastIndexOf("/") == -1 ? sakaiId : sakaiId.substring(sakaiId.lastIndexOf("/") + 1);
+        Long assessmentId = Long.parseLong(assessmentIdString);
+        return forumManager.getTopicById(true, assessmentId);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public String getForumTopicTitle(SimplePageItem spi) {
+        return getForumTopic(spi).getTitle();
+    }
+
+    @Override
+    public String getForumTopicURL(SimplePageItem spi, Site site) {
+        ToolConfiguration tool = site.getToolForCommonId("sakai.lessonbuildertool");
+        return ServerConfigurationService.getToolUrl() + "/" + tool.getId()
+                + "/ShowItem?itemId=" + spi.getId() + "&source=%2Fdirect" + spi.getSakaiId();
+    }
+
+    // Setters and Getters
+    public void setSimplePageToolDao(Object dao) {
+        simplePageToolDao = (SimplePageToolDao) dao;
+    }
+
+    public void setContentHostingService(ContentHostingService chs) {
+        contentHostingService = chs;
+    }
+
+    public void setSiteService(SiteService siteService) {
+        this.siteService = siteService;
+    }
+
+    /**
+     * @param publishedAssessmentFacadeQueries the
+     * publishedAssessmentFacadeQueries to set
+     */
+    public void setPublishedAssessmentFacadeQueries(PublishedAssessmentFacadeQueriesAPI publishedAssessmentFacadeQueries) {
+        this.publishedAssessmentFacadeQueries = publishedAssessmentFacadeQueries;
+    }
+}
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/beans/ReportHandlerHook.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/beans/ReportHandlerHook.java
index 682824f..246766e 100644
--- a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/beans/ReportHandlerHook.java
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/beans/ReportHandlerHook.java
@@ -14,15 +14,36 @@
 
 package org.sakaiproject.lessonbuildertool.tool.beans;
 
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.PrintStream;
+import java.io.PrintWriter;
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.servlet.http.Cookie;
+import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.sakaiproject.lessonbuildertool.tool.view.ExportCCViewParameters;
+import org.sakaiproject.lessonbuildertool.tool.view.ImportDocxViewParameters;
+import org.sakaiproject.lessonbuildertool.tool.view.ExportDocxViewParameters;
+import org.sakaiproject.lessonbuildertool.tool.view.ExportEpubViewParameters;
 import org.sakaiproject.lessonbuildertool.ccexport.CCExport;
+import org.sakaiproject.lessonbuildertool.docxexport.DocxExport;
+import org.sakaiproject.lessonbuildertool.epubexport.EpubExport;
+import org.sakaiproject.tool.api.ToolSession;
+import org.sakaiproject.tool.cover.SessionManager;
 import org.sakaiproject.tool.cover.ToolManager;
 import org.sakaiproject.authz.cover.SecurityService;
 import org.sakaiproject.lessonbuildertool.SimplePage;
+import org.sakaiproject.lessonbuildertool.docximport.DocxImport;
+import org.sakaiproject.lessonbuildertool.pdfimport.PdfImport;
+import org.sakaiproject.lessonbuildertool.tool.view.ImportPdfViewParameters;
+import org.sakaiproject.lessonbuildertool.util.ApplicationContextProvider;
 
 import uk.org.ponder.rsf.viewstate.ViewParameters;
 
@@ -65,6 +86,54 @@ public class ReportHandlerHook {
 	  ccExport.doExport(siteId, response, (ExportCCViewParameters)viewparams);
 
           return true;
+      }else if(viewparams instanceof ExportEpubViewParameters){
+    	  String siteId = ToolManager.getCurrentPlacement().getContext();
+     	  String ref = "/site/" + siteId;
+    	  boolean ok = SecurityService.unlock(SimplePage.PERMISSION_LESSONBUILDER_UPDATE, ref);
+    	  if (!ok)
+    	      return false;
+
+          log.debug("Handing viewparams and response off to the reportExporter");
+    	  EpubExport epubExport = (EpubExport) ApplicationContextProvider.getApplicationContext().getBean("org.sakaiproject.lessonbuildertool.epubexport.EpubExport");
+          //EpubExport epubExport = new EpubExport();
+    	  epubExport.doExport(siteId, response, (ExportEpubViewParameters)viewparams);
+          return true;
+      }else if(viewparams instanceof ExportDocxViewParameters){
+    	  String siteId = ToolManager.getCurrentPlacement().getContext();
+     	  String ref = "/site/" + siteId;
+    	  boolean ok = SecurityService.unlock(SimplePage.PERMISSION_LESSONBUILDER_UPDATE, ref);
+    	  if (!ok)
+    	      return false;
+
+          log.debug("Handing viewparams and response off to the reportExporter");
+          log.debug("Export Docx");
+          DocxExport docxExport = (DocxExport) ApplicationContextProvider.getApplicationContext().getBean("org.sakaiproject.lessonbuildertool.docxexport.DocxExport");
+          docxExport.doExport(siteId, response, (ExportDocxViewParameters)viewparams);
+          return true;
+      }else if(viewparams instanceof ImportDocxViewParameters){
+    	  String siteId = ToolManager.getCurrentPlacement().getContext();
+     	  String ref = "/site/" + siteId;
+    	  boolean ok = SecurityService.unlock(SimplePage.PERMISSION_LESSONBUILDER_UPDATE, ref);
+    	  if (!ok)
+    	      return false;
+
+          log.debug("Handing viewparams and response off to the reportImporter");
+          log.debug("Import Docx");
+//          DocxImport docxImport = (DocxImport) ApplicationContextProvider.getApplicationContext().getBean("org.sakaiproject.lessonbuildertool.docximport.DocxImport");
+//          docxImport.doImport(siteId, response, (ImportDocxViewParameters)viewparams);
+          return true;
+      } else if(viewparams instanceof ImportPdfViewParameters){
+    	  String siteId = ToolManager.getCurrentPlacement().getContext();
+     	  String ref = "/site/" + siteId;
+    	  boolean ok = SecurityService.unlock(SimplePage.PERMISSION_LESSONBUILDER_UPDATE, ref);
+    	  if (!ok)
+    	      return false;
+
+          log.debug("Handing viewparams and response off to the reportImporter");
+          log.debug("Import Pdf");
+          PdfImport pdfImport = (PdfImport) ApplicationContextProvider.getApplicationContext().getBean("org.sakaiproject.lessonbuildertool.pdfimport.PdfImport");
+          pdfImport.doImport(siteId, response, (ImportPdfViewParameters)viewparams);
+          return true;
       }
       return false;
    }
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/beans/SimplePageBean.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/beans/SimplePageBean.java
index 13cb33a..22ee8e9 100644
--- a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/beans/SimplePageBean.java
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/beans/SimplePageBean.java
@@ -94,6 +94,8 @@ import au.com.bytecode.opencsv.CSVParser;
 import org.sakaiproject.portal.util.ToolUtils;
 import org.sakaiproject.lti.api.LTIService;
 import org.sakaiproject.basiclti.util.SakaiBLTIUtil;
+import org.sakaiproject.lessonbuildertool.docximport.DocxImport;
+import org.sakaiproject.lessonbuildertool.tool.view.ImportDocxViewParameters;
 import org.tsugi.lti2.ContentItem;
 
 /**
@@ -7863,5 +7865,83 @@ public class SimplePageBean {
 	}
 	return result.toString();
     }
+        
+    public void importDocx() {
+        if (!canEditPage()) {
+            return;
+        }
+        MultipartFile file = null;
+        if (multipartMap.size() > 0) {
+            // user specified a file, create it
+            file = multipartMap.values().iterator().next();
+        }
+        if (file != null) {
+            if (!uploadSizeOk(file)) {
+                return;
+            }
+            File docx = null;
+            File root = null;
+            try {
+                docx = File.createTempFile("docxloader", "file");
+                root = File.createTempFile("docxloader", "root");
+                if (root.exists()) {
+                    if (!root.delete()) {
+                        setErrMessage("unable to delete temp file for load");
+                        return;
+                    }
+                }
+                if (!root.mkdir()) {
+                    setErrMessage("unable to create temp directory for load");
+                    return;
+                }
+                BufferedInputStream bis = new BufferedInputStream(file.getInputStream());
+                BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(docx));
+                byte[] buffer = new byte[8096];
+                int n = 0;
+                while ((n = bis.read(buffer, 0, 8096)) >= 0) {
+                    if (n > 0) {
+                        bos.write(buffer, 0, n);
+                    }
+                }
+                bis.close();
+                bos.close();
+                DocxImport di = new DocxImport();
+                di.setContentHostingService(contentHostingService);
+                di.setMessageLocator(messageLocator);
+                ImportDocxViewParameters idvp = new ImportDocxViewParameters(ShowPageProducer.VIEW_ID);
+                idvp.setFileName(file.getName());
+                idvp.setOriginalFileName(file.getOriginalFilename());
+                di.doImport(docx, httpServletResponse, idvp, this, simplePageToolDao);
+            } catch (Exception e) {
+                setErrKey("simplepage.cc-error", "");
+            } finally {
+                if (docx != null) {
+                    try {
+                        deleteRecursive(docx);
+                    } catch (Exception e) {
+                        log.error("Delete DOCX: Unable to delete temp files created during this step" , e);
+                    }
+                }
+                try {
+                    deleteRecursive(root);
+                } catch (Exception e) {
+                    log.error("Delete Root: Unable to delete temp files created during this step" , e);
+                }
+            }
+        }
+        GeneralViewParameters view = new GeneralViewParameters(ShowPageProducer.VIEW_ID);
+    }
+    
+    public void exportEpub(){
+		GeneralViewParameters view = new GeneralViewParameters(ShowPageProducer.VIEW_ID);
+	}
+	
+    public void exportDocx(){
+            GeneralViewParameters view = new GeneralViewParameters(ShowPageProducer.VIEW_ID);
+    }
+
+    public void exportError(){
+            GeneralViewParameters view = new GeneralViewParameters(ShowPageProducer.VIEW_ID);
+    }
 
 }
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/producers/ShowPageProducer.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/producers/ShowPageProducer.java
index caf15df..d4e36ad 100644
--- a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/producers/ShowPageProducer.java
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/producers/ShowPageProducer.java
@@ -102,6 +102,8 @@ import org.sakaiproject.lessonbuildertool.tool.view.GeneralViewParameters;
 import org.sakaiproject.lessonbuildertool.tool.view.QuestionGradingPaneViewParameters;
 import org.sakaiproject.lessonbuildertool.tool.view.ExportCCViewParameters;
 import org.sakaiproject.lessonbuildertool.service.LessonBuilderAccessService;
+import org.sakaiproject.lessonbuildertool.tool.view.ExportDocxViewParameters;
+import org.sakaiproject.lessonbuildertool.tool.view.ExportEpubViewParameters;
 import org.sakaiproject.authz.api.AuthzGroup;
 import org.sakaiproject.memory.api.Cache;
 import org.sakaiproject.memory.api.MemoryService;
@@ -155,6 +157,8 @@ import uk.org.ponder.rsf.viewstate.SimpleViewParameters;
 import uk.org.ponder.rsf.viewstate.ViewParameters;
 import uk.org.ponder.rsf.viewstate.ViewParamsReporter;
 import org.apache.commons.lang.StringEscapeUtils;
+import org.sakaiproject.lessonbuildertool.tool.view.ImportDocxViewParameters;
+import org.sakaiproject.lessonbuildertool.tool.view.ImportPdfViewParameters;
 
 /**
  * This produces the primary view of the page. It also handles the editing of
@@ -752,7 +756,12 @@ public class ShowPageProducer implements ViewComponentProducer, DefaultView, Nav
 				createToolBarLink(PermissionsHelperProducer.VIEW_ID, tofill, "permissions", "simplepage.permissions", currentPage, "simplepage.permissions.tooltip");
 				UIOutput.make(tofill, "import-cc").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.import_cc.tooltip")));
 				UIOutput.make(tofill, "export-cc").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.export_cc.tooltip")));
-
+                                // OC Adding two additional export options
+                                UIOutput.make(tofill, "import-docx").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.import_docx.tooltip")));
+                                UIOutput.make(tofill, "import-pdf").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.import_pdf.tooltip")));
+                                UIOutput.make(tofill, "export-epub").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.export_epub.tooltip")));
+                                UIOutput.make(tofill, "export-docx").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.export_docx.tooltip")));
+                                UIOutput.make(tofill, "export-error").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.export_docx.tooltip")));
 				// Check to see if we have tools registered for external import
 				List<Map<String, Object>> toolsFileItem = simplePageBean.getToolsFileItem();
 				if ( toolsFileItem.size() > 0 ) {
@@ -3033,6 +3042,11 @@ public class ShowPageProducer implements ViewComponentProducer, DefaultView, Nav
 		createRemovePageDialog(tofill, currentPage, pageItem);
 		createImportCcDialog(tofill);
 		createExportCcDialog(tofill);
+                // OC addition of additional Dialogs
+                createImportPdfDialog(tofill,currentPage);
+                createImportDocxDialog(tofill,currentPage);
+                createExportEpubDialog(tofill,currentPage);
+                createExportDocxDialog(tofill,currentPage);
 		createYoutubeDialog(tofill, currentPage);
 		createMovieDialog(tofill, currentPage);
 		createCommentsDialog(tofill);
@@ -3967,6 +3981,78 @@ public class ShowPageProducer implements ViewComponentProducer, DefaultView, Nav
 
 	}
 
+        /**
+         * Create the RSF form for the Epub export dialog
+         * @param tofill
+         */
+        private void createExportEpubDialog(UIContainer tofill,SimplePage page) {
+            UIOutput.make(tofill, "export-epub-dialog").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.export-epub-title")));
+
+            UIForm form = UIForm.make(tofill, "export-epub-form");
+            UICommand.make(form, "export-epub-ok", messageLocator.getMessage("simplepage.export-epub-ok"), null);
+
+            ExportEpubViewParameters view = new ExportEpubViewParameters("exportEpub");
+            view.setPageId(page.getPageId());
+            view.setUrl(myUrl());
+            UIInternalLink.make(form, "export-epub-link", "export epub link", view);                
+        }  
+        
+        /**
+         * Create the RSF form for the PDF import dialog
+         *
+         * @param tofill
+         */
+        private void createImportPdfDialog(UIContainer tofill, SimplePage page) {
+            UIOutput.make(tofill, "import-pdf-dialog").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.import-pdf-title")));
+
+            UIForm form = UIForm.make(tofill, "import-pdf-form");
+            UICommand.make(form, "import-pdf-ok", messageLocator.getMessage("simplepage.import-pdf-ok"), null);
+
+            ImportPdfViewParameters view = new ImportPdfViewParameters("importPdf");
+            view.setPageId(page.getPageId());
+            view.setUrl(myUrl());
+            UIInternalLink.make(form, "import-pdf-link", "import pdf link", view);
+        }
+        
+        
+        
+        /**
+         * Create the RSF form for the Docx export dialog
+         *
+         * @param tofill
+         */
+        private void createImportDocxDialog(UIContainer tofill, SimplePage page) {
+            UIOutput.make(tofill, "import-docx-dialog").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.import_docx-title")));
+
+            UIForm form = UIForm.make(tofill, "import-docx-form");
+            // UICommand.make(form, "import-docx-ok", messageLocator.getMessage("simplepage.import-docx-ok"), null);
+
+            UICommand.make(form, "import-docx-submit", messageLocator.getMessage("simplepage.save_message"), "#{simplePageBean.importDocx}");
+            UICommand.make(form, "mm-cancel", messageLocator.getMessage("simplepage.cancel"), null);
+
+            ImportDocxViewParameters view = new ImportDocxViewParameters("importDocx");
+            view.setPageId(page.getPageId());
+            view.setUrl(myUrl());
+            UIInternalLink.make(form, "import-docx-link", "import docx link", view);
+        }
+
+        /**
+         * Create the RSF form for the DocX export dialog
+         * @param tofill
+         */
+        private void createExportDocxDialog(UIContainer tofill, SimplePage page) {
+            UIOutput.make(tofill, "export-docx-dialog").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.export-docx-title")));
+
+            UIForm form = UIForm.make(tofill, "export-docx-form");
+
+            ExportDocxViewParameters view = new ExportDocxViewParameters("exportDocx");
+            view.setExportDocx(true);
+            view.setToolId(httpServletRequest.getQueryString());
+            view.setPageId(page.getPageId());
+            view.setUrl(myUrl());
+            UIInternalLink.make(form, "export-docx-link", "export docx link", view);
+        }
+        
 	private void createEditMultimediaDialog(UIContainer tofill, SimplePage currentPage) {
 		UIOutput.make(tofill, "edit-multimedia-dialog").decorate(new UIFreeAttributeDecorator("title", messageLocator.getMessage("simplepage.editMultimedia")));
 
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/view/ExportDocxViewParameters.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/view/ExportDocxViewParameters.java
new file mode 100644
index 0000000..c699977
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/view/ExportDocxViewParameters.java
@@ -0,0 +1,54 @@
+package org.sakaiproject.lessonbuildertool.tool.view;
+
+import uk.org.ponder.rsf.viewstate.SimpleViewParameters;
+
+/**
+ * @author OpenCollab
+ */
+public class ExportDocxViewParameters extends SimpleViewParameters {
+
+	private boolean exportDocx = false;
+	private String toolId = "";
+	private String url = "";
+	private Long pageId = 0L;
+
+	public ExportDocxViewParameters() {
+		super();
+	}
+
+	public ExportDocxViewParameters(String VIEW_ID) {
+		super(VIEW_ID);
+	}
+
+	public boolean isExportDocx() {
+		return exportDocx;
+	}
+
+	public void setExportDocx(boolean exportDocx) {
+		this.exportDocx = exportDocx;
+	}
+
+	public String getToolId() {
+		return toolId;
+	}
+
+	public void setToolId(String toolId) {
+		this.toolId = toolId;
+	}
+
+	public Long getPageId() {
+		return pageId;
+	}
+
+	public void setPageId(Long pageId) {
+		this.pageId = pageId;
+	}
+
+	public String getUrl() {
+		return url;
+	}
+
+	public void setUrl(String url) {
+		this.url = url;
+	}
+}
\ No newline at end of file
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/view/ExportEpubViewParameters.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/view/ExportEpubViewParameters.java
new file mode 100644
index 0000000..6eef2bc
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/view/ExportEpubViewParameters.java
@@ -0,0 +1,37 @@
+package org.sakaiproject.lessonbuildertool.tool.view;
+
+import uk.org.ponder.rsf.viewstate.SimpleViewParameters;
+
+/**
+ * View parameters used to build parameters for EPUB export link
+ * 
+ * @author OpenCollab
+ */
+public class ExportEpubViewParameters extends SimpleViewParameters {
+
+	private long pageId;
+	private String url = "";
+	
+	public ExportEpubViewParameters() {
+		super();
+	}
+
+	public ExportEpubViewParameters(String VIEW_ID) {
+		super(VIEW_ID);
+	}
+
+	public long getPageId() {
+		return pageId;
+	}
+
+	public void setPageId(long pageId) {
+		this.pageId = pageId;
+	}
+	public String getUrl() {
+		return url;
+	}
+
+	public void setUrl(String url) {
+		this.url = url;
+	}	
+}
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/view/ImportDocxViewParameters.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/view/ImportDocxViewParameters.java
new file mode 100644
index 0000000..a7d8e75
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/view/ImportDocxViewParameters.java
@@ -0,0 +1,55 @@
+package org.sakaiproject.lessonbuildertool.tool.view;
+
+import uk.org.ponder.rsf.viewstate.SimpleViewParameters;
+
+/**
+ *
+ * @author OpenCollab
+ */
+public class ImportDocxViewParameters extends SimpleViewParameters {
+
+    private long pageId;
+    private String url = "";
+    private String fileName = "";
+    private String originalFileName = "";
+
+    public ImportDocxViewParameters() {
+        super();
+    }
+
+    public ImportDocxViewParameters(String VIEW_ID) {
+        super(VIEW_ID);
+    }
+
+    public long getPageId() {
+        return pageId;
+    }
+
+    public void setPageId(long pageId) {
+        this.pageId = pageId;
+    }
+
+    public String getUrl() {
+        return url;
+    }
+
+    public void setUrl(String url) {
+        this.url = url;
+    }
+
+    public String getFileName() {
+        return fileName;
+    }
+
+    public void setFileName(String fileName) {
+        this.fileName = fileName;
+    }
+
+    public String getOriginalFileName() {
+        return originalFileName;
+    }
+
+    public void setOriginalFileName(String originalFileName) {
+        this.originalFileName = originalFileName;
+    }
+}
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/view/ImportPdfViewParameters.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/view/ImportPdfViewParameters.java
new file mode 100644
index 0000000..90d8b1f
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/tool/view/ImportPdfViewParameters.java
@@ -0,0 +1,36 @@
+package org.sakaiproject.lessonbuildertool.tool.view;
+
+import uk.org.ponder.rsf.viewstate.SimpleViewParameters;
+
+/**
+ *
+ * @author OpenCollab
+ */
+public class ImportPdfViewParameters extends SimpleViewParameters {
+
+	private long pageId;
+	private String url = "";
+	
+	public ImportPdfViewParameters() {
+		super();
+	}
+
+	public ImportPdfViewParameters(String VIEW_ID) {
+		super(VIEW_ID);
+	}
+
+	public long getPageId() {
+		return pageId;
+	}
+
+	public void setPageId(long pageId) {
+		this.pageId = pageId;
+	}
+	public String getUrl() {
+		return url;
+	}
+
+	public void setUrl(String url) {
+		this.url = url;
+	}	
+}
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/ApplicationContextProvider.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/ApplicationContextProvider.java
new file mode 100644
index 0000000..1181921
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/ApplicationContextProvider.java
@@ -0,0 +1,27 @@
+package org.sakaiproject.lessonbuildertool.util;
+
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextAware;
+
+/**
+ * Application Context provider
+ * 
+ * @author OpenCollab
+ */
+public class ApplicationContextProvider implements ApplicationContextAware {
+    private static ApplicationContext context;
+ 
+    /**
+     * Get the current application context
+     * 
+     * @return 
+     */
+    public static ApplicationContext getApplicationContext() {
+        return context;
+    }
+ 
+    @Override
+    public void setApplicationContext(ApplicationContext ctx) {
+        context = ctx;
+    }
+}
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/BreakOutObj.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/BreakOutObj.java
new file mode 100644
index 0000000..23aa828
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/BreakOutObj.java
@@ -0,0 +1,70 @@
+package org.sakaiproject.lessonbuildertool.util;
+
+import org.jsoup.nodes.Element;
+
+/**
+ * Break Out object is used to determine whether Html paragraphs belong 
+ * to a Container which breaks if it is not included as a whole. E.G. a table with body > tr > td, /td, td 
+ * but is not closed the rest of the way will cause rendering errors.
+ * @author OpenCollab
+ */
+public class BreakOutObj {
+    private boolean childOfBreakOutContainer;
+    private Element parentContainer;
+    private int depth;
+
+    /**
+     * If the current paragraph is a child of a container return true
+     * @return 
+     */
+    public boolean isChildOfBreakOutContainer() {
+        return childOfBreakOutContainer;
+    }
+
+    /**
+     * set the state of the paragraph, true if it is the child of a container, false if not.
+     * @param childOfBreakOutContainer 
+     */
+    public void setIsChildOfBreakOutContainer(boolean childOfBreakOutContainer) {
+        this.childOfBreakOutContainer = childOfBreakOutContainer;
+    }
+
+    /**
+     * return the parent container data when the it is a child of a container
+     * @return 
+     */
+    public Element getParentContainer() {
+        return parentContainer;
+    }
+    
+    /**
+     * When it is the child of the container it must include the whole container element 
+     * so that further tree walking is not required
+     * @return 
+     */
+    public void setParentContainer(Element parentContainer) {
+        this.parentContainer = parentContainer;
+    }
+
+    /**
+     * Returns the depth of how deep the current paragraph is in the container.
+     * Used for iteration in the import helper.
+     * @return 
+     */
+    public int getDepth() {
+        return depth;
+    }
+
+    /**
+     * Sets the depth of how deep the current paragraph is in the container.
+     * Used for iteration in the import helper.
+     */
+    public void setDepth(int depth) {
+        this.depth = depth;
+    }
+
+    @Override
+    public String toString() {
+        return "BreakOutObj{" + "childOfBreakOutContainer=" + childOfBreakOutContainer + ", parentContainer=" + parentContainer + ", depth=" + depth + '}';
+    }
+}
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/ExportHelper.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/ExportHelper.java
new file mode 100644
index 0000000..3a818bf
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/ExportHelper.java
@@ -0,0 +1,53 @@
+package org.sakaiproject.lessonbuildertool.util;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.sakaiproject.tool.api.ToolSession;
+import org.sakaiproject.tool.cover.SessionManager;
+
+import uk.org.ponder.messageutil.MessageLocator;
+
+public class ExportHelper {
+
+    private final Log log = LogFactory.getLog(ExportHelper.class);
+    // MessageLocator service required as per the Lessons tool exception
+    private MessageLocator messageLocator;
+
+    /**
+     * Add errors to the tool session so that we display it to user when
+     * refreshing the lesson page. We will still create the docx  || Epub but just
+     * display the message
+     *
+     * @param errorMessage
+     * @param showHeaderMessage
+     * @param headerErrorMsg
+     */
+    public void setErrMessage(String errorMessage, boolean showHeaderMessage, String headerErrorMsg) {
+        ToolSession toolSession = SessionManager.getCurrentToolSession();
+        if (toolSession == null) {
+            log.error("Lesson Builder error not in tool: " + errorMessage);
+            return;
+        }
+        List<String> errors = (List<String>) toolSession.getAttribute("lessonbuilder.errors");
+        if (errors == null) {
+            errors = new ArrayList<String>();
+            if (showHeaderMessage) {
+                errors.add(messageLocator.getMessage(headerErrorMsg));
+            }
+            toolSession.setAttribute("lessonbuilder.errors", errors);
+        }
+        errors.add(errorMessage);
+    }
+
+    /**
+     * Setter to inject MessageLocator
+     *
+     * @param messageLocator
+     */
+    public void setMessageLocator(MessageLocator messageLocator) {
+        this.messageLocator = messageLocator;
+    }
+}
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/ExportImportConstants.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/ExportImportConstants.java
new file mode 100644
index 0000000..c095386
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/ExportImportConstants.java
@@ -0,0 +1,31 @@
+package org.sakaiproject.lessonbuildertool.util;
+
+import java.util.Arrays;
+import java.util.List;
+import org.sakaiproject.component.cover.ServerConfigurationService;
+
+/**
+ * 
+ * @author OpenCollab
+ */
+public class ExportImportConstants {
+    
+    public static final boolean EMBED_RESOURCES = Boolean.valueOf(ServerConfigurationService.getString("lessonbuilder.docx.embed.resources", "true"));
+    public static final boolean SUB_PAGES_INLINE = Boolean.valueOf(ServerConfigurationService.getString("lessonbuilder.docx.subpages.inline", "true"));
+    public static final String CK_HEADER1_STYLE = ServerConfigurationService.getString("lessonbuilder.export.ckheader1.style", "font-weight: bold;font-size: 22.3740986738pt;font-family: Calibri;");
+    public static final String CK_HEADER2_STYLE = ServerConfigurationService.getString("lessonbuilder.export.ckheader2.style", "font-weight: bold;font-size: 14.54316413797pt;color: #555;font-family: Calibri;");
+    public static final String CK_HEADER3_STYLE = ServerConfigurationService.getString("lessonbuilder.export.ckheader3.style", "font-weight: bold;font-size: 12.30575427059pt;color: #555;font-family: Calibri;");
+    public static final String CK_HEADER4_STYLE = ServerConfigurationService.getString("lessonbuilder.export.ckheader4.style", "font-weight: bold;font-size: 11.1870493369pt;color: #555;font-family: Calibri;");
+
+    public static final List<String> CK_HEADER_LIST = Arrays.asList(CK_HEADER1_STYLE, CK_HEADER2_STYLE, CK_HEADER3_STYLE, CK_HEADER4_STYLE);
+    
+    public static final boolean ADD_ERROR_TO_DOC = Boolean.valueOf(ServerConfigurationService.getString("lessonbuilder.docx.error.add.to.doc", "false"));
+    public static final boolean ABORT_ON_ERROR = Boolean.valueOf(ServerConfigurationService.getString("lessonbuilder.docx.error.abort.doc.creation", "false"));
+    public static final boolean ADD_ERROR_TO_SESSION = (ABORT_ON_ERROR) ? true : Boolean.valueOf(ServerConfigurationService.getString("lessonbuilder.docx.error.add.to.session", "false"));
+    public static final String CHARSET = ServerConfigurationService.getString("lessonbuilder.docx.export.charset", "UTF-8");
+    public static final List<String> STYLE_LIST = Arrays.asList("Title","Subtitle", "Heading1", "Heading2", "Heading3", "Heading4", "Heading5", "Heading6", "Heading7", "Heading8",
+                                                         "CKTitle","CKSubtitle", "CKHeading1", "CKHeading2", "CKHeading3", "CKHeading4", "CKHeading5", "CKHeading6", "CKHeading7", "CKHeading8");
+    // List of file extensions checked when searching for image type
+    public static final List<String> IMAGE_EXTENSIONS = Arrays.asList("bmp", "gif", "icns", "ico", "jpg", "jpeg", "png", "tiff", "tif");
+    
+}
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/HtmlCleanerUtil.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/HtmlCleanerUtil.java
new file mode 100644
index 0000000..6426e35
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/HtmlCleanerUtil.java
@@ -0,0 +1,457 @@
+package org.sakaiproject.lessonbuildertool.util;
+
+import coza.opencollab.epub.creator.model.EpubBook;
+
+import java.net.URL;
+import java.net.URLDecoder;
+import java.text.MessageFormat;
+import java.util.regex.Pattern;
+
+
+import org.apache.commons.io.FilenameUtils;
+import org.apache.commons.lang.StringUtils;
+import org.apache.log4j.Logger;
+import org.htmlcleaner.CleanerProperties;
+import org.htmlcleaner.ContentNode;
+import org.htmlcleaner.HtmlCleaner;
+import org.htmlcleaner.HtmlNode;
+import org.htmlcleaner.SimpleHtmlSerializer;
+import org.htmlcleaner.TagNode;
+import org.htmlcleaner.TagNodeVisitor;
+import org.sakaiproject.component.api.ServerConfigurationService;
+import org.sakaiproject.content.api.ContentResource;
+import org.sakaiproject.exception.ServerOverloadException;
+import org.sakaiproject.lessonbuildertool.service.DataExportService;
+
+/**
+ * Utility class for using the HTMLCleaner API
+ *
+ * Sets the default properties and adds methods for commonly used operations
+ *
+ * @author OpenCollab
+ */
+public class HtmlCleanerUtil {
+
+    private static final Logger LOG = Logger.getLogger(HtmlCleanerUtil.class);
+    /**
+     * The HTML cleaner
+     */
+    private final HtmlCleaner htmlSetup;
+    /**
+     * The properties for the cleaner.
+     */
+    private final CleanerProperties htmlProperties;
+    /**
+     * The HTML out
+     */
+    private final SimpleHtmlSerializer htmlSetdown;
+    /**
+     * The char set encoding
+     */
+    private final String CHARSET = "UTF-8";
+
+    /**
+     *
+     */
+    private DataExportService dataExportService;
+
+    /**
+     * ServerConfigurationService to get URL base paths
+     */
+    private ServerConfigurationService serverConfigurationService;
+
+    /**
+     * HTML template for displaying video
+     */
+    private String html5VideoTag = "<video controls=\"controls\">\n"
+            + "<source src=\"{0}\" type=\"{1}\"/>\n"
+            + "<p>If your reading system does not support HTML5 video, \n"
+            + "this video is available in\n"
+            + "<a href=\"{2}\">{2}</a>.</p>\n"
+            + "</video>";
+    
+    private final String html5VideoTagWithDimensions = "<video width=\"{0}\" height=\"{1}\" controls=\"controls\">\n"
+            + "<source src=\"{2}\" type=\"{3}\" />\n"
+            + "<p>If your reading system does not support HTML5 video, \n"
+            + "this video is available in\n"
+            + "<a href=\"{4}\">{4}</a>.</p>\n"
+            + "</video>";
+    
+    /**
+     * HTML template for displaying audio
+     */
+    private String html5AudioTag = "<audio controls=\"controls\">\n"
+            + "<source src=\"{0}\" type=\"{1}\"/>\n"
+            + "<p>If your reading system does not support HTML5 audio, \n"
+            + "this audio is available in\n"
+            + "<a href=\"{2}\">{2}</a>.</p>\n"
+            + "</audio>";
+    
+    /**
+     * HTML template for displaying external video link
+     */
+    private String externalVideoTag = "<p>This video can be viewed online : \n"
+            + "<a href=\"{0}\">{0}</a>.</p>";    
+    
+    // HTML used to display error messages for content that failed to be exported to EPUB
+    private final String styledError = "<br/><div style=\"font-size;1.1em;border-radius:4px;border: 1px solid #cd0a0a;color:#cd0a0a;padding:4px;\">{0}</div><br/>";
+
+    /**
+     * Default constructor setting the HTML cleaner up.
+     */
+    public HtmlCleanerUtil() {
+        htmlSetup = new HtmlCleaner();
+        htmlProperties = htmlSetup.getProperties();
+        htmlProperties.setAdvancedXmlEscape(true);
+        htmlProperties.setUseEmptyElementTags(false);
+        htmlProperties.setCharset(CHARSET);
+        htmlProperties.setOmitDoctypeDeclaration(true);
+        htmlProperties.setOmitHtmlEnvelope(true);
+        htmlProperties.setOmitXmlDeclaration(true);
+        htmlProperties.setRecognizeUnicodeChars(false);
+        htmlSetdown = new SimpleHtmlSerializer(htmlProperties);
+    }
+
+    /**
+     * Converts all iframe tags in the HTML doc to a tags
+     *
+     * @param htmlText
+     * @return
+     */
+    public String convertIframeToLink(String htmlText) {
+        TagNode node = getHtmlSetup().clean(htmlText);
+        node.traverse(new IframeTagNodeVisitor());
+        return htmlSetdown.getAsString(node);
+    }
+
+    /**
+     * Handles images and embedded video for EPUB. The images will be added 
+     * as resources and video will either embed as HTML5 tags or for external 
+     * video a link will be added.
+     *
+     * @param htmlText
+     * @param epubBook
+     * @return
+     */
+    public String handleEPUBHtml(String htmlText, EpubBook epubBook) {
+        TagNode node = getHtmlSetup().clean(htmlText);
+        node.traverse(new EPUBTextTagNodeVisitor(epubBook));
+        return htmlSetdown.getAsString(node);
+    }
+
+    /**
+     * Returns cleaned HTML by reordering individual elements and producing 
+     * well-formed XML
+     *
+     * @param dirtyHTML
+     * @return
+     */
+    public String cleanHTMLString(String dirtyHTML) {
+        TagNode node = getHtmlSetup().clean(dirtyHTML);
+        return htmlSetdown.getAsString(node);
+    }
+
+    /**
+     * @param dataExportService the dataExportService to set
+     */
+    public void setDataExportService(DataExportService dataExportService) {
+        this.dataExportService = dataExportService;
+    }
+
+    /**
+     * @param serverConfigurationService the serverConfigurationService to set
+     */
+    public void setServerConfigurationService(ServerConfigurationService serverConfigurationService) {
+        this.serverConfigurationService = serverConfigurationService;
+    }
+
+    /**
+     * @param html5VideoTag the html5VideoTag to set
+     */
+    public void setHtml5VideoTag(String html5VideoTag) {
+        this.html5VideoTag = html5VideoTag;
+    }
+
+    /**
+     * @param html5AudioTag the html5AudioTag to set
+     */
+    public void setHtml5AudioTag(String html5AudioTag) {
+        this.html5AudioTag = html5AudioTag;
+    }
+
+    /**
+     * @param externalVideoTag the externalVideoTag to set
+     */
+    public void setExternalVideoTag(String externalVideoTag) {
+        this.externalVideoTag = externalVideoTag;
+    }
+
+    /**
+     * @return the htmlSetup
+     */
+    public HtmlCleaner getHtmlSetup() {
+        return htmlSetup;
+    }
+
+    /**
+     * TagNodeVisitor implementation that replaces iframes with links to the
+     * iframe src
+     */
+    class IframeTagNodeVisitor implements TagNodeVisitor {
+
+        @Override
+        public boolean visit(TagNode tagNode, HtmlNode htmlNode) {
+            if (htmlNode instanceof TagNode) {
+                TagNode tag = (TagNode) htmlNode;
+                String tagName = tag.getName();
+                String src = tag.getAttributeByName("src");
+                if ("iframe".equals(tagName) && src != null) {
+                    String cleanedSource = cleanIframeSource(src);
+                    TagNode parent = tag.getParent();
+                    int index = parent.getChildIndex(tag);
+                    // Create a link tag and insert at current position
+                    TagNode newTag = new TagNode("a");
+                    ContentNode content = new ContentNode(cleanedSource);
+                    newTag.addChild(content);
+                    newTag.addAttribute("href", cleanedSource);
+                    parent.insertChild(index, newTag);
+                    // remove old/current iframe tag
+                    parent.removeChild(tag);
+                }
+            }
+            // tells visitor to continue traversing the DOM tree
+            return true;
+        }
+
+        /**
+         * Add protocol to the source if needed. We will have to use HTTP as we
+         * do not know the protocol and DOCX needs a protocol to open link in
+         * browser. This was tested for all known embed links and HTTP did work.
+         *
+         * @param src
+         * @return
+         */
+        private String cleanIframeSource(String src) {
+            if (src.indexOf("//") == 0) {
+                return src.replaceFirst("//", "http://");
+            } else {
+                return src;
+            }
+
+        }
+    }
+
+    /**
+     * TagNodeVisitor implementation that handles HTML added to the EPUB book.
+     * Image and Object(video) TagNodes are handled
+     */
+    class EPUBTextTagNodeVisitor implements TagNodeVisitor {
+
+        private final EpubBook epubBook;
+
+        public EPUBTextTagNodeVisitor(EpubBook epubBook) {
+            this.epubBook = epubBook;
+        }
+
+        @Override
+        public boolean visit(TagNode tagNode, HtmlNode htmlNode) {
+            if (htmlNode instanceof TagNode) {
+                TagNode tag = (TagNode) htmlNode;
+                String tagName = tag.getName();
+                String src = tag.getAttributeByName("src");
+                String data = tag.getAttributeByName("data");
+                if ("img".equals(tagName) && src != null && tag.getAttributeByName("data-mathml") != null) {
+                	addEPUBImageResource(src, tag);
+                	removeInvalidMathMlAttributes(tag);
+                } else if ("img".equals(tagName) && src != null ) {
+                    if(tag.getAttributeByName("data-pre-embedded") == null){
+                	addEPUBImageResource(src, tag);
+                    }
+                } else if ("object".equals(tagName) && data != null) {
+                    addMultiMedia(tag);
+                } else if("audio".equals(tagName) && tag.hasChildren()){
+                	addAudio(tag);
+                }
+            }
+            // tells visitor to continue traversing the DOM tree
+            return true;
+        }
+
+        /**
+         * Gets the image file and adds it as a Resource to the EPUB Book,
+         * changes the src attribute to reference the EPUB resource
+         *
+         * @param url
+         * @throws ServerOverloadException
+         * @throws Exception
+         */
+        private void addEPUBImageResource(String url, TagNode tag) {
+            try {
+                // Check if it is a Sakai Resource
+                url = URLDecoder.decode(url, "UTF-8");
+                if (!isExternalSource(url)) {
+                    String resourceID = addEPUBResource(url,null);
+                    tag.addAttribute("src", resourceID.replaceFirst("/", ""));
+                } else {
+                    URL imageURL = new URL(url);
+                    String fileName = "externalImages" + imageURL.getPath();
+                    epubBook.addContent(imageURL.openStream(), null, fileName, false, false);
+                    tag.addAttribute("src", fileName);
+                }
+            } catch (Exception ex) {
+                LOG.error("Could not save image as EPUB resource - this image will link to external URL : " + url, ex);
+                replaceTagWithNewHTML(tag, MessageFormat.format(styledError, url + ", no longer exists"));
+            }
+        }
+        
+        /**
+         * Gets a Sakai resource from the resource URL and add it to the EPUB
+         * book
+         * 
+         * @param url
+         * @throws Exception 
+         */
+        private String addEPUBResource(String url, String mimeType) throws Exception {
+            url = java.net.URLDecoder.decode(url);
+            String accessURL = serverConfigurationService.getAccessUrl();
+            String resourceId = StringUtils.remove(url, accessURL + "/content");
+            ContentResource cr = dataExportService.getContentResourceData(resourceId);
+            epubBook.addContent(cr.getContent(), mimeType, resourceId, false, false);
+            return cr.getId();
+        }
+
+        /**
+         * Handles the <object> tags. Checks if it is a Sakai or external source
+         * and then adds the content to the EPUB book
+         *
+         * @param tag
+         */
+        private void addMultiMedia(TagNode tag) {
+        	//TODO: rework this method to include audio to the EPUB as well (NSU-23 & NSU-44)
+            for (TagNode child : tag.getChildTagList()) {
+                if ("param".equals(child.getName())
+                        && "FlashVars".equals(child.getAttributeByName("name"))) {
+                    String src = getMultiMediaSource(child.getAttributeByName("value"));
+                    if (isExternalSource(src)) {
+                        replaceTagWithNewHTML(tag, MessageFormat.format(externalVideoTag, src));
+                    } else {
+                        addSakaiMultiMedia(tag, src);
+                    }
+                }
+            }
+        }
+        
+        /**
+         * Handles the <source> tag used by the text tool when embedding audio.
+         * @param tag
+         */
+        private void addAudio(TagNode tag){
+        	for (TagNode child : tag.getChildTagList()) {
+        		if ("source".equals(child.getName())){
+        			alterHtmlAudioToHtml5AudioTag(tag, child.getAttributeByName("src"));
+        		}
+        	}
+        }
+
+        /**
+         * the HtmlAudio tag to HTML5 Audio
+         * @param tag
+         * @param srcValue
+         */
+        private void alterHtmlAudioToHtml5AudioTag(TagNode tag, String srcValue){
+        	Pattern p = Pattern.compile("content");
+        	java.util.regex.Matcher m = p.matcher(srcValue);
+        	if(m.find()){
+        		srcValue = srcValue.substring(m.end()).trim();
+        	}
+        	try{
+        		String type = "audio/" + FilenameUtils.getExtension(srcValue);
+	    		String contentResourceId = addEPUBResource(srcValue, type);
+	        	String newNode = MessageFormat.format(html5AudioTag, contentResourceId.replaceFirst("/", ""), type, srcValue);
+	            replaceTagWithNewHTML(tag.getParent(), newNode);
+        	}catch(Exception e){
+        		LOG.error("Could not alter the HtmlAudio tag to HTML5 Audio URL : " + srcValue , e);
+        	}
+        }
+        
+        /**
+         * Add HTML5 video tag and add the multimedia as 'n resource in the EPUB
+         * book
+         *
+         * @param tag
+         * @param src
+         * @throws Exception
+         */
+        private void addSakaiMultiMedia(TagNode tag, String src) {
+            try {
+                String type = "video/" + FilenameUtils.getExtension(src);  
+                String resourceId = addEPUBResource(src, null);       
+                String newNode = MessageFormat.format(html5VideoTag, resourceId.replaceFirst("/", ""), type, src);
+                if(null != tag.getAttributeByName("width") && null != tag.getAttributeByName("height"))
+                {
+                    newNode = MessageFormat.format(html5VideoTagWithDimensions, tag.getAttributeByName("width"),  tag.getAttributeByName("height"), resourceId.replaceFirst("/", ""), type, src);   
+                }
+                replaceTagWithNewHTML(tag, newNode);
+            } catch (Exception ex) {
+                LOG.error("Could not save video as EPUB resource - this video will link to external URL : " + src, ex);
+                replaceTagWithNewHTML(tag, MessageFormat.format(externalVideoTag, src));
+            }
+        }
+
+        /**
+         * Replaces the current tag with a new tag created from the HTML text
+         *
+         * @param tag old Tag
+         * @param newTagHtml new Tag HTML
+         */
+        private void replaceTagWithNewHTML(TagNode tag, String newTagHtml) {
+            TagNode parent = tag.getParent();
+            int index = parent.getChildIndex(tag);
+            TagNode node = getHtmlSetup().clean(newTagHtml);
+            parent.insertChild(index, node);
+            // remove old/current iframe tag
+            parent.removeChild(tag);
+        }
+
+        /**
+         * Get the source URL of the multimedia flash object. Returns null if
+         * not found
+         *
+         * @param flashVars
+         * @return
+         */
+        private String getMultiMediaSource(String flashVars) {
+            // split the params
+            String[] vars = flashVars.split("&");
+            // Get the src param and return the value
+            for (String var : vars) {
+                if (var.startsWith("src=")) {
+                    return var.substring(4);
+                }
+            }
+            return null;
+        }
+
+        /**
+         * Check if the source is external or an Sakai resource link
+         *
+         * @param src
+         * @return
+         */
+        private boolean isExternalSource(String src) {
+            String accessURL = serverConfigurationService.getAccessUrl();
+            return !src.startsWith(accessURL);
+        }
+        
+        /**
+         * Remove invalid attributes for MathMl Data
+         * @param tag
+         */
+        private void removeInvalidMathMlAttributes(TagNode tag) {
+			tag.removeAttribute("border");
+			tag.removeAttribute("data-mathml");
+			tag.removeAttribute("id");
+		}
+    }
+
+}
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/ImportHelper.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/ImportHelper.java
new file mode 100644
index 0000000..33fd86d
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/ImportHelper.java
@@ -0,0 +1,309 @@
+package org.sakaiproject.lessonbuildertool.util;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.OutputStream;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Logger;
+import org.apache.commons.io.FilenameUtils;
+import org.apache.commons.lang.StringUtils;
+import org.docx4j.Docx4J;
+import org.docx4j.Docx4jProperties;
+import org.docx4j.convert.out.HTMLSettings;
+import org.docx4j.openpackaging.exceptions.Docx4JException;
+import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.select.Elements;
+import org.sakaiproject.lessonbuildertool.SimplePage;
+import org.sakaiproject.lessonbuildertool.tool.view.ImportDocxViewParameters;
+
+/**
+ * Convenience methods and helpers for Import DOCX files and building a Lesson
+ *
+ * @author OpenCollab
+ */
+public class ImportHelper {
+
+    /**
+     * Create a .HTML file when given a .DOCX file
+     *
+     * @param siteId
+     * @param file
+     * @return
+     * @throws org.docx4j.openpackaging.exceptions.Docx4JException
+     * @throws java.io.FileNotFoundException
+     */
+    public File docxToHtml(String siteId, File file) throws Docx4JException, FileNotFoundException {
+        WordprocessingMLPackage wordMLPackage;
+        wordMLPackage = Docx4J.load(file);
+        HTMLSettings htmlSettings = getDocxHtmlSettings(file.getPath());
+
+        htmlSettings.setWmlPackage(wordMLPackage);
+        OutputStream os;
+        String fullFilePath = file.getPath() + ".html ";
+        os = new FileOutputStream(fullFilePath);
+
+        // If you want XHTML output
+        Docx4jProperties.setProperty("docx4j.Convert.Out.HTML.OutputMethodXML", true);
+        Docx4J.toHTML(htmlSettings, os, Docx4J.FLAG_EXPORT_PREFER_XSL);
+        return new File(fullFilePath);
+    }
+
+    /**
+     * Default HTMLSettings, convenience method
+     *
+     * @param filePath
+     * @return
+     */
+    public HTMLSettings getDocxHtmlSettings(String filePath) {
+        HTMLSettings htmlSettings = Docx4J.createHTMLSettings();
+        htmlSettings.setImageDirPath(filePath + "_files");
+        htmlSettings.setImageTargetUri(filePath.substring(filePath.lastIndexOf("/") + 1)
+                + "_files");
+        String userCSS = "html, body, div, span, h1, h2, h3, h4, h5, h6, p, a, img,  ol, ul, li, table, caption, tbody, tfoot, thead, tr, th, td "
+                + "{ margin: 0; padding: 0; border: 0;}"
+                + "body {line-height: 1;} ";
+        htmlSettings.setUserCSS(userCSS);
+        return htmlSettings;
+    }
+
+    /**
+     * Parses through the HTML building a tree structure with simpler access to
+     * the content
+     *
+     * Lots of rules violations in the documents provided to test. We will need
+     * to got a formal complete rule sheet from NWU. before making further
+     * sweeping changes.
+     *
+     * @param doc
+     * @param params
+     * @return
+     */
+    public Map<Long, ImportTreeItem> buildStructure(Document doc, ImportDocxViewParameters params) {
+        Map<Long, ImportTreeItem> structure = new LinkedHashMap<Long, ImportTreeItem>();
+        List<String> containerElements = new ArrayList<String>();
+        containerElements.add("table");
+        long levelParent = 0;
+        String parentTitle = "";
+        int sequence = 1;
+        int whiteSpaceCounter = 0;
+        ImportTreeItem iti = new ImportTreeItem();
+        BreakOutObj boo = new BreakOutObj();
+        Elements content = doc.select("p");
+        int depthCount = 1;
+        for (Element e : content) {
+            boo = isAChildOf(doc, e, containerElements, boo, 0);
+            if (boo.isChildOfBreakOutContainer()) {
+                if (null != boo.getParentContainer() && depthCount != boo.getDepth()) {
+                    e = boo.getParentContainer();
+                    whiteSpaceCounter = addContentToIT(iti, e, structure, whiteSpaceCounter);
+                    depthCount = boo.getDepth();
+                }
+            } else {
+                if (e.attr("class").startsWith("Heading") && hasContent(e)) {
+                    iti = addSubPageAndContent(e, levelParent, parentTitle, params, iti, structure, sequence, false);
+                    levelParent = iti.getId();
+                    parentTitle = iti.getTitle();
+                    sequence = sequence + 1;
+                    whiteSpaceCounter = 0;
+                } else {
+                    whiteSpaceCounter = addContentToIT(iti, e, structure, whiteSpaceCounter);
+                }
+                depthCount = 0;
+            }
+        }
+        structure.put(iti.getId(), iti);
+        return structure;
+    }
+
+    /**
+     * adds content from many paragraph which do not require their own sub
+     * pages.
+     *
+     * @param it
+     * @param e
+     * @param structure
+     * @param isBreakOut
+     */
+    private int addContentToIT(ImportTreeItem iti, Element e, Map<Long, ImportTreeItem> structure, int whiteSpaceCounter) {
+        if (hasContent(e)) {
+            iti.setContent(iti.getContent().concat(e.text()));
+            iti.setHtmlContent(iti.getHtmlContent().concat(e.toString()));
+            whiteSpaceCounter = 0;
+        } else {
+            whiteSpaceCounter = whiteSpaceCounter + 1;
+        }
+        if (!hasContent(e) && whiteSpaceCounter <= 2) {
+            iti.setContent(iti.getContent().concat(e.text()));
+            iti.setHtmlContent(iti.getHtmlContent().concat(e.toString()));
+        }
+        return whiteSpaceCounter;
+    }
+
+    /**
+     * Creates a subpage and inserts content into the subpage.
+     *
+     * @param e
+     * @param levelParent
+     * @param parentTitle
+     * @param params
+     * @param it
+     * @param structure
+     * @param sequence
+     * @param breakOut
+     * @return
+     */
+    private ImportTreeItem addSubPageAndContent(Element e, long levelParent, String parentTitle,
+            ImportDocxViewParameters params, ImportTreeItem it, Map<Long, ImportTreeItem> structure,
+            int sequence, boolean breakOut) {
+        int level = (breakOut) ? 0 : Integer.parseInt(e.attr("class").substring("Heading".length(), "Heading".length() + 2).trim());
+        if (level == 1) {
+            levelParent = 0;
+            parentTitle = FilenameUtils.getBaseName(params.getOriginalFileName());
+        }
+        it = determineAncestory(it, structure, levelParent);
+        String title;
+        if (e.text().length() > 50) {
+            title = e.text().substring(0, 50) + " ...";
+        } else {
+            title = e.text();
+        }
+        if (!title.equals(it.getTitle())) {
+            structure.put(it.getId(), it);
+            it = new ImportTreeItem();
+        }
+        it.setLevel(level);
+        it.setTitle(title);
+//        if(includeSubPageHeadingInContent){
+//            it.setHtmlContent(MessageFormat.format(heading, title));
+//        }
+        it.setParentId(levelParent);
+        it.setParentTitle(parentTitle);
+        it.setSequence(sequence);
+        it.setType(1);
+        it.setId(sequence);
+        it = determineAncestory(it, structure, levelParent);
+        return it;
+    }
+
+    /**
+     * Update the ids of the tree items to the newly created pages.
+     *
+     * @param structure
+     * @param page
+     * @param it
+     * @param id_map
+     */
+    public void updateIds(Map<Long, ImportTreeItem> structure, SimplePage page, ImportTreeItem it, HashMap<Long, Long> id_map) {
+        for (Map.Entry<Long, ImportTreeItem> entry : structure.entrySet()) {
+            ImportTreeItem iTree = entry.getValue();
+            long oldId = it.getId();
+            if (iTree.getId() == oldId) {
+                iTree.setId(page.getPageId());
+            }
+            if (iTree.getParentId() == oldId) {
+                iTree.setParentId(page.getPageId());
+            }
+            id_map.put(oldId, page.getPageId());
+        }
+    }
+
+    /**
+     * The isAChildOf determines whether the current paragraph is a child of a
+     * container which cannot be broken up into smaller chunks even if it is a
+     * paragraph of heading type. E.G. Tables It also gets the full object and
+     * inserts it whole into the currently processed Page.
+     *
+     * @param doc
+     * @param element
+     * @param containerElements
+     * @param boo
+     * @param depth
+     * @return
+     */
+    public BreakOutObj isAChildOf(Document doc, Element element, List<String> containerElements, BreakOutObj boo, int depth) {
+        boo.setIsChildOfBreakOutContainer(false);
+        if (null == element.parent()) {
+            boo.setIsChildOfBreakOutContainer(false);
+            return boo;
+        }
+        if (containerElements.contains(element.parent().tagName())) {
+            boo.setIsChildOfBreakOutContainer(true);
+            boo.setParentContainer(element.parent());
+            boo.setDepth(depth + 1);
+            return boo;
+        } else {
+            element = element.parent();
+            return isAChildOf(doc, element, containerElements, boo, depth + 1);
+        }
+    }
+
+    /**
+     * Check if any of the paragraphs contain content, in word an empty line can
+     * still have heading styling. Which creates empty none sense sub pages.
+     *
+     * @param e
+     * @return boolean
+     */
+    private boolean hasContent(Element e) {
+        if (e.text() == null || e.html().equals("&nbsp;") || e.text().equals(" ")) {
+            return false;
+        }
+        if (StringUtils.isEmpty(e.text()) && e.children().isEmpty()) {
+            return false;
+        }
+        if (!e.children().isEmpty()) {
+            return true;
+        }
+        return !e.text().trim().isEmpty();
+    }
+
+    /**
+     *
+     * @param iti
+     * @param structure
+     * @param previousElementId
+     * @return
+     */
+    private ImportTreeItem determineAncestory(ImportTreeItem iti, Map<Long, ImportTreeItem> structure, Long previousElementId) {
+        ImportTreeItem previousItem = structure.get(iti.getId() - 1);
+        if (null != previousItem) {
+            if (previousItem.getLevel() == iti.getLevel()) {
+                iti.setParentId(previousItem.getParentId());
+            }
+            iti.setParentId(locateLevelParent(structure, iti));
+        }
+        return iti;
+    }
+
+    /**
+     * Locate the actual parent for the item. This decision is based on the item
+     * level. retrieve the parent of the iti, if the parent is at a higher level
+     * confirm parent. if not higher level, get parents parent, check if it is a
+     * higher level if so set this parent as iti's parentId.
+     *
+     * @param structure
+     * @param iti
+     * @return
+     */
+    private long locateLevelParent(Map<Long, ImportTreeItem> structure, ImportTreeItem iti) {
+        //check if the iti level is less than its parent items
+        if (null != iti && null != structure) {
+            if (iti.getParentId() != 0) {
+                ImportTreeItem parentITI = structure.get(iti.getParentId());
+                if (parentITI.getLevel() < iti.getLevel()) {
+                    return iti.getParentId();
+                } else {
+                    return locateLevelParent(structure, parentITI);
+                }
+            }
+        }
+        return 0;
+    }
+}
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/ImportTreeItem.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/ImportTreeItem.java
new file mode 100644
index 0000000..9834f15
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/ImportTreeItem.java
@@ -0,0 +1,115 @@
+package org.sakaiproject.lessonbuildertool.util;
+
+/**
+ * This class will be used when passing HTML into a tree like data 
+ * structure
+ * @author OpenCollab
+ */
+public class ImportTreeItem {
+    private long id;
+    private int level = 0;
+    private int sequence = 0;
+    private long parentId = 0;
+    private String parentTitle = "";
+    /**
+     * 0 content
+     * 1 new page/heading
+     */
+    private int type;
+    private String title = "";
+    private String content = "";
+    private String htmlContent = "";
+
+    public long getId() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public int getSequence() {
+        return sequence;
+    }
+
+    public void setSequence(int sequence) {
+        this.sequence = sequence;
+    }
+
+    public long getParentId() {
+        return parentId;
+    }
+
+    public void setParentId(long parentId) {
+        this.parentId = parentId;
+    }
+
+    /**
+     * Get the type
+     * 0: content
+     * 1: new page/heading
+     * @return 
+     */ 
+    public int getType() {
+        return type;
+    }
+
+    /**
+     * Set the type
+     * 0 content
+     * 1 new page/heading
+     * @param type 
+     */
+    public void setType(int type) {
+        this.type = type;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public String getContent() {
+        return content;
+    }
+
+    public void setContent(String content) {
+        this.content = content;
+    }
+
+    public int getLevel() {
+        return level;
+    }
+
+    public void setLevel(int level) {
+        this.level = level;
+    }
+
+    public String getHtmlContent() {
+        return htmlContent;
+    }
+
+    public void setHtmlContent(String htmlContent) {
+        this.htmlContent = htmlContent;
+    }
+    
+    /**
+     * Returns the parent title, used for error messages in particular
+     * @return 
+     */
+    public String getParentTitle() {
+        return parentTitle;
+    }
+
+    public void setParentTitle(String parentTitle) {
+        this.parentTitle = parentTitle;
+    }
+    
+    @Override
+    public String toString() {
+        return "ImportTree{id=" + id + ", level=" + level + ", sequence=" + sequence + ", parentId=" + parentId + ", type=" + type + ", title=" + title + ", content=" + content + ", htmlContent=" + htmlContent + '}';
+    }
+}
diff --git a/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/XHTMLImageHandlerSakai.java b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/XHTMLImageHandlerSakai.java
new file mode 100644
index 0000000..7983952
--- /dev/null
+++ b/lessonbuilder/tool/src/java/org/sakaiproject/lessonbuildertool/util/XHTMLImageHandlerSakai.java
@@ -0,0 +1,128 @@
+package org.sakaiproject.lessonbuildertool.util;
+
+import java.text.MessageFormat;
+import org.apache.commons.lang.StringUtils;
+import org.docx4j.convert.in.xhtml.XHTMLImageHandler;
+import org.docx4j.dml.wordprocessingDrawing.Inline;
+import org.docx4j.jaxb.Context;
+import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
+import org.docx4j.openpackaging.parts.WordprocessingML.BinaryPartAbstractImage;
+import org.docx4j.org.xhtmlrenderer.docx.Docx4JFSImage;
+import org.docx4j.org.xhtmlrenderer.docx.Docx4jUserAgent;
+import org.docx4j.wml.P;
+import org.sakaiproject.component.api.ServerConfigurationService;
+import org.sakaiproject.content.api.ContentResource;
+import org.sakaiproject.exception.ServerOverloadException;
+import org.sakaiproject.lessonbuildertool.service.DataExportService;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.w3c.dom.Element;
+
+/**
+ * This is the Sakai implementation of the XHTMLImageHandler. This used to 
+ * handle image URL's that will need authentication by getting the content 
+ * through the DataExportService
+ * 
+ * TODO : review the copied XHTMLImageHandlerImpl code
+ * 
+ * @author OpenCollab
+ */
+public class XHTMLImageHandlerSakai implements XHTMLImageHandler {
+
+    public static Logger log = LoggerFactory.getLogger(XHTMLImageHandlerSakai.class);
+    
+    private DataExportService dataExportService;
+    
+    /**
+     * ServerConfigurationService to get url base paths
+     */
+    private ServerConfigurationService serverConfigurationService;
+
+    @Override
+    public void addImage(Docx4jUserAgent docx4jUserAgent, WordprocessingMLPackage wordMLPackage, P p, Element e, Long cx, Long cy) {
+        boolean isError = false;
+        try {   
+            String url = e.getAttribute("src");
+            // Get sakai resource
+            byte[] imageBytes = getSakaiImage(url, docx4jUserAgent);        
+            
+            if (imageBytes == null) {
+                isError = true;
+            } else {
+            	BinaryPartAbstractImage imagePart = BinaryPartAbstractImage.createImagePart(wordMLPackage, imageBytes);
+                Inline inline;
+                if (cx == null && cy == null) {
+                    inline = imagePart.createImageInline(null, e.getAttribute("alt"), 0, 1, false);
+                } else {
+                    if (cx == null) {
+                        cx = imagePart.getImageInfo().getSize().getWidthPx()
+                                * (cy / imagePart.getImageInfo().getSize().getHeightPx());
+
+                    } else if (cy == null) {
+                        cy = imagePart.getImageInfo().getSize().getHeightPx()
+                                * (cx / imagePart.getImageInfo().getSize().getWidthPx());
+                    }
+                    inline = imagePart.createImageInline(null, e.getAttribute("alt"), 0, 1, cx, cy, false);
+                }
+
+                // Now add the inline in w:p/w:r/w:drawing
+                org.docx4j.wml.R run = Context.getWmlObjectFactory().createR();
+                p.getContent().add(run);
+                org.docx4j.wml.Drawing drawing = Context.getWmlObjectFactory().createDrawing();
+                run.getContent().add(drawing);
+                drawing.getAnchorOrInline().add(inline);
+            }
+        } catch (Exception e1) {
+            log.error(MessageFormat.format("Error during image processing: ''{0}'', insert default text.", new Object[]{e.getAttribute("alt")}), e1);
+            isError = true;
+        }
+
+        if (isError) {
+            org.docx4j.wml.R run = Context.getWmlObjectFactory().createR();
+            p.getContent().add(run);
+
+            org.docx4j.wml.Text text = Context.getWmlObjectFactory().createText();
+            text.setValue("[MISSING IMAGE: " + e.getAttribute("alt") + ", " + e.getAttribute("alt") + " ]");
+
+            run.getContent().add(text);
+        }
+    }
+    
+    /**
+     * Retrieve the image byte[] 
+     * 
+     * Get the content from the DataExportService if it is a resource that 
+     * would need authentication via the url. 
+     * 
+     * @param url
+     * @param docx4jUserAgent
+     * @return 
+     */
+    private byte[] getSakaiImage(String url, Docx4jUserAgent docx4jUserAgent) throws ServerOverloadException, Exception {
+        String accessURL = serverConfigurationService.getAccessUrl();
+        // Get resource files from the DataExportService
+        if (url.contains(accessURL)) {
+            String resourceId = java.net.URLDecoder.decode(StringUtils.remove(url, accessURL + "/content"), "UTF-8");
+            ContentResource cr = dataExportService.getContentResourceData(resourceId);
+            return cr.getContent();
+        }else {
+            Docx4JFSImage docx4JFSImage = docx4jUserAgent.getDocx4JImageResource(url);
+            return docx4JFSImage==null?null:docx4JFSImage.getBytes();
+        }
+    }
+
+    /**
+     * @param serverConfigurationService the serverConfigurationService to set
+     */
+    public void setServerConfigurationService(ServerConfigurationService serverConfigurationService) {
+        this.serverConfigurationService = serverConfigurationService;
+    }
+
+    /**
+     * @param dataExportService the dataExportService to set
+     */
+    public void setDataExportService(DataExportService dataExportService) {
+        this.dataExportService = dataExportService;
+    }
+
+}
\ No newline at end of file
diff --git a/lessonbuilder/tool/src/resources/docx4j.properties b/lessonbuilder/tool/src/resources/docx4j.properties
new file mode 100644
index 0000000..9626e05
--- /dev/null
+++ b/lessonbuilder/tool/src/resources/docx4j.properties
@@ -0,0 +1,15 @@
+# Page size: use a value from org.docx4j.model.structure.PageSizePaper enum
+# eg A4, LETTER
+docx4j.PageSize=A4
+# Page size: use a value from org.docx4j.model.structure.MarginsWellKnown enum
+docx4j.PageMargins=NORMAL
+docx4j.PageOrientationLandscape=false
+
+# Page size: use a value from org.pptx4j.model.SlideSizesWellKnown enum
+# eg A4, LETTER
+pptx4j.PageSize=A4
+pptx4j.PageOrientationLandscape=false
+
+# If you haven't configured log4j yourself
+# docx4j will autoconfigure it.  Set this to true to disable that
+docx4j.Log4j.Configurator.disabled=false
\ No newline at end of file
diff --git a/lessonbuilder/tool/src/resources/messages.properties b/lessonbuilder/tool/src/resources/messages.properties
index 254ebe7..144e9d0 100644
--- a/lessonbuilder/tool/src/resources/messages.properties
+++ b/lessonbuilder/tool/src/resources/messages.properties
@@ -266,6 +266,83 @@ simplepage.cc_epub3=EPUB 3
 simplepage.cc_ext_assignment=Assignment (extended definition)
 simplepage.cc-has-badtypes=This cartridge contains resources of types with no specific support in this system. They will be treated as ordinary files: {}
 
+simplepage.import_pdf=Import PDF to create Lesson
+simplepage.import_pdf.tooltip=Import the PDF, create the Lesson
+simplepage.import-pdf-title=Import .pdf file
+simplepage.importpdf-descrip=Import .pdf to create the Lesson.
+simplepage.import-pdf-ok=OK
+
+simplepage.pdf.error.header=Errors have occurred while creating the file. Please corrected the errors listed below.
+simplepage.pdf.error.exporting=Error exporting the lesson to pdf format
+simplepage.pdf.error.creating.new.image=Error creating a new image 
+simplepage.pdf.error.url=Unable to properly URL encode the link address
+simplepage.pdf.error.hyperlink=Pdf error creating a hyperlink 
+simplepage.pdf.error.creating.assignment=Error creating Assignment export for pdf
+simplepage.pdf.error.creating.assessment=Error creating Assessment export for pdf
+simplepage.pdf.error.creating.forum=Error creating Forum export for pdf
+simplepage.pdf.error.creating.question=Error creating Question export for pdf
+simplepage.pdf.error.creating.url=Error retrieving URL for pdf export
+simplepage.pdf.error.creating.resource=Error creating Resource export for pdf
+simplepage.pdf.error.processing.text=Error processing Textual data for pdf
+
+
+
+simplepage.import_docx=Import MS Word to create Lesson
+simplepage.import_docx.tooltip=Import the docx, create the Lesson
+simplepage.import_docx-title=Import .docx file
+simplepage.importdocx-descrip=Import .docx to create the Lesson.
+simplepage.import_docx_file=Import .docx
+simplepage.import-docx-ok=OK
+simplepage.docx.error.importing=Error experienced while importing the DOCX file
+
+
+simplepage.export_epub=Export for offline reader
+simplepage.export_epub.tooltip=Export the Lessons content to an EPUB3 resource.
+simplepage.export-epub-title=Export EPUB3 file
+simplepage.export-epub-ok=OK
+simplepage.exportepub-descrip=Export contents of site in EPUB3 format.
+
+simplepage.export_docx=Export to MS Word
+simplepage.export_docx.tooltip=Export the Lessons content to an docx resource.
+simplepage.export-docx-title=Export .docx file
+simplepage.exportdocx-descrip=Export contents of site in docx format.
+simplepage.docx.error.header=Errors have occurred while creating the file. Please corrected the errors listed below.
+simplepage.docx.error.exporting=Error exporting the lesson to DOCX format
+simplepage.docx.error.creating.new.image=Error creating a new image 
+simplepage.docx.error.url=Unable to properly URL encode the link address
+simplepage.docx.error.hyperlink=Docx error creating a hyperlink 
+simplepage.docx.error.creating.assignment=Error creating Assignment export for Docx
+simplepage.docx.error.creating.assessment=Error creating Assessment export for Docx
+simplepage.docx.error.creating.forum=Error creating Forum export for Docx
+simplepage.docx.error.creating.question=Error creating Question export for Docx
+simplepage.docx.error.creating.url=Error retrieving URL for Docx export
+simplepage.docx.error.creating.resource=Error creating Resource export for Docx
+simplepage.docx.error.processing.text=Error processing Textual data for Docx
+
+
+
+simplepage.epub.error.header=The file has been created with some errors. Please see exported document for more information.
+simplepage.epub.error.creating.assignment=Error creating Assignment export for Epub
+simplepage.epub.error.creating.assessment=Error creating Assessment export for Epub
+simplepage.epub.error.creating.forum=Error creating Forum export for Epub
+simplepage.epub.error.creating.url=Error retrieving URL for Epub export
+simplepage.epub.error.creating.resource=Error creating Resource export for Epub
+simplepage.epub.error.attaching.css=Error attaching the sites CSS styling for Epub 
+
+export-epub-current=export-epub-current
+simplepage.exportepub-current=test
+simplepage.export-epub-submit=Export Epub File
+simplepage.export-epub-cancel=Cancel
+simplepage.export-docx-submit=Export This Lesson to DOCX
+simplepage.export-docx-cancel=Cancel
+export-docx-cancel=Cancel
+export-epub-form=export-epub-form
+
+simplepage.export_error=Export Error(s) 
+simplepage.export_error.tooltip=Error(s) have occurred during the export process.
+simplepage.export-error-title=Errors during export 
+simplepage.exporterror-descrip=Error(s) have occurred during the export process.
+
 simplepage.export_cc=Export CC
 simplepage.export_cc.tooltip=Create file in IMS Common Cartridge format. This may be used to save the contents of a course for later use. Most other Course Management Systems can read Common Cartridge files. The file will contain all content from Lessons, Assignments, Forum or Topics, Quizzes, and Question Pools. However not all details will be saved.
 simplepage.export-cc-title=Export IMS Common Cartridge file
diff --git a/lessonbuilder/tool/src/webapp/WEB-INF/applicationContext.xml b/lessonbuilder/tool/src/webapp/WEB-INF/applicationContext.xml
index 9ffe417..675163e 100644
--- a/lessonbuilder/tool/src/webapp/WEB-INF/applicationContext.xml
+++ b/lessonbuilder/tool/src/webapp/WEB-INF/applicationContext.xml
@@ -3,6 +3,8 @@
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
 
+    <bean id="applicationContextProvder" class="org.sakaiproject.lessonbuildertool.util.ApplicationContextProvider"/>
+    
    <!-- Use the Sakai session factory, pre-configured, instead of one local to TaskList
         we are adding our HBM files to the Sakai session factory instead of creating
         our own copy of it -->
@@ -87,6 +89,10 @@ simplePageBean.hasReleaseDate,
 simplePageBean.height,
 simplePageBean.hidePage,
 simplePageBean.importCc,
+simplePageBean.importDocx,
+simplePageBean.exportEpub,
+simplePageBean.exportDocx,
+simplePageBean.exportError,
 simplePageBean.importtop,
 simplePageBean.isCaption,
 simplePageBean.isMultimedia,
@@ -307,6 +313,14 @@ simplePageBean.peerEvalAllowSelfGrade
     	</constructor-arg>
     	</bean>
 
+        <bean id="org.sakaiproject.lessonbuildertool.service.DataExportService"
+	      class="org.sakaiproject.lessonbuildertool.service.DataExportServiceImpl">
+            <property name="contentHostingService"><ref bean="org.sakaiproject.content.api.ContentHostingService"/></property>
+            <property name="simplePageToolDao" ref="org.sakaiproject.lessonbuildertool.model.SimplePageToolDao" />
+            <property name="siteService" ref="org.sakaiproject.site.api.SiteService"/>
+            <property name="publishedAssessmentFacadeQueries"><ref bean="PublishedAssessmentFacadeQueries" /></property>
+	</bean>
+
  	<bean id="org.sakaiproject.lessonbuildertool.ccexport.CCExport"
 	      class="org.sakaiproject.lessonbuildertool.ccexport.CCExport">
 	  <property name="contentHostingService"><ref bean="org.sakaiproject.content.api.ContentHostingService"/></property>
@@ -317,7 +331,46 @@ simplePageBean.peerEvalAllowSelfGrade
 	  <property name="messageLocator" ref="messageLocator"/>
 	  <property name="simplePageToolDao" ref="org.sakaiproject.lessonbuildertool.model.SimplePageToolDao" />
 	</bean>
+        
+        <bean id="org.sakaiproject.lessonbuildertool.docximport.DocxImport"
+            class="org.sakaiproject.lessonbuildertool.docximport.DocxImport">
+	</bean>
+        
+ 	<bean id="org.sakaiproject.lessonbuildertool.epubexport.EpubExport"
+            class="org.sakaiproject.lessonbuildertool.epubexport.EpubExport">
+            <property name="contentHostingService"><ref bean="org.sakaiproject.content.api.ContentHostingService"/></property>
+            <property name="dataExportService" ref="org.sakaiproject.lessonbuildertool.service.DataExportService" />
+            <property name="htmlCleaner" ref="org.sakaiproject.lessonbuildertool.util.HtmlCleanerUtil"/>
+            <property name="exportHelper" ref="org.sakaiproject.lessonbuildertool.util.ExportHelper"/>
+	    <property name="messageLocator" ref="messageLocator"/>
+	</bean>
+	
+ 	<bean id="org.sakaiproject.lessonbuildertool.docxexport.DocxExport"
+            class="org.sakaiproject.lessonbuildertool.docxexport.DocxExport">
+            <property name="dataExportService" ref="org.sakaiproject.lessonbuildertool.service.DataExportService" />
+            <property name="messageLocator" ref="messageLocator"/>
+            <property name="htmlCleaner" ref="org.sakaiproject.lessonbuildertool.util.HtmlCleanerUtil"/>
+            <property name="exportHelper" ref="org.sakaiproject.lessonbuildertool.util.ExportHelper"/>
+            <property name="xHTMLImageHandler"><ref bean="org.docx4j.convert.in.xhtml.XHTMLImageHandler"/></property>
+	</bean>
 
+ 	<bean id="org.docx4j.convert.in.xhtml.XHTMLImageHandler"
+            class="org.sakaiproject.lessonbuildertool.util.XHTMLImageHandlerSakai">
+            <property name="serverConfigurationService" ref="org.sakaiproject.component.api.ServerConfigurationService"/>
+            <property name="dataExportService" ref="org.sakaiproject.lessonbuildertool.service.DataExportService" />
+	</bean>
+    
+ 	<bean id="org.sakaiproject.lessonbuildertool.util.HtmlCleanerUtil"
+            class="org.sakaiproject.lessonbuildertool.util.HtmlCleanerUtil">
+            <property name="dataExportService" ref="org.sakaiproject.lessonbuildertool.service.DataExportService" />
+            <property name="serverConfigurationService" ref="org.sakaiproject.component.api.ServerConfigurationService"/>
+	</bean>   
+	
+ 	<bean id="org.sakaiproject.lessonbuildertool.util.ExportHelper"
+	    class="org.sakaiproject.lessonbuildertool.util.ExportHelper">
+            <property name="messageLocator" ref="messageLocator"/>
+	</bean>   
+        
  	<bean id="org.sakaiproject.lessonbuildertool.ccexport.SamigoExport"
 	      class="org.sakaiproject.lessonbuildertool.ccexport.SamigoExport"
               init-method="init"
@@ -362,10 +415,24 @@ simplePageBean.peerEvalAllowSelfGrade
 	  <property name="messageLocator" ref="messageLocator"/>
 	  <property name="simplePageToolDao" ref="org.sakaiproject.lessonbuildertool.model.SimplePageToolDao" />
 	</bean>
+        
+	<bean parent="viewParamsRegistrarParent" id="importDocx" >
+            <property name="viewID" value="importDocx" />
+            <property name="viewParamsClass" value="org.sakaiproject.lessonbuildertool.tool.view.ImportDocxViewParameters" />
+	</bean>
+        
+	<bean parent="viewParamsRegistrarParent" id="exportDocx" >
+            <property name="viewID" value="exportDocx" />
+            <property name="viewParamsClass" value="org.sakaiproject.lessonbuildertool.tool.view.ExportDocxViewParameters" />
+	</bean>
 
+	<bean parent="viewParamsRegistrarParent" id="exportEpub">
+            <property name="viewID" value="exportEpub" />
+            <property name="viewParamsClass" value="org.sakaiproject.lessonbuildertool.tool.view.ExportEpubViewParameters" />
+	</bean>
 	<bean parent="viewParamsRegistrarParent">
-          <property name="viewID" value="exportCc" />
-          <property name="viewParamsClass"
+            <property name="viewID" value="exportCc" />
+            <property name="viewParamsClass"
 		    value="org.sakaiproject.lessonbuildertool.tool.view.ExportCCViewParameters" />
 	</bean>
 	
diff --git a/lessonbuilder/tool/src/webapp/js/jquery.cookie.js b/lessonbuilder/tool/src/webapp/js/jquery.cookie.js
new file mode 100644
index 0000000..c7f3a59
--- /dev/null
+++ b/lessonbuilder/tool/src/webapp/js/jquery.cookie.js
@@ -0,0 +1,117 @@
+/*!
+ * jQuery Cookie Plugin v1.4.1
+ * https://github.com/carhartl/jquery-cookie
+ *
+ * Copyright 2013 Klaus Hartl
+ * Released under the MIT license
+ */
+(function (factory) {
+	if (typeof define === 'function' && define.amd) {
+		// AMD
+		define(['jquery'], factory);
+	} else if (typeof exports === 'object') {
+		// CommonJS
+		factory(require('jquery'));
+	} else {
+		// Browser globals
+		factory(jQuery);
+	}
+}(function ($) {
+
+	var pluses = /\+/g;
+
+	function encode(s) {
+		return config.raw ? s : encodeURIComponent(s);
+	}
+
+	function decode(s) {
+		return config.raw ? s : decodeURIComponent(s);
+	}
+
+	function stringifyCookieValue(value) {
+		return encode(config.json ? JSON.stringify(value) : String(value));
+	}
+
+	function parseCookieValue(s) {
+		if (s.indexOf('"') === 0) {
+			// This is a quoted cookie as according to RFC2068, unescape...
+			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
+		}
+
+		try {
+			// Replace server-side written pluses with spaces.
+			// If we can't decode the cookie, ignore it, it's unusable.
+			// If we can't parse the cookie, ignore it, it's unusable.
+			s = decodeURIComponent(s.replace(pluses, ' '));
+			return config.json ? JSON.parse(s) : s;
+		} catch(e) {}
+	}
+
+	function read(s, converter) {
+		var value = config.raw ? s : parseCookieValue(s);
+		return $.isFunction(converter) ? converter(value) : value;
+	}
+
+	var config = $.cookie = function (key, value, options) {
+
+		// Write
+
+		if (value !== undefined && !$.isFunction(value)) {
+			options = $.extend({}, config.defaults, options);
+
+			if (typeof options.expires === 'number') {
+				var days = options.expires, t = options.expires = new Date();
+				t.setTime(+t + days * 864e+5);
+			}
+
+			return (document.cookie = [
+				encode(key), '=', stringifyCookieValue(value),
+				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
+				options.path    ? '; path=' + options.path : '',
+				options.domain  ? '; domain=' + options.domain : '',
+				options.secure  ? '; secure' : ''
+			].join(''));
+		}
+
+		// Read
+
+		var result = key ? undefined : {};
+
+		// To prevent the for loop in the first place assign an empty array
+		// in case there are no cookies at all. Also prevents odd result when
+		// calling $.cookie().
+		var cookies = document.cookie ? document.cookie.split('; ') : [];
+
+		for (var i = 0, l = cookies.length; i < l; i++) {
+			var parts = cookies[i].split('=');
+			var name = decode(parts.shift());
+			var cookie = parts.join('=');
+
+			if (key && key === name) {
+				// If second argument (value) is a function it's a converter...
+				result = read(cookie, value);
+				break;
+			}
+
+			// Prevent storing a cookie that we couldn't decode.
+			if (!key && (cookie = read(cookie)) !== undefined) {
+				result[name] = cookie;
+			}
+		}
+
+		return result;
+	};
+
+	config.defaults = {};
+
+	$.removeCookie = function (key, options) {
+		if ($.cookie(key) === undefined) {
+			return false;
+		}
+
+		// Must not alter options, thus extending a fresh object...
+		$.cookie(key, '', $.extend({}, options, { expires: -1 }));
+		return !$.cookie(key);
+	};
+
+}));
diff --git a/lessonbuilder/tool/src/webapp/js/show-page.js b/lessonbuilder/tool/src/webapp/js/show-page.js
index e76dcfc..1926ce6 100644
--- a/lessonbuilder/tool/src/webapp/js/show-page.js
+++ b/lessonbuilder/tool/src/webapp/js/show-page.js
@@ -185,6 +185,38 @@ $(document).ready(function() {
 			draggable: false
 		});
 
+                $('#import-docx-dialog').dialog({
+                    autoOpen: false,
+                    width: 600,
+                    modal: false,
+                    resizable: false,
+                    draggable: false
+		});
+                
+                $('#import-pdf-dialog').dialog({
+                    autoOpen: false,
+                    width: 600,
+                    modal: false,
+                    resizable: false,
+                    draggable: false
+		});
+            
+                $('#export-epub-dialog').dialog({
+                    autoOpen: false,
+                    width: 600,
+                    modal: false,
+                    resizable: false,
+                    draggable: false
+		});
+                
+                $('#export-docx-dialog').dialog({
+                    autoOpen: false,
+                    width: 600,
+                    modal: false,
+                    resizable: false,
+                    draggable: false
+		});
+        
 		$('#comments-dialog').dialog({
 			autoOpen: false,
 			width: modalDialogWidth(),
@@ -248,7 +280,8 @@ $(document).ready(function() {
 		$(window).resize(function() {
 			var modalDialogList = ['#subpage-dialog', '#edit-item-dialog', '#edit-multimedia-dialog',
 			'#add-multimedia-dialog', '#edit-title-dialog', '#new-page-dialog', '#remove-page-dialog',
-			'#youtube-dialog', '#movie-dialog', '#import-cc-dialog', '#export-cc-dialog',
+			'#youtube-dialog', '#movie-dialog', '#import-cc-dialog', '#export-cc-dialog', '#import-docx-dialog', 
+                        '#export-epub-dialog', '#export-docx-dialog',
 		        '#comments-dialog', '#student-dialog', '#question-dialog', '#delete-confirm'];
 			for (var i = 0; i < modalDialogList.length; i++) {
 				$(modalDialogList[i]).dialog("option", "width", modalDialogWidth());
@@ -376,6 +409,100 @@ $(document).ready(function() {
 			closeExportCcDialog();
 			return false;
 		    });
+                
+                $('#import-docx').click(function(){
+                    oldloc = $(".dropdown a");
+                    closeDropdowns();
+                    $('#import-docx-dialog').dialog('open');
+                    setupdialog($('#import-docx-dialog'));
+                    return false;
+                });
+        
+                $("#import-docx-submit").on("click",function() {
+                    importDocx();
+                });
+        
+                $('#import-pdf').click(function(){
+                    closeDropdowns();
+                    var position =  $(this).position();
+                    $("#import-pdf-dialog").dialog("option", "position", [position.left, position.top]);
+                    oldloc = $(".dropdown a");
+                    $('#import-pdf-dialog').dialog('open');
+                    $('#import-pdf-message').hide();
+                    $('#import-pdf-resource').hide();
+                    $('#import-pdf-ok').hide();      
+                    $('#importPdfProgressbar').show();
+                    checksize($('#import-pdf-dialog'));
+                    importPdf();
+                    var pdfLink = $("#import-pdf-link").attr("href");
+                    $.ajax({
+                        type: "GET", 
+                        url: pdfLink,
+                        success: function(data,textStatus,resp){
+                            var obj = $.parseJSON(resp.responseText);
+                            $('#import-pdf-message').show();
+                            $('#import-pdf-resource').show();
+                            $('#import-pdf-ok').show();
+                            if(obj.errorMessage){
+                                $('#import-pdf-message').text(obj.errorMessage);
+                                $('#import-pdf-message').parent().append("<div>"+obj.errorReason+"</div>");
+                            }else{
+                                $('#import-pdf-resource').text(data.docName);
+                                $('#import-pdf-resource').attr("href", data.docURL);
+                            }
+                            $('#importPdfProgressbar').hide();
+                        }
+                      });
+                    return false;
+                });
+                
+                $('#export-epub').click(function(){
+                    oldloc = $(".dropdown a");
+                    closeDropdowns();
+                    $('#export-epub-dialog').dialog('open');
+                    setupdialog($('#export-epub-dialog'));
+                    exportToEpub();
+                    var epubLink = $("#export-epub-link").attr("href");
+                    $.ajax({
+                        type: "GET", 
+                        url: epubLink,
+                        success: function(data,textStatus,resp){
+                            var obj = $.parseJSON(resp.responseText);
+                            $('#export-epub-message').show();
+                            $('#export-epub-resource').show();
+                            $('#export-epub-ok').show();
+                            if(obj.errorMessage){
+                                $('#export-epub-message').text(obj.errorMessage);
+                                $('#export-epub-message').parent().append("<div>"+obj.errorReason+"</div>");
+                            }else{
+                                $('#export-epub-resource').text(data.docName);
+                                $('#export-epub-resource').attr("href", data.docURL);
+                            }
+                            $('#epubProgressbar').hide();
+                        }
+                      });
+                    return false;
+		});
+                
+                $('#export-docx').click(function(){
+                    oldloc = $(".dropdown a");
+                    closeDropdowns();
+                    $('#export-docx-dialog').dialog('open');
+                    setupdialog($('#export-docx-dialog'));
+                    $.removeCookie('fileDownloadToken', { path: '/' });
+                    oldloc = $(".dropdown a");
+                    exportToDocx();
+                    $("#export-docx-link").get(0).click();
+                    fileDownloadCheckTimer = window.setInterval(function() {
+                        var cookieValue = $.cookie('fileDownloadToken');
+                        if (cookieValue === "closeDocXDialog") {
+                            window.clearInterval(fileDownloadCheckTimer);
+                            $.removeCookie('fileDownloadToken', { path: '/' });
+                            location.reload();
+                        }
+                    }, 1000);
+                    return false;
+		});  
 
 		$('#import-cc-submit').click(function() {
 			// prevent double clicks
@@ -386,10 +513,10 @@ $(document).ready(function() {
 			return true;
 	    	});
 
-	    // This code must be read together with the SimplePageItem.MULTIMEDIA
-	    // display code in ShowPageProducer.java (To find it search for
-	    // multimediaDisplayType) and with the code in SimplePageBean that
-	    // handles the submit from this dialog, addMultimedia.
+                // This code must be read together with the SimplePageItem.MULTIMEDIA
+                // display code in ShowPageProducer.java (To find it search for
+                // multimediaDisplayType) and with the code in SimplePageBean that
+                // handles the submit from this dialog, addMultimedia.
 
 
 		$('#mm-add-item').click(function() {
@@ -1903,7 +2030,9 @@ $(document).ready(function() {
 				$('#youtube-dialog').dialog('isOpen') ||
 				$('#movie-dialog').dialog('isOpen') ||
 				$('#import-cc-dialog').dialog('isOpen') ||
-				$('#export-cc-dialog').dialog('isOpen') ||
+				$('#import-docx-dialog').dialog('isOpen') ||
+                                $('#export-epub-dialog').dialog('isOpen') ||
+                                $('#export-docx-dialog').dialog('isOpen') ||
 				$('#comments-dialog').dialog('isOpen') ||
 				$('#column-dialog').dialog('isOpen') ||
 			        $('#student-dialog').dialog('isOpen') ||
@@ -2318,6 +2447,27 @@ function closeExportCcDialog() {
 	oldloc.focus();
 }
 
+function closeExportEpubDialog() {
+	$('#export-epub-dialog').dialog('close');
+	oldloc.focus();
+}
+
+function closeImportDocxDialog() {
+	$('#import-docx-dialog').dialog('close');
+	oldloc.focus();
+}
+
+function closeImportPdfDialog() {
+	$('#import-pdf-dialog').dialog('close');
+	oldloc.focus();
+}
+
+function closeExportDocxDialog() {
+        $('#export-docx-dialog').dialog('close');
+	oldloc.focus();
+}
+
+
 function closeRemovePageDialog() {
 	$('#remove-page-dialog').dialog('close');
 	oldloc.focus();
@@ -3005,3 +3155,53 @@ function fixupHeights() {
 	});
 };
 
+   
+/**
+ * Export to epub function. 
+ * Displays the progress bar and populates the value.
+ */
+function exportToEpub(){
+    $( "#epubProgressbar" ).progressbar({
+             value: false
+    });
+}
+
+/**
+ * Import to Docx function. 
+ * Displays the progress bar and populates the value.
+ */
+function importDocx(){
+    $( "#importDocxProgressbar" ).progressbar({
+        value: false
+    });
+    $('#importDocxProgressbar').show();
+    $('#docx-import-controls').hide();
+}
+
+/**
+ * Import to PDF function. 
+ * Displays the progress bar and populates the value.
+ */
+function importPdf(){
+    $( "#importPdfProgressbar" ).progressbar({
+        value: false
+    });
+}
+
+/**
+ * Export to DocX function. 
+ * Displays the progress bar and populates the value.
+ */
+function exportToDocx(){
+    $( "#docxProgressbar" ).progressbar({
+             value: false
+    });    
+}
+
+/**
+ * Close the ExportDocxDialog
+ */
+function closeExportDocxDialog() {
+    $('#export-docx-dialog').dialog('close');
+    oldloc.focus();
+}
\ No newline at end of file
diff --git a/lessonbuilder/tool/src/webapp/templates/ShowPage.html b/lessonbuilder/tool/src/webapp/templates/ShowPage.html
index 049c667..468c7c3 100644
--- a/lessonbuilder/tool/src/webapp/templates/ShowPage.html
+++ b/lessonbuilder/tool/src/webapp/templates/ShowPage.html
@@ -59,6 +59,7 @@
  <script type="text/javascript" src="$context/js/hoverIntent.js"></script>
  <script type="text/javascript" src="$context/js/show-page.js"></script>
  <script type="text/javascript" src="$context/js/gradingAjax.js"></script>
+ <script type="text/javascript" src="$context/js/jquery.cookie.js"></script>
  <link rel="stylesheet" rsf:id="customCSS" type="text/css" />
 
  <a href="#" rsf:id="redirect-link" id="redirect-link"></a>
@@ -324,6 +325,21 @@
                       <a href="#" role="menuitem" rsf:id="export-cc" id="export-cc"><span rsf:id="msg=simplepage.export_cc"></span></a>
                       <!-- just a message, so will display when it should not-->
                     </li>
+                    <li>
+                      <a href="#" role="menuitem" rsf:id="import-docx" id="import-docx"><span rsf:id="msg=simplepage.import_docx"></span></a>
+                      <!-- just a message, so will display when it should not-->
+                      <div rsf:id="msg=simplepage.importdocx-descrip"></div>
+                    </li> 
+                    <li>
+                      <a href="#" role="menuitem" rsf:id="export-epub" id="export-epub"><span rsf:id="msg=simplepage.export_epub"></span></a>
+                      <!-- just a message, so will display when it should not-->
+                      <div rsf:id="msg=simplepage.exportepub-descrip"></div>
+                    </li> 
+                    <li>
+                      <a href="#" role="menuitem" rsf:id="export-docx" id="export-docx"><span rsf:id="msg=simplepage.export_docx"></span></a>
+                      <!-- just a message, so will display when it should not-->
+                      <div rsf:id="msg=simplepage.exportdocx-descrip"></div>
+                    </li> 
                     <li rsf:id="show-lti-import">
                       <form action="#" rsf:id="lti-import-form" method="post" enctype="multipart/form-data">
 			<input type="hidden" rsf:id="csrf1" />
@@ -1275,7 +1291,52 @@
 					</div>
 				</form>
 			</div>
-
+                        <div id="import-docx-dialog" rsf:id="import-docx-dialog">
+                            <form action="#" rsf:id="import-docx-form" method="post"
+                              enctype="multipart/form-data" class="controlPanel">
+                                <div class="">
+                                    <p>DOCX import</p>
+                                    <label rsf:id="msg=simplepage.import_docx_file" for="docx_file" id="docx-dialog-label">File</label> <br />
+                                    <input type="file" name="docx-file" id="docx-file" style="width:95%" class="edit-multimedia-input" /><br />
+                                    <a href="#" style="display: none" rsf:id="import-docx-link"	id="import-docx-link"></a>
+                                    <label id="import-docx-message">DOCX imported and lesson has been created. </label>
+                                    <a id="import-docx-resource"></a>
+                                </div>
+                                <div id="docx-import-controls">
+                                    <input type="submit" id="import-docx-submit" rsf:id="import-docx-submit" />
+                                    <input type="submit" rsf:id="import-docx-cancel" onclick="closeImportDocxDialog(); return false" />
+                                </div>
+                                <br/>
+                                <div id="importDocxProgressbar"></div>
+                            </form>
+                        </div>
+                    
+			<div id="export-epub-dialog" rsf:id="export-epub-dialog">
+                            <form action="#" rsf:id="export-epub-form" method="post"
+					enctype="multipart/form-data" class="controlPanel">
+                                <div class="">
+                                    <p>EPUB export</p>
+                                    <a href="#" style="display: none" rsf:id="export-epub-link"	id="export-epub-link"></a>
+                                    <label id="export-epub-message">Epub exported and saved to resources as : </label>
+                                    <a id="export-epub-resource"></a>
+                                </div>
+                                <div>
+                                    <input type="submit" id="export-epub-ok" rsf:id="export-epub-ok" onclick="location.reload(); return false" />
+                                </div>
+                                <div id="epubProgressbar"></div>
+                            </form>
+			</div>
+			<div id="export-docx-dialog" rsf:id="export-docx-dialog">
+                            <form action="#" rsf:id="export-docx-form" method="post"
+                                enctype="multipart/form-data" class="controlPanel">
+                                <div class="">
+                                    <p>DocX export</p>
+                                    <a href="#" style="display: none" rsf:id="export-docx-link"	id="export-docx-link"></a>
+                                </div>
+				
+				<div id="docxProgressbar"></div>
+                            </form>
+			</div>
 			<div id="edit-title-dialog" rsf:id="edit-title-dialog" class="lessonsDialog">
 				<div class="ui-widget" id="edit-title-error-container">
 					<div class="message-error">
